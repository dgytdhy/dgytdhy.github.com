<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh_CN"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://www.desgard.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.desgard.com/" rel="alternate" type="text/html" hreflang="zh_CN" /><updated>2020-10-12T18:42:41-08:00</updated><id>https://www.desgard.com/feed.xml</id><title type="html">一片瓜田</title><subtitle>I write more code to write less.
</subtitle><author><name>冬瓜</name><email>gua@desgard.com</email></author><entry><title type="html">Podspec 文件分析</title><link href="https://www.desgard.com/2020/10/12/cocoapods-story-5.html" rel="alternate" type="text/html" title="Podspec 文件分析" /><published>2020-10-12T00:00:00-08:00</published><updated>2020-10-12T00:00:00-08:00</updated><id>https://www.desgard.com/2020/10/12/cocoapods-story-5</id><content type="html" xml:base="https://www.desgard.com/2020/10/12/cocoapods-story-5.html">&lt;h1 id=&quot;引子&quot;&gt;引子&lt;/h1&gt;

&lt;p&gt;在上文 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/248308670&quot;&gt;Podfile 解析逻辑&lt;/a&gt; 中（建议先阅读这篇文章），我们以 Xcode 工程结构作为切入点介绍了 Podfile 背后对应的数据结构，剖析了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 文件是如何解析与加载，并最终 &lt;em&gt;“入侵”&lt;/em&gt; 项目影响其工程结构的。今天我们来聊一聊 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/CocoaPods/Core&quot;&gt;CocoaPods-Core&lt;/a&gt; 中的另一个重要文件 — &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt; 以及它所撑起的 CocoaPods 世界。&lt;/p&gt;

&lt;p&gt;一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 的创建和发布离不开 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.podspec&lt;/code&gt; 文件，它可以很简单也能复杂，如 &lt;a href=&quot;https://github.com/Tencent/QMUI_iOS/blob/master/QMUIKit.podspec&quot;&gt;QMUIKit&lt;/a&gt;（后续介绍)。&lt;/p&gt;

&lt;p&gt;今天我们就直奔主题，来分析 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt; 文件。&lt;/p&gt;

&lt;h1 id=&quot;podspec&quot;&gt;Podspec&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt; 是用于 &lt;strong&gt;描述一个 Pod 库的源代码和资源将如何被打包编译成链接库或 framework 的文件&lt;/strong&gt; ，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt; 中的这些描述内容最终将映会映射到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Specification&lt;/code&gt; 类中（以下简称 &lt;strong&gt;Spec&lt;/strong&gt;）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1602123337307-c263f917-e45d-46c7-be0c-74fa1bc663e0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在让我们来重新认识 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;podspec-初探&quot;&gt;Podspec 初探&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt; 支持的文件格式为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.podspec&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.json&lt;/code&gt; 两种，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.podspec&lt;/code&gt; 本质是 Ruby 文件。&lt;/p&gt;

&lt;p&gt;问题来了，为什么是 JSON 格式而不像 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 一样支持 YAML 呢？&lt;/p&gt;

&lt;p&gt;笔者的理解：由于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt; 文件会满世界跑，它可能存在于 CocoaPods 的 &lt;a href=&quot;https://cdn.cocoapods.org/&quot;&gt;CDN Service&lt;/a&gt;、&lt;a href=&quot;https://github.com/CocoaPods/Specs&quot;&gt;Speces Repo&lt;/a&gt; 或者你们的私有 Specs Repo 上，因此采用  JSON 的文件在网络传输中会更友好。而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 更多的场景是用于序列化，它需要在项目中生成一份经依赖仲裁后的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 快照，用于后续的对比。&lt;/p&gt;

&lt;h3 id=&quot;podspec-1&quot;&gt;Podspec&lt;/h3&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Pod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Reachability'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'3.1.0'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;license&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BSD'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;homepage&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://github.com/tonymillion/Reachability'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;authors&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Tony Million'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'tonymillion@gmail.com'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;summary&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ARC and GCD Compatible Reachability Class for iOS and OS X.'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://github.com/tonymillion/Reachability.git'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;v&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Reachability.{h,m}'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;framework&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SystemConfiguration'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面这份 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reachability.podspec&lt;/code&gt; 配置，基本通过命令行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod lib create NAME&lt;/code&gt; 就能帮我们完成。除此之外我们能做的更多，比如，默认情况下 CococaPods 会为每个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pod&lt;/code&gt; framework 生成一个对应的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modulemap&lt;/code&gt; 文件，它将包含 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt; 中指定的公共 headers。如果需要自定义引入的 header 文件，仅需配置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;moduel_map&lt;/code&gt; 即可完成。&lt;/p&gt;

&lt;p&gt;下面是进阶版配置：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Pod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Reachability'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 省略与前面相同部分的配置 ...&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;module_name&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Rich'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;swift_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'4.0'&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deployment_target&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'9.0'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;osx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deployment_target&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'10.10'&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_files&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Reachability/common/*.swift'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_files&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Reachability/ios/*.swift'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Reachability/extensions/*.swift'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;osx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_files&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Reachability/osx/*.swift'&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;framework&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SystemConfiguration'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;framework&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UIKit'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;osx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;framework&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'AppKit'&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SomeOtherPod'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;像 👆 我们为不同的系统指定了不同的源码和依赖等，当然可配置的不只这些。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt; 支持的完整配置分类如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1602123356225-0e9d5db0-e68e-4808-b198-735931d3a780.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;想了解更多的配置选项：&lt;a href=&quot;https://guides.cocoapods.org/syntax/Podspec.html&quot;&gt;传送门&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;convention-over-configuration&quot;&gt;Convention Over Configuration&lt;/h3&gt;

&lt;p&gt;说到配置，不得不提一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CoC&lt;/code&gt; 约定大于配置。约定大于配置算是在软件工程较早出现的概念的了，大意是：&lt;strong&gt;为了简单起见，我们的代码需要按照一定的约定来编写&lt;/strong&gt;（如代码放在什么目录，用什么文件名，用什么类名等)。 这样既简化了配置文件，同时也降低了学习成本。&lt;/p&gt;

&lt;p&gt;约定大于配置可以说是通过 &lt;a href=&quot;https://www.wikiwand.com/en/Ruby_on_Rails&quot;&gt;Ruby on Rails&lt;/a&gt; 发扬光大的。尽管它一直饱受争议，但是主流语言的依赖管理工具，如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Maven&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt; 等都遵循 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CoC&lt;/code&gt; 进行不断演进的，因为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CoC&lt;/code&gt; 能够有效帮助开发者减轻选择的痛感，减少无意义的选择。一些新的语言也吸收了这个思想，比如 Go 语言。如果用 C/C++ 可能需要定义复杂的 Makefile 来定义编译的规则，以及如何运行测试用例，而在 Go 中这些都是约定好的。&lt;/p&gt;

&lt;p&gt;举个 🌰 ：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 中是可以指定 pod library 所链接的 Xcode project，不过大多情况下无需配置，CocoaPods 会自动查找 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 所在的同级目录下所对应的工程文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.project&lt;/code&gt; 。&lt;/p&gt;

&lt;h2 id=&quot;spec-的核心数据结构&quot;&gt;Spec 的核心数据结构&lt;/h2&gt;

&lt;h3 id=&quot;specification&quot;&gt;Specification&lt;/h3&gt;

&lt;p&gt;在数据结构上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Specification&lt;/code&gt; 与 &lt;a href=&quot;https://looseyi.github.io/post/sourcecode-cocoapods/04-cocoapods-podfile/#targetdefinition&quot;&gt;TargetDefinition&lt;/a&gt; 是类似的，&lt;strong&gt;同为多叉树结构&lt;/strong&gt;。简化后的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spec&lt;/code&gt; 的类如下：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'active_support/core_ext/string/strip.rb'&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 记录对应 platform 上 Spec 的其他 pod 依赖&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/specification/consumer'&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 解析 DSL&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/specification/dsl'&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 校验 Spec 的正确性，并抛出对应的错误和警告&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/specification/linter'&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 用于解析 DSL 内容包含的配置信息&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/specification/root_attribute_accessors'&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 记录一个 Pod 所有依赖的 Spec 来源信息&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/specification/set'&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# json 格式数据解析&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/specification/json'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Pod&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Specification&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DSL&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DSL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Deprecations&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RootAttributesAccessors&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;JSONSupport&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;# `subspec` 的父节点&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:parent&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# `Spec` 的唯一 id，由 name + version 的 hash 构成&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hash_value&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 记录 `Spec` 的配置信息 &lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:attributes_hash&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# `Spec` 包含的 `subspec`&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:subspecs&lt;/span&gt;
     
    &lt;span class=&quot;c1&quot;&gt;# 递归调用获取 Specification 的根节点&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
     
	 &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hash&lt;/span&gt;
   	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hash_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
      	&lt;span class=&quot;vi&quot;&gt;@hash_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hash&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@hash_value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
     
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Specification&lt;/code&gt; 同样用 map &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attributes_hash&lt;/code&gt; 来记录配置信息。&lt;/p&gt;

&lt;p&gt;注意，这里的 parent 是为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subspec&lt;/code&gt; 保留的，用于指向其父节点的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spec&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1602123372255-dae8539b-97d6-4219-8c0a-875c57bc53cd.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;subspecs&quot;&gt;Subspecs&lt;/h3&gt;

&lt;p&gt;乍一听 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subspec&lt;/code&gt; 这个概念似乎有一些抽象，不过当你理解了上面的描述，就能明白什么是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subspec&lt;/code&gt; 了。我们知道在 Xcode 项目中，target 作为最小的可编译单元，它编译后的产物为链接库或 framework。而在 CocoaPods 的世界里这些 targets 则是由 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spec&lt;/code&gt; 文件来描述的，它还能拆分成一个或者多个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subspec&lt;/code&gt;，我们暂且把它称为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spec&lt;/code&gt; 的 &lt;strong&gt;子模块&lt;/strong&gt;，子模块也是用 &lt;strong&gt;Specification&lt;/strong&gt; 类来描述的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;子模块可以单独作为依赖被引入到项目中。&lt;/strong&gt;它有几个特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;未指定 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default_subspec&lt;/code&gt; 的情况下，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spec&lt;/code&gt; 的全部子模块都将作为依赖被引入；&lt;/li&gt;
  &lt;li&gt;子模块会主动继承其父节点 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spec&lt;/code&gt; 中定义的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attributes_hash&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;子模块可以指定自己的源代码、资源文件、编译配置、依赖等；&lt;/li&gt;
  &lt;li&gt;同一 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spec&lt;/code&gt; 内部的子模块是可以有依赖关系的；&lt;/li&gt;
  &lt;li&gt;每个子模块在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod push&lt;/code&gt; 的时候是需要被 lint 通过的；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;光听总结似乎还是云里雾里，祭出 QMUI 让大家感受一下：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Pod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;QMUIKit&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;4.2.1&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subspec&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'QMUICore'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'QMUIKit/QMUIKit.h'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'QMUIKit/QMUICore'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'QMUIKit/UIKitExtensions'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'QMUIKit/QMUIWeakObjectContainer'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'QMUIKit/QMUILog'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subspec&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'QMUIWeakObjectContainer'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'QMUIKit/QMUIComponents/QMUIWeakObjectContainer.{h,m}'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subspec&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'QMUILog'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'QMUIKit/QMUIComponents/QMUILog/*.{h,m}'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subspec&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'QMUIComponents'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'QMUIKit/QMUICore'&lt;/span&gt;
     
    &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subspec&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'QMUIButton'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'QMUIKit/QMUIComponents/QMUIButton/QMUIButton.{h,m}'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 此处省略 59 个 Components&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;不吹不黑，QMUI 是笔者见过国内开源作品中代码注释非常详尽且提供完整 Demo 的项目之一。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;整个 QMUIKit 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spec&lt;/code&gt; 文件中，总共定义了 &lt;strong&gt;64&lt;/strong&gt; 个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subspec&lt;/code&gt; 子模块，同时这些子模块之间还做了分层。比如 QMUICore：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1602123383555-32462e33-aaf5-4004-899f-cfd384e1e04e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另外补充一点，CocoaPods 支持了不同类型的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubSpec&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# lib/cocoapods-core/specification/dsl/attribute_support.rb&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;SUPPORTED_SPEC_TYPES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:app&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:test&lt;/code&gt; 用于在项目中集成单元测试代码的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subspec&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;podspec-from-json&quot;&gt;Podspec From JSON&lt;/h2&gt;

&lt;p&gt;有了上文 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 的了解，这次我们对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt; 的文件加载会更加轻车熟路。首先是由 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#from_file&lt;/code&gt; 方法进行文件路径和内容编码格式的检查，将加载的内容转入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#from_string&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subspec_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exist?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Informative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;No Podspec exists at path `&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`.&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'r:utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Work around for Rubinius incomplete encoding in 1.9 mode&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UTF-8'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'UTF-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;from_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subspec_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subspec_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expand_path&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extname&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.podspec'&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;directory?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Pod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;_eval_Podspec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Informative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Invalid Podspec file at path `&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`.&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.json'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Informative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Unsupported specification format `&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extname&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;` for spec at `&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`.&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defined_in_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subspec_by_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subspec_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接着根据文件类型为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.podspec&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.json&lt;/code&gt; 分别采用不同的解析方式。在  &lt;strong&gt;JSONSupport&lt;/strong&gt; 模块内将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#from_json&lt;/code&gt; 的逻辑拆成了两部分：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# `lib/cocoapods-core/specification/json.rb`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Pod&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Specification&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;JSONSupport&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ①&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'json'&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;from_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ②&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;test_specification: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;app_specification: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;attributes_hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dup&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:app_specification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subspecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'subspecs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;testspecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'testspecs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;appspecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'appspecs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;## backwards compatibility with 1.3.0&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test_specification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'test_type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
  
      &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attributes_hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes_hash&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subspecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subspecs_from_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subspecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subspecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subspecs_from_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testspecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subspecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subspecs_from_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appspecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  
      &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ③&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subspecs_from_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subspecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subspecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subspecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;ss&quot;&gt;:test_specification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;ss&quot;&gt;:app_specification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里的逻辑也是比较简单：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;① 将传入的字符串转换为 json；&lt;/li&gt;
  &lt;li&gt;② 将转换后的 json 转换为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spec&lt;/code&gt; 对象并将 json 转换为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attributes_hash&lt;/code&gt;，同时触发 ③；&lt;/li&gt;
  &lt;li&gt;③ 通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.subspecs_from_hash&lt;/code&gt; 实现递归调用完成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subspecs&lt;/code&gt; 解析；&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tips: 方法 ② 里的 &lt;strong&gt;Spec&lt;/strong&gt; 是对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Specification&lt;/code&gt; 的别名。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1602123399989-8bef8979-4f1d-4ab5-984a-95f57e384a91.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;podspec-from-ruby&quot;&gt;Podspec From Ruby&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QMUIKit.podspec&lt;/code&gt; 的文件内容，大家是否注意到其开头的声明：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Pod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;QMUIKit&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_files&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'QMUIKit/QMUIKit.h'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;发现没 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.podspec&lt;/code&gt; 文件就是&lt;strong&gt;简单直接地声明了一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Specifiction&lt;/code&gt; 对象&lt;/strong&gt;，然后通过 block 块定制来完成配置。像 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source_files&lt;/code&gt; 这些配置参数最终都会转换为方法调用并将值存入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attributes_hash&lt;/code&gt; 中。这些方法调用的实现方式分两种：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;大部分配置是通过方法包装器 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attribute&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root_attribute&lt;/code&gt; 来动态添加的 setter 方法；&lt;/li&gt;
  &lt;li&gt;对于复杂逻辑的配置则直接方法声明，如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subspec&lt;/code&gt; 、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dependency&lt;/code&gt; 方法等（后续介绍)。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;attribute-wrappter&quot;&gt;attribute wrappter&lt;/h3&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# `lib/cocoapods-core/specification/dsl.rb`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Pod&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Specification&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;DSL&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DSL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AttributeSupport&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Deprecations must be required after include AttributeSupport&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/specification/dsl/deprecations'&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;ss&quot;&gt;:required&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;ss&quot;&gt;:inherited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;ss&quot;&gt;:multi_platform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;root_attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;ss&quot;&gt;:required&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看出 name 和 version 的方法声明与普通的不太一样，其实 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attribute&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root_attribute&lt;/code&gt; 是通过 Ruby 的方法包装器来实现的，感兴趣的同学看这里 「&lt;a href=&quot;https://github.com/mxchenxiaodong/haha_day/issues/3#&quot;&gt;Python装饰器 与 Ruby实现&lt;/a&gt;」。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tips: Ruby 原生提供的属性访问器 — &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attr_accessor&lt;/code&gt; 大家应该不陌生，就是通过包装器实现的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这些&lt;strong&gt;装饰器所声明的方法会在其模块被加载时动态生成&lt;/strong&gt;，来看其实现：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# `lib/cocoapods-core/specification/attribute_support.rb`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Pod&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Specification&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;DSL&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:attributes&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AttributeSupport&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;root_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:root_only&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:multi_platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;store_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;store_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;store_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attribute&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root_attribute&lt;/code&gt; 最终都走到了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store_attribute&lt;/code&gt; 保存在创建的 Attribute 对象内，并以配置的 Symbol 名称作为 KEY 存入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@attributes&lt;/code&gt;，用于生成最终的 attributes setter 方法。&lt;/p&gt;

&lt;p&gt;最关键的一步，让我们回到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;specification&lt;/code&gt; 文件：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# `/lib/coocapods-core/specification`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Pod&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Specification&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;store_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;platform_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert_keys_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strip_heredoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strip&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:strip_heredoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;platform_name&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;platform_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;platform_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;attributes_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;platform_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;attributes_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;platform_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;attributes_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;DSL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;writer_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;store_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;writer_singular_form&lt;/span&gt;
        &lt;span class=&quot;kp&quot;&gt;alias_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;writer_singular_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;writer_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Specification&lt;/code&gt; 类被加载时，会先遍历 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DSL&lt;/code&gt; module 加载后所保存的 attributes，再通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;define_method&lt;/code&gt; 动态生成对应的配置方法。最终数据还是保存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attributes_hash&lt;/code&gt; 中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1602123416825-7fdc4274-d87a-45d0-9d04-4eeeb063c81c.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;attribute&quot;&gt;Attribute&lt;/h3&gt;

&lt;p&gt;Attribute 是为了记录该配置的相关信息，例如，记录 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spec&lt;/code&gt; 是否为根节点、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spec&lt;/code&gt; 类型、所支持的 platforms、资源地址通配符等。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root_attribute&lt;/code&gt; 包装的配置仅用于修饰 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spec&lt;/code&gt; 根节点，比如版本号 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version&lt;/code&gt; 只能由 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spec&lt;/code&gt; 根节点来设置，另外还有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static_framework&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module_name&lt;/code&gt; 等；&lt;/li&gt;
  &lt;li&gt;以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attribute&lt;/code&gt; 包装的配置则不限是否为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spec&lt;/code&gt; 根结点。我们以 AFNetworking 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source_files&lt;/code&gt; 为例：由于在 macOS 和 watchOS 上并没有 UIKit framwork，因此它单独将 UIKit 的相关功能拆分到了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AFNetworking/UIKit&lt;/code&gt; 中；&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Pod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subspec&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'NSURLSession'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
	 &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subspec&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UIKit'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deployment_target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'9.0'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tvos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deployment_target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'9.0'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'AFNetworking/NSURLSession'&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UIKit+AFNetworking'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;subspec&quot;&gt;#subspec&lt;/h3&gt;

&lt;p&gt;除了 attribute 装饰器声明的 setter 方法，还有几个自定义的方法是直接通过 eval 调用的。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subspec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;subspec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@subspecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subspec&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;subspec&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Tests'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;subspec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@subspecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subspec&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;subspec&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;app_spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'App'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;appspec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:app_specification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@subspecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appspec&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;appspec&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这三种不同类型的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subspec&lt;/code&gt; 经 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt; 转换为对应的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Specification&lt;/code&gt; 对象，注意这里初始化后都将 parent 节点指向 &lt;strong&gt;self&lt;/strong&gt; 同时存入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@subspecs&lt;/code&gt; 数组中，完成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubSpec&lt;/code&gt; 依赖链的构造。&lt;/p&gt;

&lt;h3 id=&quot;dependency&quot;&gt;#dependency&lt;/h3&gt;

&lt;p&gt;对于其他 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod&lt;/code&gt; 依赖的添加我们通过 dependency 方法来实现：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version_requirements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# dependency args 有效性校验 ...&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;attributes_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dependencies'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attributes_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dependencies'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version_requirements&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whitelisted_configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# configuration 白名单过滤和校验 ...&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;attributes_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'configuration_pod_whitelist'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;attributes_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'configuration_pod_whitelist'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whitelisted_configurations&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;dependency 方法内部主要是对依赖有效性的校验，限于篇幅这里不列出实现，核心要点如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;检查依赖循环&lt;/strong&gt;，根据 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spec&lt;/code&gt; 名称判断 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spec&lt;/code&gt; 与自身，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spec&lt;/code&gt; 与&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubSpec&lt;/code&gt;之间是否存在循环依赖；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;检查依赖来源&lt;/strong&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt; 中不支持 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:git&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:path&lt;/code&gt; 形式的来源指定，如需设定可通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 来修改;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;检查 configuation 白名单&lt;/strong&gt;，目前仅支持 Xcode 默认的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Debug&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Release&lt;/code&gt; 的 configuration 配置；&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;创建并使用你的-pod&quot;&gt;创建并使用你的 Pod&lt;/h1&gt;

&lt;p&gt;最后一节来两个实践：创建 Pod 以及在项目中使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubSpecs&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;pod-创建&quot;&gt;Pod 创建&lt;/h2&gt;

&lt;p&gt;pod 相关使用官方都提供了很详尽的都文档，本小节仅做介绍。&lt;/p&gt;

&lt;h3 id=&quot;1-创建-pod&quot;&gt;1. 创建 Pod&lt;/h3&gt;

&lt;p&gt;仅需一行命令完成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 创建（&lt;a href=&quot;https://guides.cocoapods.org/making/using-pod-lib-create.html&quot;&gt;文档&lt;/a&gt;）：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pod lib create &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;NAME&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;之后每一步都会输出友好提示，按照提示选择即可。在添加完 source code 和 dependency 之后，你还可以在 CocoaPods 为你提供的 Example 项目中运行和调试代码。&lt;/p&gt;

&lt;p&gt;准备就绪后，可以通过以下命令进行校验，检查 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 正确性：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pod lib lint &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Podspec_PATHS ...]&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-发布-pod&quot;&gt;2. 发布 Pod&lt;/h3&gt;

&lt;p&gt;校验通过后就可以将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 发布了，你可以将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PodSepc&lt;/code&gt; 发布到  Master Repo 上，或者发布到内部的 Spec Repo 上。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CocoaPods Master Repo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果发布的 CocoaPods 的主仓库，那么需要通过 CocoaPods 提供的 &lt;strong&gt;Trunk&lt;/strong&gt; 命令：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pod trunk push &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;NAME.podspec]&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不过使用前需要先通过邮箱注册，详情查看&lt;a href=&quot;https://guides.cocoapods.org/making/getting-setup-with-trunk.html&quot;&gt;文档&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Private Spec Repo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于发布到私有仓库的，可通过 CocoaPods 提供的 &lt;strong&gt;Repo&lt;/strong&gt; 命令：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pod repo push &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;REPO_NAME&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;SPEC_NAME.podspec&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;文档详情 — &lt;a href=&quot;https://guides.cocoapods.org/making/private-cocoapods.html&quot;&gt;传送门&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;subspecs-in-podfile&quot;&gt;SubSpecs In Podfile&lt;/h2&gt;

&lt;p&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubSpec&lt;/code&gt; 一节提到过，在 CocoaPods 中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubSpec&lt;/code&gt; 是被作为单独的依赖来看待的，这里就借这个实操来证明一下。&lt;/p&gt;

&lt;p&gt;在上文的实践中，我们知道每一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 库对应为 Xcode 项目中的一个个 target，那么当明确指定部分 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubSpec&lt;/code&gt; 时，它们也将被作为独立的 target 进行编译。不过这里需要明确一下使用场景：&lt;/p&gt;

&lt;h3 id=&quot;1-single-target&quot;&gt;1. Single Target&lt;/h3&gt;

&lt;p&gt;当主项目中仅有一个 target 或多个 target 引用了同一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod&lt;/code&gt; 库的多个不同 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubSpec&lt;/code&gt; 时，生成的 target 只会有一个。我们以 QMUIKit 为例，项目 Demo.project 下的 Podfile 配置如下：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Demo'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'QMUIKit/QMUIComponents/QMUILabel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../QMUI_iOS'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'QMUIKit/QMUIComponents/QMUIButton'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../QMUI_iOS'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1602123432109-ac15c4c8-89fd-4547-bbd0-704681fa8d77.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods.project&lt;/code&gt; 下的 QMUIKit 的 target 名称为 &lt;strong&gt;QMUIKit&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;2-multiple-target&quot;&gt;2. Multiple Target&lt;/h3&gt;

&lt;p&gt;如果我们的主项目中存在多个 target 且使用同一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod&lt;/code&gt; 库的不同 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubSpec&lt;/code&gt; 时，结果则有所不同。&lt;/p&gt;

&lt;p&gt;现在我们在步骤 1 的基础上添加如下配置：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Demo2'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'QMUIKit/QMUIComponents/QMUILog'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../QMUI_iOS'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1602123439862-d2a9f0e9-7177-4714-8914-364c5c77e18a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以发现，CocoaPods 为每个 tareget 对应的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubSpec&lt;/code&gt; 依赖生成了不同的 QMUIKit targets。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tips: 当主工程 target 依赖的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subspec&lt;/code&gt; 数量过多导致的名称超过 50 个字符，将会对 subspec 后缀做摘要处理作为唯一标识符。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;本文是 CocoaPods-Core 的第二篇，重点介绍了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt; 的类构成和解析实现，总结如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;初探 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt; 让我们对其能力边界和配置分类有了更好的了解；&lt;/li&gt;
  &lt;li&gt;深入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt; 我们发现其数据结构同 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 类似，都是根据依赖关系建立对应的树结构；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt; 针对单个库的源码和资源提供了更精细化的管理，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubSpec&lt;/code&gt; 结构的推出让大型 library 的内部分层提供了很好的工具；&lt;/li&gt;
  &lt;li&gt;装饰器模式结合 Ruby 的动态特性，让 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt; 的 DSL 特性的实现起来更加优雅；&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;知识点问题梳理&quot;&gt;知识点问题梳理&lt;/h1&gt;

&lt;p&gt;这里罗列了四个问题用来考察你是否已经掌握了这篇文章，如果没有建议你加入**收藏 **再次阅读：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;说说 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt; 所支持的配置有几类，分别具有哪些功能 ？&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt; 与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubSpec&lt;/code&gt; 之间有哪些关系 ？&lt;/li&gt;
  &lt;li&gt;说说 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubSpec&lt;/code&gt; 的特点以及作用 ？&lt;/li&gt;
  &lt;li&gt;谈谈 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt; 中的 DSL 解析与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 的解析实现有哪些区别 ？&lt;/li&gt;
&lt;/ol&gt;</content><author><name>冬瓜</name><email>gua@desgard.com</email></author><category term="CocoaPods 历险记" /><category term="Ruby" /><summary type="html">引子 在上文 Podfile 解析逻辑 中（建议先阅读这篇文章），我们以 Xcode 工程结构作为切入点介绍了 Podfile 背后对应的数据结构，剖析了 Podfile 文件是如何解析与加载，并最终 “入侵” 项目影响其工程结构的。今天我们来聊一聊 CocoaPods-Core 中的另一个重要文件 — Podspec 以及它所撑起的 CocoaPods 世界。 一个 Pod 的创建和发布离不开 .podspec 文件，它可以很简单也能复杂，如 QMUIKit（后续介绍)。 今天我们就直奔主题，来分析 Podspec 文件。 Podspec Podspec 是用于 描述一个 Pod 库的源代码和资源将如何被打包编译成链接库或 framework 的文件 ，而 Podspec 中的这些描述内容最终将映会映射到 Specification 类中（以下简称 Spec）。 现在让我们来重新认识 Podspec。 Podspec 初探 Podspec 支持的文件格式为 .podspec 和 .json 两种，而 .podspec 本质是 Ruby 文件。 问题来了，为什么是 JSON 格式而不像 Podfile 一样支持 YAML 呢？ 笔者的理解：由于 Podspec 文件会满世界跑，它可能存在于 CocoaPods 的 CDN Service、Speces Repo 或者你们的私有 Specs Repo 上，因此采用  JSON 的文件在网络传输中会更友好。而 Podfile 更多的场景是用于序列化，它需要在项目中生成一份经依赖仲裁后的 Podfile 快照，用于后续的对比。 Podspec Pod::Spec.new do |spec| spec.name = 'Reachability' spec.version = '3.1.0' spec.license = { :type =&amp;gt; 'BSD' } spec.homepage = 'https://github.com/tonymillion/Reachability' spec.authors = { 'Tony Million' =&amp;gt; 'tonymillion@gmail.com' } spec.summary = 'ARC and GCD Compatible Reachability Class for iOS and OS X.' spec.source = { :git =&amp;gt; 'https://github.com/tonymillion/Reachability.git', :tag =&amp;gt; &quot;v#{spec.version}&quot; } spec.source_files = 'Reachability.{h,m}' spec.framework = 'SystemConfiguration' end 上面这份 Reachability.podspec 配置，基本通过命令行 pod lib create NAME 就能帮我们完成。除此之外我们能做的更多，比如，默认情况下 CococaPods 会为每个 Pod framework 生成一个对应的 modulemap 文件，它将包含 Podspec 中指定的公共 headers。如果需要自定义引入的 header 文件，仅需配置 moduel_map 即可完成。 下面是进阶版配置： Pod::Spec.new do |spec| spec.name = 'Reachability' # 省略与前面相同部分的配置 ... spec.module_name = 'Rich' spec.swift_version = '4.0' spec.ios.deployment_target = '9.0' spec.osx.deployment_target = '10.10' spec.source_files = 'Reachability/common/*.swift' spec.ios.source_files = 'Reachability/ios/*.swift', 'Reachability/extensions/*.swift' spec.osx.source_files = 'Reachability/osx/*.swift' spec.framework = 'SystemConfiguration' spec.ios.framework = 'UIKit' spec.osx.framework = 'AppKit' spec.dependency 'SomeOtherPod' end 像 👆 我们为不同的系统指定了不同的源码和依赖等，当然可配置的不只这些。 Podspec 支持的完整配置分类如下： 想了解更多的配置选项：传送门。 Convention Over Configuration 说到配置，不得不提一下 CoC 约定大于配置。约定大于配置算是在软件工程较早出现的概念的了，大意是：为了简单起见，我们的代码需要按照一定的约定来编写（如代码放在什么目录，用什么文件名，用什么类名等)。 这样既简化了配置文件，同时也降低了学习成本。 约定大于配置可以说是通过 Ruby on Rails 发扬光大的。尽管它一直饱受争议，但是主流语言的依赖管理工具，如 Maven、npm 等都遵循 CoC 进行不断演进的，因为 CoC 能够有效帮助开发者减轻选择的痛感，减少无意义的选择。一些新的语言也吸收了这个思想，比如 Go 语言。如果用 C/C++ 可能需要定义复杂的 Makefile 来定义编译的规则，以及如何运行测试用例，而在 Go 中这些都是约定好的。 举个 🌰 ：Podfile 中是可以指定 pod library 所链接的 Xcode project，不过大多情况下无需配置，CocoaPods 会自动查找 Podfile 所在的同级目录下所对应的工程文件 .project 。 Spec 的核心数据结构 Specification 在数据结构上 Specification 与 TargetDefinition 是类似的，同为多叉树结构。简化后的 Spec 的类如下： require 'active_support/core_ext/string/strip.rb' # 记录对应 platform 上 Spec 的其他 pod 依赖 require 'cocoapods-core/specification/consumer' # 解析 DSL require 'cocoapods-core/specification/dsl' # 校验 Spec 的正确性，并抛出对应的错误和警告 require 'cocoapods-core/specification/linter' # 用于解析 DSL 内容包含的配置信息 require 'cocoapods-core/specification/root_attribute_accessors' # 记录一个 Pod 所有依赖的 Spec 来源信息 require 'cocoapods-core/specification/set' # json 格式数据解析 require 'cocoapods-core/specification/json' module Pod class Specification include Pod::Specification::DSL include Pod::Specification::DSL::Deprecations include Pod::Specification::RootAttributesAccessors include Pod::Specification::JSONSupport # `subspec` 的父节点 attr_reader :parent # `Spec` 的唯一 id，由 name + version 的 hash 构成 attr_reader :hash_value # 记录 `Spec` 的配置信息 attr_accessor :attributes_hash # `Spec` 包含的 `subspec` attr_accessor :subspecs # 递归调用获取 Specification 的根节点 def root parent ? parent.root : self end def hash if @hash_value.nil? @hash_value = (name.hash * 53) ^ version.hash end @hash_value end # ... end end Specification 同样用 map attributes_hash 来记录配置信息。 注意，这里的 parent 是为 subspec 保留的，用于指向其父节点的 Spec。 Subspecs 乍一听 Subspec 这个概念似乎有一些抽象，不过当你理解了上面的描述，就能明白什么是 Subspec 了。我们知道在 Xcode 项目中，target 作为最小的可编译单元，它编译后的产物为链接库或 framework。而在 CocoaPods 的世界里这些 targets 则是由 Spec 文件来描述的，它还能拆分成一个或者多个 Subspec，我们暂且把它称为 Spec 的 子模块，子模块也是用 Specification 类来描述的。 子模块可以单独作为依赖被引入到项目中。它有几个特点： 未指定 default_subspec 的情况下，Spec 的全部子模块都将作为依赖被引入； 子模块会主动继承其父节点 Spec 中定义的 attributes_hash； 子模块可以指定自己的源代码、资源文件、编译配置、依赖等； 同一 Spec 内部的子模块是可以有依赖关系的； 每个子模块在 pod push 的时候是需要被 lint 通过的； 光听总结似乎还是云里雾里，祭出 QMUI 让大家感受一下： Pod::Spec.new do |s| s.name = &quot;QMUIKit&quot; s.version = &quot;4.2.1&quot; # ... s.subspec 'QMUICore' do |ss| ss.source_files = 'QMUIKit/QMUIKit.h', 'QMUIKit/QMUICore', 'QMUIKit/UIKitExtensions' ss.dependency 'QMUIKit/QMUIWeakObjectContainer' ss.dependency 'QMUIKit/QMUILog' end s.subspec 'QMUIWeakObjectContainer' do |ss| ss.source_files = 'QMUIKit/QMUIComponents/QMUIWeakObjectContainer.{h,m}' end s.subspec 'QMUILog' do |ss| ss.source_files = 'QMUIKit/QMUIComponents/QMUILog/*.{h,m}' end s.subspec 'QMUIComponents' do |ss| ss.dependency 'QMUIKit/QMUICore' ss.subspec 'QMUIButton' do |sss| sss.source_files = 'QMUIKit/QMUIComponents/QMUIButton/QMUIButton.{h,m}' end # 此处省略 59 个 Components end # ... end 不吹不黑，QMUI 是笔者见过国内开源作品中代码注释非常详尽且提供完整 Demo 的项目之一。 整个 QMUIKit 的 Spec 文件中，总共定义了 64 个 subspec 子模块，同时这些子模块之间还做了分层。比如 QMUICore： 另外补充一点，CocoaPods 支持了不同类型的 SubSpec： # lib/cocoapods-core/specification/dsl/attribute_support.rb SUPPORTED_SPEC_TYPES = [:library, :app, :test].freeze :app 和 :test 用于在项目中集成单元测试代码的 Subspec。 Podspec From JSON 有了上文 Podfile 的了解，这次我们对 Podspec 的文件加载会更加轻车熟路。首先是由 #from_file 方法进行文件路径和内容编码格式的检查，将加载的内容转入 #from_string： def self.from_file(path, subspec_name = nil) path = Pathname.new(path) unless path.exist? raise Informative, &quot;No Podspec exists at path `#{path}`.&quot; end string = File.open(path, 'r:utf-8', &amp;amp;:read) # Work around for Rubinius incomplete encoding in 1.9 mode if string.respond_to?(:encoding) &amp;amp;&amp;amp; string.encoding.name != 'UTF-8' string.encode!('UTF-8') end from_string(string, path, subspec_name) end def self.from_string(spec_contents, path, subspec_name = nil) path = Pathname.new(path).expand_path spec = nil case path.extname when '.podspec' Dir.chdir(path.parent.directory? ? path.parent : Dir.pwd) do spec = ::Pod._eval_Podspec(spec_contents, path) unless spec.is_a?(Specification) raise Informative, &quot;Invalid Podspec file at path `#{path}`.&quot; end end when '.json' spec = Specification.from_json(spec_contents) else raise Informative, &quot;Unsupported specification format `#{path.extname}` for spec at `#{path}`.&quot; end spec.defined_in_file = path spec.subspec_by_name(subspec_name, true) end 接着根据文件类型为 .podspec 和 .json 分别采用不同的解析方式。在  JSONSupport 模块内将 #from_json 的逻辑拆成了两部分： # `lib/cocoapods-core/specification/json.rb` module Pod class Specification module JSONSupport # ① def self.from_json(json) require 'json' hash = JSON.parse(json) from_hash(hash) end # ② def self.from_hash(hash, parent = nil, test_specification: false, app_specification: false) attributes_hash = hash.dup spec = Spec.new(parent, nil, test_specification, :app_specification =&amp;gt; app_specification) subspecs = attributes_hash.delete('subspecs') testspecs = attributes_hash.delete('testspecs') appspecs = attributes_hash.delete('appspecs') ## backwards compatibility with 1.3.0 spec.test_specification = !attributes_hash['test_type'].nil? spec.attributes_hash = attributes_hash spec.subspecs.concat(subspecs_from_hash(spec, subspecs, false, false)) spec.subspecs.concat(subspecs_from_hash(spec, testspecs, true, false)) spec.subspecs.concat(subspecs_from_hash(spec, appspecs, false, true)) spec end # ③ def self.subspecs_from_hash(spec, subspecs, test_specification, app_specification) return [] if subspecs.nil? subspecs.map do |s_hash| Specification.from_hash(s_hash, spec, :test_specification =&amp;gt; test_specification, :app_specification =&amp;gt; app_specification) end end end end 这里的逻辑也是比较简单： ① 将传入的字符串转换为 json； ② 将转换后的 json 转换为 Spec 对象并将 json 转换为 attributes_hash，同时触发 ③； ③ 通过 self.subspecs_from_hash 实现递归调用完成 subspecs 解析； Tips: 方法 ② 里的 Spec 是对 Specification 的别名。 Podspec From Ruby QMUIKit.podspec 的文件内容，大家是否注意到其开头的声明： Pod::Spec.new do |s| s.name = &quot;QMUIKit&quot; s.source_files = 'QMUIKit/QMUIKit.h' # ... end 发现没 .podspec 文件就是简单直接地声明了一个 Specifiction 对象，然后通过 block 块定制来完成配置。像 name、source_files 这些配置参数最终都会转换为方法调用并将值存入 attributes_hash 中。这些方法调用的实现方式分两种： 大部分配置是通过方法包装器 attribute 和 root_attribute 来动态添加的 setter 方法； 对于复杂逻辑的配置则直接方法声明，如 subspec 、dependency 方法等（后续介绍)。 attribute wrappter # `lib/cocoapods-core/specification/dsl.rb` module Pod class Specification module DSL extend Pod::Specification::DSL::AttributeSupport # Deprecations must be required after include AttributeSupport require 'cocoapods-core/specification/dsl/deprecations' attribute :name, :required =&amp;gt; true, :inherited =&amp;gt; false, :multi_platform =&amp;gt; false root_attribute :version, :required =&amp;gt; true # ... end end end 可以看出 name 和 version 的方法声明与普通的不太一样，其实 attribute 和 root_attribute 是通过 Ruby 的方法包装器来实现的，感兴趣的同学看这里 「Python装饰器 与 Ruby实现」。 Tips: Ruby 原生提供的属性访问器 — attr_accessor 大家应该不陌生，就是通过包装器实现的。 这些装饰器所声明的方法会在其模块被加载时动态生成，来看其实现： # `lib/cocoapods-core/specification/attribute_support.rb` module Pod class Specification module DSL class &amp;lt;&amp;lt; self attr_reader :attributes end module AttributeSupport def root_attribute(name, options = {}) options[:root_only] = true options[:multi_platform] = false store_attribute(name, options) end def attribute(name, options = {}) store_attribute(name, options) end def store_attribute(name, options) attr = Attribute.new(name, options) @attributes ||= {} @attributes[name] = attr end end end end end attribute 和 root_attribute 最终都走到了 store_attribute 保存在创建的 Attribute 对象内，并以配置的 Symbol 名称作为 KEY 存入 @attributes，用于生成最终的 attributes setter 方法。 最关键的一步，让我们回到 specification 文件： # `/lib/coocapods-core/specification` module Pod class Specification # ... def store_attribute(name, value, platform_name = nil) name = name.to_s value = Specification.convert_keys_to_string(value) if value.is_a?(Hash) value = value.strip_heredoc.strip if value.respond_to?(:strip_heredoc) if platform_name platform_name = platform_name.to_s attributes_hash[platform_name] ||= {} attributes_hash[platform_name][name] = value else attributes_hash[name] = value end end DSL.attributes.values.each do |a| define_method(a.writer_name) do |value| store_attribute(a.name, value) end if a.writer_singular_form alias_method(a.writer_singular_form, a.writer_name) end end end end Specification 类被加载时，会先遍历 DSL module 加载后所保存的 attributes，再通过 define_method 动态生成对应的配置方法。最终数据还是保存在 attributes_hash 中。 Attribute Attribute 是为了记录该配置的相关信息，例如，记录 Spec 是否为根节点、Spec 类型、所支持的 platforms、资源地址通配符等。 以 root_attribute 包装的配置仅用于修饰 Spec 根节点，比如版本号 version 只能由 Spec 根节点来设置，另外还有 source、static_framework、module_name 等； 以 attribute 包装的配置则不限是否为 Spec 根结点。我们以 AFNetworking 的 source_files 为例：由于在 macOS 和 watchOS 上并没有 UIKit framwork，因此它单独将 UIKit 的相关功能拆分到了 AFNetworking/UIKit 中； Pod::Spec.new do |s| # ... s.subspec 'NSURLSession' do |ss| # ... end s.subspec 'UIKit' do |ss| ss.ios.deployment_target = '9.0' ss.tvos.deployment_target = '9.0' ss.dependency 'AFNetworking/NSURLSession' ss.source_files = 'UIKit+AFNetworking' end end #subspec 除了 attribute 装饰器声明的 setter 方法，还有几个自定义的方法是直接通过 eval 调用的。 def subspec(name, &amp;amp;block) subspec = Specification.new(self, name, &amp;amp;block) @subspecs &amp;lt;&amp;lt; subspec subspec end def test_spec(name = 'Tests', &amp;amp;block) subspec = Specification.new(self, name, true, &amp;amp;block) @subspecs &amp;lt;&amp;lt; subspec subspec end def app_spec(name = 'App', &amp;amp;block) appspec = Specification.new(self, name, :app_specification =&amp;gt; true, &amp;amp;block) @subspecs &amp;lt;&amp;lt; appspec appspec end 这三种不同类型的 Subspec 经 eval 转换为对应的 Specification 对象，注意这里初始化后都将 parent 节点指向 self 同时存入 @subspecs 数组中，完成 SubSpec 依赖链的构造。 #dependency 对于其他 pod 依赖的添加我们通过 dependency 方法来实现： def dependency(*args) name, *version_requirements = args # dependency args 有效性校验 ... attributes_hash['dependencies'] ||= {} attributes_hash['dependencies'][name] = version_requirements unless whitelisted_configurations.nil? # configuration 白名单过滤和校验 ... attributes_hash['configuration_pod_whitelist'] ||= {} attributes_hash['configuration_pod_whitelist'][name] = whitelisted_configurations end end dependency 方法内部主要是对依赖有效性的校验，限于篇幅这里不列出实现，核心要点如下： 检查依赖循环，根据 Spec 名称判断 Spec 与自身，Spec 与SubSpec之间是否存在循环依赖； 检查依赖来源，Podspec 中不支持 :git 或 :path 形式的来源指定，如需设定可通过 Podfile 来修改; 检查 configuation 白名单，目前仅支持 Xcode 默认的 Debug 和 Release 的 configuration 配置； 创建并使用你的 Pod 最后一节来两个实践：创建 Pod 以及在项目中使用 SubSpecs。 Pod 创建 pod 相关使用官方都提供了很详尽的都文档，本小节仅做介绍。 1. 创建 Pod 仅需一行命令完成 Pod 创建（文档）： $ pod lib create `NAME` 之后每一步都会输出友好提示，按照提示选择即可。在添加完 source code 和 dependency 之后，你还可以在 CocoaPods 为你提供的 Example 项目中运行和调试代码。 准备就绪后，可以通过以下命令进行校验，检查 Pod 正确性： $ pod lib lint `[Podspec_PATHS ...]` 2. 发布 Pod 校验通过后就可以将 Pod 发布了，你可以将 PodSepc 发布到  Master Repo 上，或者发布到内部的 Spec Repo 上。 CocoaPods Master Repo 如果发布的 CocoaPods 的主仓库，那么需要通过 CocoaPods 提供的 Trunk 命令： $ pod trunk push `[NAME.podspec]` 不过使用前需要先通过邮箱注册，详情查看文档。 Private Spec Repo 对于发布到私有仓库的，可通过 CocoaPods 提供的 Repo 命令： $ pod repo push `REPO_NAME` `SPEC_NAME.podspec` 文档详情 — 传送门。 SubSpecs In Podfile 在 SubSpec 一节提到过，在 CocoaPods 中 SubSpec 是被作为单独的依赖来看待的，这里就借这个实操来证明一下。 在上文的实践中，我们知道每一个 Pod 库对应为 Xcode 项目中的一个个 target，那么当明确指定部分 SubSpec 时，它们也将被作为独立的 target 进行编译。不过这里需要明确一下使用场景： 1. Single Target 当主项目中仅有一个 target 或多个 target 引用了同一个 pod 库的多个不同 SubSpec 时，生成的 target 只会有一个。我们以 QMUIKit 为例，项目 Demo.project 下的 Podfile 配置如下： target 'Demo' do pod 'QMUIKit/QMUIComponents/QMUILabel', :path =&amp;gt; '../QMUI_iOS' pod 'QMUIKit/QMUIComponents/QMUIButton', :path =&amp;gt; '../QMUI_iOS' end 此时 Pods.project 下的 QMUIKit 的 target 名称为 QMUIKit。 2. Multiple Target 如果我们的主项目中存在多个 target 且使用同一个 pod 库的不同 SubSpec 时，结果则有所不同。 现在我们在步骤 1 的基础上添加如下配置： target 'Demo2' do pod 'QMUIKit/QMUIComponents/QMUILog', :path =&amp;gt; '../QMUI_iOS' end 可以发现，CocoaPods 为每个 tareget 对应的 SubSpec 依赖生成了不同的 QMUIKit targets。 Tips: 当主工程 target 依赖的 Subspec 数量过多导致的名称超过 50 个字符，将会对 subspec 后缀做摘要处理作为唯一标识符。 总结 本文是 CocoaPods-Core 的第二篇，重点介绍了 Podspec 的类构成和解析实现，总结如下： 初探 Podspec 让我们对其能力边界和配置分类有了更好的了解； 深入 Podspec 我们发现其数据结构同 Podfile 类似，都是根据依赖关系建立对应的树结构； Podspec 针对单个库的源码和资源提供了更精细化的管理，SubSpec 结构的推出让大型 library 的内部分层提供了很好的工具； 装饰器模式结合 Ruby 的动态特性，让 Podspec 的 DSL 特性的实现起来更加优雅； 知识点问题梳理 这里罗列了四个问题用来考察你是否已经掌握了这篇文章，如果没有建议你加入**收藏 **再次阅读： 说说 Podspec 所支持的配置有几类，分别具有哪些功能 ？ Podspec 与 SubSpec 之间有哪些关系 ？ 说说 SubSpec 的特点以及作用 ？ 谈谈 Podspec 中的 DSL 解析与 Podfile 的解析实现有哪些区别 ？</summary></entry><entry><title type="html">Ruby 黑魔法 - eval 和 alias</title><link href="https://www.desgard.com/2020/10/08/cocoapods-story-ex-2.html" rel="alternate" type="text/html" title="Ruby 黑魔法 - eval 和 alias" /><published>2020-10-08T00:00:00-08:00</published><updated>2020-10-08T00:00:00-08:00</updated><id>https://www.desgard.com/2020/10/08/cocoapods-story-ex-2</id><content type="html" xml:base="https://www.desgard.com/2020/10/08/cocoapods-story-ex-2.html">&lt;p&gt;CocoaPods 是使用 Ruby 这门脚本语言实现的工具。Ruby 有很多优质的特性被 CocoaPods 所利用，为了在后续的源码阅读中不会被这些用法阻塞，所以在这个系列中，会给出一些 CocoaPods 的番外篇，来介绍 Ruby 及其当中的一些语言思想。&lt;/p&gt;

&lt;p&gt;今天这一篇我们来聊聊 Ruby 中的一些十分“动态”的特性：&lt;strong&gt;eval 特性和 alias 特性&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&quot;说说-eval-特性&quot;&gt;说说 Eval 特性&lt;/h1&gt;

&lt;h2 id=&quot;源自-lisp-的-evaluation&quot;&gt;源自 Lisp 的 Evaluation&lt;/h2&gt;

&lt;p&gt;在一些语言中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt; 方法是&lt;strong&gt;将一个字符串当作表达式执行而返回一个结果的方法&lt;/strong&gt;；在另外一些中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt; 它所传入的不一定是字符串，还有可能是抽象句法形势，Lisp 就是这种语言，并且 Lisp 也是首先提出使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt; 方法的语言，并提出了 Evaluation 这个特性。&lt;strong&gt;这也使得 Lisp 这门语言可以实现脱离编译这套体系而动态执行的结果&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia20201009091350.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lisp 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt; 方法预期是：&lt;strong&gt;将表达式作为参数传入到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt; 方法，并声明给定形式的返回值，运行时动态计算&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;下面是一个 Lisp Evaluation 代码的例子（ &lt;a href=&quot;https://zh.wikipedia.org/wiki/Scheme&quot;&gt;Scheme&lt;/a&gt; 方言 RRS 及以后版本）：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;将&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;设置为表达式&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'(+ 1 2 3))
 
; 执行 f1 (+ 1 2 3) 这个表达式，并返回 6
(eval f1 user-initial-environment)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可能你会觉得：&lt;strong&gt;这只是一个简单的特性，为什么会称作黑魔法特性？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因为 Evaluation 这种可 eval 特性是很多思想、落地工具的基础。为什么这么说，下面来说几个很常见的场景。&lt;/p&gt;

&lt;h2 id=&quot;repl-的核心思想&quot;&gt;REPL 的核心思想&lt;/h2&gt;

&lt;p&gt;如果你是 iOSer，你一定还会记得当年 Swift 刚刚诞生的时候，有一个主打的功能就是 &lt;strong&gt;REPL 交互式开发环境&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1601284781928-6b274959-8352-4ad8-a71b-c7f7e5f9cba9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，作为动态性十分强大的 Lisp 和 Ruby 也有对应的 REPL 工具。例如 Ruby 的 irb 和 pry 都是十分强大的 REPL。为什么这里要提及 REPL 呢？&lt;strong&gt;因为在这个名字中，E 就是 eval 的意思。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;REPL 对应的英文是 &lt;strong&gt;Read-Eval-Print Loop&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1602156287860-47a6a0d4-e12b-40bd-8a02-7f18a56acf4e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Read 读入一个来自于用户的表达式，将其放入内存；&lt;/li&gt;
  &lt;li&gt;Eval 求值函数，负责处理内部的数据结构并对上下文逻辑求值；&lt;/li&gt;
  &lt;li&gt;Print 输出方法，将结果呈现给用户，完成交互。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REPL 的模型让大家对于语言的学习和调试也有着增速作用，因为“Read - Eval - Print” 这种循环要比 “Code - Compile - Run - Debug” 这种循环更加敏捷。&lt;/p&gt;

&lt;p&gt;在 Lisp 的思想中，为了实现一个 Lisp REPL ，只需要实现这三个函数和一个轮循的函数即可。当然这里我们忽略掉复杂的求值函数，因为它就是一个解释器。&lt;/p&gt;

&lt;p&gt;有了这个思想，一个最简单的 REPL 就可以使用如下的形式表达：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Lisp 中&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Ruby 中&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;简单聊聊-hotpatch&quot;&gt;简单聊聊 HotPatch&lt;/h2&gt;

&lt;p&gt;大约在 2 年前，iOS 比较流行使用 JSPatch/RN 基于 JavaScriptCore 提供的 iOS 热修复和动态化方案。其核心的思路基本都是下发 JavaScript 脚本来调用 Objective-C，从而实现逻辑注入。&lt;/p&gt;

&lt;p&gt;JSPatch 尤其被大家所知，需要编写大量的 JavaScript 代码来调用 Objective-C 方法，当然官方也看到了这一效率的洼地，并制作了 JSPatch 的语法转化器来间接优化这一过程。&lt;/p&gt;

&lt;p&gt;但是无论如何优化，其实最大的根本问题是 Objective-C 这门语言不具备 Evaluation 的可 eval 特性，倘若拥有该特性，那其实就可以跨越使用 JavaScript 做桥接的诸多问题。&lt;/p&gt;

&lt;p&gt;我们都知道 Objective-C 的 Runtime 利用消息转发可以动态执行任何 Objective-C 方法，这也就给了我们一个启示。假如我们&lt;strong&gt;自制一个轻量级解释器，动态解释 Objective-C 代码，利用 Runtime 消息转发来动态执行 Objective-C 方法，就可以实现一个“准 eval 方法”&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1602158120322-b10b302a-4bde-4a4e-8324-4f5830e7c2fc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这种思路在 GitHub 上也已经有朋友开源出了 Demo - &lt;a href=&quot;https://github.com/lilidan/OCEval&quot;&gt;OCEval&lt;/a&gt;。不同于 Clang 的编译过程，他进行了精简：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;去除了 Preprocesser 的预编译环节，保留了 Lexer 词法分析和 Parser 语法分析，&lt;/li&gt;
  &lt;li&gt;利用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSMethodSignature&lt;/code&gt; 封装方法，结合递归下降，使用 Runtime 对方法进行消息转发。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;利用这种思路的还有另外一个 &lt;a href=&quot;https://github.com/SilverFruity/OCRunner&quot;&gt;OCRunner&lt;/a&gt; 项目。&lt;/p&gt;

&lt;p&gt;这些都是通过自制解释器，实现 eval 特性，进而配合 libffi 来实现。&lt;/p&gt;

&lt;h2 id=&quot;ruby-中的-eval-和-binding&quot;&gt;Ruby 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binding&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ruby 中的 eval 方法其实很好理解，就是将 Ruby 代码以字符串的形式作为参数传入，然后进行执行。&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;str + ' CocoaPods'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Hello CocoaPods&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面就是一个例子，我们发现传入的代码 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str + ' CocoaPods'&lt;/code&gt;  在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt; 方法中已经变成 Ruby 代码执行，并返回结果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'Hello CocoaPods'&lt;/code&gt;  字符串。&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;/2020/09/16/cocoapods-story-4.html&quot;&gt;「Podfile 的解析逻辑」&lt;/a&gt;中讲到， CocoaPods 中也使用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt; 方法，从而以 Ruby 脚本的形式，执行了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 文件中的逻辑。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_ruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ... &lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;podfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Podfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 执行 Podfile 中的逻辑&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Invalid `&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;` file: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DSLError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;podfile&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当然，在 CocoaPods 中仅仅是用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt; 方法的第一层，对于我们学习者来说肯定不能满足于此。&lt;/p&gt;

&lt;p&gt;在 Ruby 中， &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt; 有一个方法 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binding&lt;/code&gt; ，它会返回一个 Binding 类型的对象。这个 Binding 对象就是我们俗称的&lt;strong&gt;绑定&lt;/strong&gt;，它封装了当前执行上下文的所有绑定，包括变量、方法、Block 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt; 的名称绑定等，这些绑定直接决定了面向对象语言中的执行环境。&lt;/p&gt;

&lt;p&gt;那么这个 Binding 对象在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt; 方法中怎么使用呢？其实就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt; 方法的第二个参数。这个在 CocoaPods 中运行 Podfile 代码中并没有使用到。我们下面来做一个例子：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt; 
  &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Gua'&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;binding&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'p name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Gua&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这个例子中，我们的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt; 方法就是我们上面说的执行环境，在这个环境里定义了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; 这个变量，并在方法体最后返回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binding&lt;/code&gt; 方法调用结果。在下面使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt; 方法的时候，当作 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel#binding&lt;/code&gt; 入参传入，便可以成功输出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; 变量。&lt;/p&gt;

&lt;h2 id=&quot;toplevel_binding-全局常量&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TOPLEVEL_BINDING&lt;/code&gt; 全局常量&lt;/h2&gt;

&lt;p&gt;在 Ruby 中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; 对象是最顶级范围，Ruby 中的任何对象都至少需要在次作用域范围内被实例化。为了随时随地地访问 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; 对象的上下文，Ruby 提供了一个名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TOPLEVEL_BINDING&lt;/code&gt; 的全局常量，&lt;strong&gt;它指向一个封装了顶级绑定的对象&lt;/strong&gt;。
便于理解，举个例子：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;vi&quot;&gt;@a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Addition&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;TOPLEVEL_BINDING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@a += ' Gua'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Addition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TOPLEVEL_BINDING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receiver&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# main&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Hello Gua&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这段代码中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Binding#receiver&lt;/code&gt; 方法返回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel#binding&lt;/code&gt; 消息的接收者。为此，则保存了调用执行上下文 - 在我们的示例中，是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; 对象。&lt;/p&gt;

&lt;p&gt;然后我们在 Addition 类的实例中使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TOPLEVEL_BINDING&lt;/code&gt; 全局常量访问全局的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@a&lt;/code&gt; 变量。&lt;/p&gt;

&lt;h2 id=&quot;总说-ruby-eval-特性&quot;&gt;总说 Ruby Eval 特性&lt;/h2&gt;

&lt;p&gt;以上的简单介绍如果你曾经阅读过 SICP（Structture and Interpretation of Computer Programs）这一神书的第四章后，一定会有更加深刻的理解。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我们将所有的语句当作求值，用语言去描述过程，用与被求值的语言相同的语言写出的求值器被称作元循环；eval 在元循环中，参数是一个表达式和一个环境，这也与 Ruby 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt; 方法完全吻合。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;不得不说，Ruby 的很多思想，站在 SICP 的肩膀上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1602158921983-a4538257-84e2-48e8-bd24-6d6d3bbc9eb0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;类似于-method-swizzling-的-alias&quot;&gt;类似于 Method Swizzling 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alias&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;对于广大 iOSer 一定都十分了解被称作 Runtime 黑魔法的 Method Swizzling。这其实是动态语言大都具有都特性。&lt;/p&gt;

&lt;p&gt;在 iOS 中，使用 Selector 和 Implementation（即 IMP）的指向交换，从而实现了方法的替换。这种替换是发生在运行时的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1602159208203-64baa017-a1e9-4383-9b78-d79f675bce67.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 Ruby 中，也有类似的方法。为了全面的了解 Ruby 中的 “Method Swizzling”，我们需要了解这几个关于元编程思想的概念：&lt;strong&gt;Open Class 特性与环绕别名。&lt;/strong&gt;这两个特性也是实现 CocoaPods 插件化的核心依赖。&lt;/p&gt;

&lt;h2 id=&quot;open-class-与特异方法&quot;&gt;Open Class 与特异方法&lt;/h2&gt;

&lt;p&gt;Open Class 特性就是在一个类已经完成定义之后，再次向其中添加方法。在 Ruby 中的实现方法就是&lt;strong&gt;定义同名类&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;在 Ruby 中不会像 Objective-C 和 Swift 一样被认为是编译错误，后者需要使用 Category 和 Extension 特殊的关键字语法来约定是扩展。&lt;strong&gt;而是把同名类中的定义方法全部附加到已定义的旧类中，不重名的增加，重名的覆盖&lt;/strong&gt;。以下为示例代码：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m1&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m2&lt;/span&gt; 
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m2&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# m1&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# m2&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m1 new&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# m1 new&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# m2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;特异方法&lt;/strong&gt;和 Open Class 有点类似，不过&lt;strong&gt;附加的方法不是附加到类中，而是附加到特定到实例中&lt;/strong&gt;。被附加到方法仅仅在目标实例中存在，不会影响该类到其他实例。示例代码：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m1&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;foo1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;foo1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m2&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;foo1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# m1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# m2&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;foo2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# m1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# foo2.m2 undefined method `m2' for #&amp;lt;Foo:0x00007f88bb08e238&amp;gt; (NoMethodError)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;环绕别名around-aliases&quot;&gt;环绕别名（Around Aliases）&lt;/h2&gt;

&lt;p&gt;其实环绕别名只是一种特殊的写法，这里使用了 Ruby 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alias&lt;/code&gt; 关键字以及上文提到的 Open Class 的特性。&lt;/p&gt;

&lt;p&gt;首先先介绍一下 Ruby 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alias&lt;/code&gt; 关键字，其实很简单，&lt;strong&gt;就是给一个方法起一个别名&lt;/strong&gt;。但是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alias&lt;/code&gt; 配合上之前的 Open Class 特性，就可以达到我们所说的 Method Swizzling 效果。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m1&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# m1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:origin_m1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:m1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;origin_m1&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hook it!&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;# m1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Hook it!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;虽然在第一个位置已经定义了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Foo#m1&lt;/code&gt;  方法，但是由于 Open Class 的重写机制以及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alias&lt;/code&gt; 的别名设置，我们将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m1&lt;/code&gt; 已经修改成了新的方法，旧的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m1&lt;/code&gt; 方法使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin_m1&lt;/code&gt; 也可以调用到。如此也就完成了类似于 Objective-C 中的 Method Swizzling 机制。&lt;/p&gt;

&lt;p&gt;总结一下环绕别名，其实就是&lt;strong&gt;给方法定义一个别名，然后重新定义这个方法，在新的方法中使用别名调用老方法&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1602159579722-ad6461a6-31cd-407e-b718-089e9398cee3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;猴子补丁monkey-patch&quot;&gt;猴子补丁（Monkey Patch）&lt;/h2&gt;

&lt;p&gt;既然说到了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alias&lt;/code&gt; 别名，那么就顺便说一下&lt;strong&gt;猴子补丁&lt;/strong&gt;这个特性。猴子补丁&lt;strong&gt;区别于环绕别名的方式，它主要目的是在运行时动态替换并可以暂时性避免程序崩溃&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;先聊聊背景，由于 Open Class 和环绕别名这两个特性，Ruby 在运行时改变属性已经十分容易了。但是如果我们现在有一个需求，就是 **需要动态的进行 Patch ** ，而不是只要 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alias&lt;/code&gt; 就全局替换，这要怎么做呢？&lt;/p&gt;

&lt;p&gt;这里我们引入 Ruby 中的另外两个关键字 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;refine&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;using&lt;/code&gt; ，通过它们我们可以动态实现 Patch。举个例子：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m1&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# m1&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;
定义一个 Patch
&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;TemproaryPatch&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;refine&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt; 
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m1 bugfix&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TemproaryPatch&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;foo2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# m1 bugfix&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面代码中，我们先使用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;refine&lt;/code&gt; 方法重新定义了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m1&lt;/code&gt; 方法，定义完之后它并不会立即生效，而是在我们使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;using TemporaryPatch&lt;/code&gt; 时，才会生效。这样也就实现了动态 Patch 的需求。&lt;/p&gt;

&lt;h2 id=&quot;总说-alias-特性&quot;&gt;总说 alias 特性&lt;/h2&gt;

&lt;p&gt;Ruby 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alias&lt;/code&gt; 使用实在时太灵活了，这也导致了为什么 Ruby 很容易的就可以实现插件化能力。因为所有的方法都可以通过环绕别名的方式进行 Hook ，从而实现自己的 Gem 插件。&lt;/p&gt;

&lt;p&gt;除了以上介绍的一些扩展方式，其实 Ruby 还有更多修改方案。例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alias_method&lt;/code&gt; 、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extend&lt;/code&gt; 、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;refinement&lt;/code&gt; 等。如果后面 CocoaPods 有所涉及，我们也会跟进介绍一些。&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;本文通过 CocoaPods 中的两个使用到的特性 Eval 和 Alias，讲述了很多 Ruby 当中有意思的语法特性和元编程思想。Ruby 在众多的语言中，因为注重思想和语法优雅脱颖而出，也让我个人对语言有很大的思想提升。&lt;/p&gt;

&lt;p&gt;如果你有经历，我也强烈推荐你阅读 SICP 和「Ruby 元编程」这两本书，相信它们也会让你在语言设计的理解上，有着更深的认识。从共性提炼到方法论，从语言升华到经验。&lt;/p&gt;

&lt;h1 id=&quot;知识点问题梳理&quot;&gt;知识点问题梳理&lt;/h1&gt;

&lt;p&gt;这里罗列了四个问题用来考察你是否已经掌握了这篇文章，你可以在评论区及时回答问题与作者交流。如果没有建议你加入&lt;strong&gt;收藏&lt;/strong&gt;再次阅读：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;REPL 的核心思想是什么？与 Evaluation 特性有什么关系？&lt;/li&gt;
  &lt;li&gt;Ruby 中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt; 方法作用是什么？Binding 对象用来干什么？&lt;/li&gt;
  &lt;li&gt;Ruby 是否可以实现 Method Swizzling 这种功能？&lt;/li&gt;
  &lt;li&gt;Open Class 是什么？环绕别名如何利用？&lt;/li&gt;
&lt;/ol&gt;</content><author><name>冬瓜</name><email>gua@desgard.com</email></author><category term="CocoaPods 历险记" /><category term="Ruby in CocoaPods" /><category term="Ruby" /><summary type="html">CocoaPods 是使用 Ruby 这门脚本语言实现的工具。Ruby 有很多优质的特性被 CocoaPods 所利用，为了在后续的源码阅读中不会被这些用法阻塞，所以在这个系列中，会给出一些 CocoaPods 的番外篇，来介绍 Ruby 及其当中的一些语言思想。 今天这一篇我们来聊聊 Ruby 中的一些十分“动态”的特性：eval 特性和 alias 特性。 说说 Eval 特性 源自 Lisp 的 Evaluation 在一些语言中，eval 方法是将一个字符串当作表达式执行而返回一个结果的方法；在另外一些中，eval 它所传入的不一定是字符串，还有可能是抽象句法形势，Lisp 就是这种语言，并且 Lisp 也是首先提出使用 eval 方法的语言，并提出了 Evaluation 这个特性。这也使得 Lisp 这门语言可以实现脱离编译这套体系而动态执行的结果。 Lisp 中的 eval 方法预期是：将表达式作为参数传入到 eval 方法，并声明给定形式的返回值，运行时动态计算。 下面是一个 Lisp Evaluation 代码的例子（ Scheme 方言 RRS 及以后版本）： ; 将 f1 设置为表达式 (+ 1 2 3) (define f1 '(+ 1 2 3)) ; 执行 f1 (+ 1 2 3) 这个表达式，并返回 6 (eval f1 user-initial-environment) 可能你会觉得：这只是一个简单的特性，为什么会称作黑魔法特性？ 因为 Evaluation 这种可 eval 特性是很多思想、落地工具的基础。为什么这么说，下面来说几个很常见的场景。 REPL 的核心思想 如果你是 iOSer，你一定还会记得当年 Swift 刚刚诞生的时候，有一个主打的功能就是 REPL 交互式开发环境。 当然，作为动态性十分强大的 Lisp 和 Ruby 也有对应的 REPL 工具。例如 Ruby 的 irb 和 pry 都是十分强大的 REPL。为什么这里要提及 REPL 呢？因为在这个名字中，E 就是 eval 的意思。 REPL 对应的英文是 Read-Eval-Print Loop。 Read 读入一个来自于用户的表达式，将其放入内存； Eval 求值函数，负责处理内部的数据结构并对上下文逻辑求值； Print 输出方法，将结果呈现给用户，完成交互。 REPL 的模型让大家对于语言的学习和调试也有着增速作用，因为“Read - Eval - Print” 这种循环要比 “Code - Compile - Run - Debug” 这种循环更加敏捷。 在 Lisp 的思想中，为了实现一个 Lisp REPL ，只需要实现这三个函数和一个轮循的函数即可。当然这里我们忽略掉复杂的求值函数，因为它就是一个解释器。 有了这个思想，一个最简单的 REPL 就可以使用如下的形式表达： # Lisp 中 (loop (print (eval (read)))) # Ruby 中 while [case] print(eval(read)) end 简单聊聊 HotPatch 大约在 2 年前，iOS 比较流行使用 JSPatch/RN 基于 JavaScriptCore 提供的 iOS 热修复和动态化方案。其核心的思路基本都是下发 JavaScript 脚本来调用 Objective-C，从而实现逻辑注入。 JSPatch 尤其被大家所知，需要编写大量的 JavaScript 代码来调用 Objective-C 方法，当然官方也看到了这一效率的洼地，并制作了 JSPatch 的语法转化器来间接优化这一过程。 但是无论如何优化，其实最大的根本问题是 Objective-C 这门语言不具备 Evaluation 的可 eval 特性，倘若拥有该特性，那其实就可以跨越使用 JavaScript 做桥接的诸多问题。 我们都知道 Objective-C 的 Runtime 利用消息转发可以动态执行任何 Objective-C 方法，这也就给了我们一个启示。假如我们自制一个轻量级解释器，动态解释 Objective-C 代码，利用 Runtime 消息转发来动态执行 Objective-C 方法，就可以实现一个“准 eval 方法”。 这种思路在 GitHub 上也已经有朋友开源出了 Demo - OCEval。不同于 Clang 的编译过程，他进行了精简： 去除了 Preprocesser 的预编译环节，保留了 Lexer 词法分析和 Parser 语法分析， 利用 NSMethodSignature 封装方法，结合递归下降，使用 Runtime 对方法进行消息转发。 利用这种思路的还有另外一个 OCRunner 项目。 这些都是通过自制解释器，实现 eval 特性，进而配合 libffi 来实现。 Ruby 中的 eval 和 binding Ruby 中的 eval 方法其实很好理解，就是将 Ruby 代码以字符串的形式作为参数传入，然后进行执行。 str = 'Hello' puts eval(&quot;str + ' CocoaPods'&quot;) # Hello CocoaPods 上面就是一个例子，我们发现传入的代码 str + ' CocoaPods'  在 eval 方法中已经变成 Ruby 代码执行，并返回结果 'Hello CocoaPods'  字符串。 在「Podfile 的解析逻辑」中讲到， CocoaPods 中也使用了 eval 方法，从而以 Ruby 脚本的形式，执行了 Podfile 文件中的逻辑。 def self.from_ruby(path, contents = nil) # ... podfile = Podfile.new(path) do begin # 执行 Podfile 中的逻辑 eval(contents, nil, path.to_s) rescue Exception =&amp;gt; e message = &quot;Invalid `#{path.basename}` file: #{e.message}&quot; raise DSLError.new(message, path, e, contents) end end podfile end 当然，在 CocoaPods 中仅仅是用了 eval 方法的第一层，对于我们学习者来说肯定不能满足于此。 在 Ruby 中， Kernel 有一个方法 binding ，它会返回一个 Binding 类型的对象。这个 Binding 对象就是我们俗称的绑定，它封装了当前执行上下文的所有绑定，包括变量、方法、Block 和 self 的名称绑定等，这些绑定直接决定了面向对象语言中的执行环境。 那么这个 Binding 对象在 eval 方法中怎么使用呢？其实就是 eval 方法的第二个参数。这个在 CocoaPods 中运行 Podfile 代码中并没有使用到。我们下面来做一个例子： def foo name = 'Gua' binding end eval('p name', foo) # Gua 在这个例子中，我们的 foo 方法就是我们上面说的执行环境，在这个环境里定义了 name 这个变量，并在方法体最后返回 binding 方法调用结果。在下面使用 eval 方法的时候，当作 Kernel#binding 入参传入，便可以成功输出 name 变量。 TOPLEVEL_BINDING 全局常量 在 Ruby 中 main 对象是最顶级范围，Ruby 中的任何对象都至少需要在次作用域范围内被实例化。为了随时随地地访问 main 对象的上下文，Ruby 提供了一个名为 TOPLEVEL_BINDING 的全局常量，它指向一个封装了顶级绑定的对象。 便于理解，举个例子： @a = &quot;Hello&quot; class Addition def add TOPLEVEL_BINDING.eval(&quot;@a += ' Gua'&quot;) end end Addition.new.add p TOPLEVEL_BINDING.receiver # main p @a # Hello Gua 这段代码中，Binding#receiver 方法返回 Kernel#binding 消息的接收者。为此，则保存了调用执行上下文 - 在我们的示例中，是 main 对象。 然后我们在 Addition 类的实例中使用 TOPLEVEL_BINDING 全局常量访问全局的 @a 变量。 总说 Ruby Eval 特性 以上的简单介绍如果你曾经阅读过 SICP（Structture and Interpretation of Computer Programs）这一神书的第四章后，一定会有更加深刻的理解。 我们将所有的语句当作求值，用语言去描述过程，用与被求值的语言相同的语言写出的求值器被称作元循环；eval 在元循环中，参数是一个表达式和一个环境，这也与 Ruby 的 eval 方法完全吻合。 不得不说，Ruby 的很多思想，站在 SICP 的肩膀上。 类似于 Method Swizzling 的 alias 对于广大 iOSer 一定都十分了解被称作 Runtime 黑魔法的 Method Swizzling。这其实是动态语言大都具有都特性。 在 iOS 中，使用 Selector 和 Implementation（即 IMP）的指向交换，从而实现了方法的替换。这种替换是发生在运行时的。 在 Ruby 中，也有类似的方法。为了全面的了解 Ruby 中的 “Method Swizzling”，我们需要了解这几个关于元编程思想的概念：Open Class 特性与环绕别名。这两个特性也是实现 CocoaPods 插件化的核心依赖。 Open Class 与特异方法 Open Class 特性就是在一个类已经完成定义之后，再次向其中添加方法。在 Ruby 中的实现方法就是定义同名类。 在 Ruby 中不会像 Objective-C 和 Swift 一样被认为是编译错误，后者需要使用 Category 和 Extension 特殊的关键字语法来约定是扩展。而是把同名类中的定义方法全部附加到已定义的旧类中，不重名的增加，重名的覆盖。以下为示例代码： class Foo def m1 puts &quot;m1&quot; end end class Foo def m2 puts &quot;m2&quot; end end Foo.new.m1 # m1 Foo.new.m2 # m2 class Foo def m1 puts &quot;m1 new&quot; end end Foo.new.m1 # m1 new Foo.new.m2 # m2 特异方法和 Open Class 有点类似，不过附加的方法不是附加到类中，而是附加到特定到实例中。被附加到方法仅仅在目标实例中存在，不会影响该类到其他实例。示例代码： class Foo def m1 puts &quot;m1&quot; end end foo1 = Foo.new def foo1.m2() puts &quot;m2&quot; end foo1.m1 # m1 foo1.m2 # m2 foo2 = Foo.new foo2.m1 # m1 # foo2.m2 undefined method `m2' for #&amp;lt;Foo:0x00007f88bb08e238&amp;gt; (NoMethodError) 环绕别名（Around Aliases） 其实环绕别名只是一种特殊的写法，这里使用了 Ruby 的 alias 关键字以及上文提到的 Open Class 的特性。 首先先介绍一下 Ruby 的 alias 关键字，其实很简单，就是给一个方法起一个别名。但是 alias 配合上之前的 Open Class 特性，就可以达到我们所说的 Method Swizzling 效果。 class Foo def m1 puts &quot;m1&quot; end end foo = Foo.new foo.m1 # m1 class Foo alias :origin_m1 :m1 def m1 origin_m1 puts &quot;Hook it!&quot; end end foo.m1 # m1 # Hook it! 虽然在第一个位置已经定义了 Foo#m1  方法，但是由于 Open Class 的重写机制以及 alias 的别名设置，我们将 m1 已经修改成了新的方法，旧的 m1 方法使用 origin_m1 也可以调用到。如此也就完成了类似于 Objective-C 中的 Method Swizzling 机制。 总结一下环绕别名，其实就是给方法定义一个别名，然后重新定义这个方法，在新的方法中使用别名调用老方法。 猴子补丁（Monkey Patch） 既然说到了 alias 别名，那么就顺便说一下猴子补丁这个特性。猴子补丁区别于环绕别名的方式，它主要目的是在运行时动态替换并可以暂时性避免程序崩溃。 先聊聊背景，由于 Open Class 和环绕别名这两个特性，Ruby 在运行时改变属性已经十分容易了。但是如果我们现在有一个需求，就是 **需要动态的进行 Patch ** ，而不是只要 alias 就全局替换，这要怎么做呢？ 这里我们引入 Ruby 中的另外两个关键字 refine 和 using ，通过它们我们可以动态实现 Patch。举个例子： class Foo def m1 puts &quot;m1&quot; end end foo = Foo.new foo.m1 # m1 &quot;&quot;&quot; 定义一个 Patch &quot;&quot;&quot; module TemproaryPatch refine Foo do def m1 puts &quot;m1 bugfix&quot; end end end using TemproaryPatch foo2 = Foo.new foo2.m1 # m1 bugfix 上面代码中，我们先使用了 refine 方法重新定义了 m1 方法，定义完之后它并不会立即生效，而是在我们使用 using TemporaryPatch 时，才会生效。这样也就实现了动态 Patch 的需求。 总说 alias 特性 Ruby 的 alias 使用实在时太灵活了，这也导致了为什么 Ruby 很容易的就可以实现插件化能力。因为所有的方法都可以通过环绕别名的方式进行 Hook ，从而实现自己的 Gem 插件。 除了以上介绍的一些扩展方式，其实 Ruby 还有更多修改方案。例如 alias_method 、 extend 、 refinement 等。如果后面 CocoaPods 有所涉及，我们也会跟进介绍一些。 总结 本文通过 CocoaPods 中的两个使用到的特性 Eval 和 Alias，讲述了很多 Ruby 当中有意思的语法特性和元编程思想。Ruby 在众多的语言中，因为注重思想和语法优雅脱颖而出，也让我个人对语言有很大的思想提升。 如果你有经历，我也强烈推荐你阅读 SICP 和「Ruby 元编程」这两本书，相信它们也会让你在语言设计的理解上，有着更深的认识。从共性提炼到方法论，从语言升华到经验。 知识点问题梳理 这里罗列了四个问题用来考察你是否已经掌握了这篇文章，你可以在评论区及时回答问题与作者交流。如果没有建议你加入收藏再次阅读： REPL 的核心思想是什么？与 Evaluation 特性有什么关系？ Ruby 中 eval 方法作用是什么？Binding 对象用来干什么？ Ruby 是否可以实现 Method Swizzling 这种功能？ Open Class 是什么？环绕别名如何利用？</summary></entry><entry><title type="html">二手房增值税分析 - 首付与差额</title><link href="https://www.desgard.com/2020/09/23/buy-big-house-in-sh-2.html" rel="alternate" type="text/html" title="二手房增值税分析 - 首付与差额" /><published>2020-09-23T00:00:00-08:00</published><updated>2020-09-23T00:00:00-08:00</updated><id>https://www.desgard.com/2020/09/23/buy-big-house-in-sh-2</id><content type="html" xml:base="https://www.desgard.com/2020/09/23/buy-big-house-in-sh-2.html">&lt;blockquote&gt;
  &lt;p&gt;我给自己定了一个将近 700 天的计划，这就是在上海买房定居。于是开启了研究购房政策、研究小区和板块、研究购房注意事项等一系列的调研和研究。我将这些笔记归档成文章，发表在公众号与大家分享。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;今天距离购房还有 665 天。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;虽然说二手房的价格便宜，但其实除了购房款以外，还有大大小小的多个税款。当我们累加上这些价格后才是最终的支出价格。&lt;/p&gt;

&lt;p&gt;这篇笔记&lt;strong&gt;仅适用于上海 2020 年购入二手房的相关政策，其他省份和城市都略有区别&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二手房交易中，这篇我们只关注增值税。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先，我们先要了解几个概念。&lt;/p&gt;

&lt;h1 id=&quot;普通住宅认定标准&quot;&gt;普通住宅认定标准&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;什么是普通住宅？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;影响上海普通住宅认定标准的三个因素，一是&lt;strong&gt;总价&lt;/strong&gt;，二是&lt;strong&gt;面积，&lt;/strong&gt;三是&lt;strong&gt;圈层&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;首先，满足以下任意一行条件的即为普通住宅，反之则为非普通住宅：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;圈层&lt;/th&gt;
      &lt;th&gt;面积&lt;/th&gt;
      &lt;th&gt;总价&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;内环内&lt;/td&gt;
      &lt;td&gt;&amp;lt; 140 平米&lt;/td&gt;
      &lt;td&gt;≤ 450 万元&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;内外环之间&lt;/td&gt;
      &lt;td&gt;&amp;lt; 140 平米&lt;/td&gt;
      &lt;td&gt;≤ 310 万元&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;外环外&lt;/td&gt;
      &lt;td&gt;&amp;lt; 140 平米&lt;/td&gt;
      &lt;td&gt;≤ 230 万元&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;知道了普通住宅的认定标准后有什么用呢？接下来就是关于普通和非普通的相关征税内容。&lt;/p&gt;

&lt;h1 id=&quot;增值税及其附加税&quot;&gt;增值税及其附加税&lt;/h1&gt;

&lt;p&gt;当所购房屋为&lt;strong&gt;普通住宅&lt;/strong&gt;的时候，其增值税及其附加税按照下表为征收标准：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;年限&lt;/th&gt;
      &lt;th&gt;征收标准&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&amp;lt; 2 年&lt;/td&gt;
      &lt;td&gt;(税务核定价 ÷ 1.05) × (5% + 0.55%)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[2, 5) 年&lt;/td&gt;
      &lt;td&gt;免征&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;≥ 5 年&lt;/td&gt;
      &lt;td&gt;免征&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;对应的，&lt;strong&gt;非普通住宅&lt;/strong&gt;有以下的标准：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;年限&lt;/th&gt;
      &lt;th&gt;征收标准&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&amp;lt; 2 年&lt;/td&gt;
      &lt;td&gt;(税务核定价 ÷ 1.05) × (5% + 0.55%)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[2, 5) 年&lt;/td&gt;
      &lt;td&gt;((税务核定价- 买入价格) ÷ 1.05) × (5% + 0.55%)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;≥ 5 年&lt;/td&gt;
      &lt;td&gt;((税务核定价 - 买入价格) ÷ 1.05) × (5% + 0.55%)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这里的税务核定价是什么？又是如何确定的呢？&lt;/p&gt;

&lt;h2 id=&quot;税务核定价&quot;&gt;税务核定价&lt;/h2&gt;

&lt;p&gt;税务核定价，又被大家称之为&lt;strong&gt;二手房过户指导价&lt;/strong&gt;。它是由当地税务部门确定的，核定价存在的意义主要是“兜底”，简单来说就是当买卖双方的网签价格低于核定价时，税务部门将不再根据&lt;strong&gt;网签价（也就是协商好的交易价格）&lt;/strong&gt; 来确定税基，而是以核定价为标准来确定税基。&lt;/p&gt;

&lt;p&gt;所以你应该明白了，核定价明显就是为了对付“阴阳合同”的。是的，它本质上是为了保证税收。&lt;/p&gt;

&lt;p&gt;试想一下，如果买卖双方为了避税，网签价定为 1 元，那么这套房子就完全没有任何税费了。&lt;/p&gt;

&lt;p&gt;那么税务核定价格一般是多少呢？&lt;/p&gt;

&lt;p&gt;这个数据我在百度和谷歌也检索了很久，没有办法得到一组批量数据来做数据拟合。核定价格一般也不会对外公布，需要自己去税务机关咨询，也只能得到一个大概的数据。&lt;/p&gt;

&lt;p&gt;因为在确定房屋的核定价时，要参考地段、面积等诸多因素，所以这个是很难作出表达式来加权表示的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;由于税务核定价一般是用来“兜底”的，所以我们在这篇文章里做计算的时候，假设税务核定价是网签价格的 85% 来计算。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;核定价影响贷款额度&quot;&gt;核定价影响贷款额度&lt;/h2&gt;

&lt;p&gt;虽然在「公积金贷买房能省多少钱」一文中，我们假定了任意房子的总价格 35% 首付，65% 贷款。&lt;/p&gt;

&lt;p&gt;但是贷款额度参考的基数其实是&lt;strong&gt;税务核定价格&lt;/strong&gt;，这也就意味着 &lt;strong&gt;往往购买二手房，你的首付是要多交一笔的，是大于 35% 的&lt;/strong&gt; 。这是为什么？我们简单做一下计算：&lt;/p&gt;

&lt;p&gt;假设我们想购买的二手房&lt;strong&gt;网签总价为 $T_{网签}$ 元&lt;/strong&gt; ，且**假设税务核定价是网签价格的 85% **，此时税务核定价格 ：&lt;/p&gt;

\[\begin{equation}
\left\{
\begin{array}{lr}
T_{贷款额度} = T_{核定} \times 65\% \notag \\
T_{核定} = T_{网签} \times 85\% \notag \\
\end{array} \\
\right.
\end{equation}\]

&lt;p&gt;带入后我们可以推导出：&lt;/p&gt;

\[\begin{equation}
\left\{
\begin{array}{lr}
T_{贷款额度} = T_{网签} \times 55.25\%  \notag \\
T_{首付} = 1-55.25\% = 44.75\% \notag \\
\end{array} 
\right.
\end{equation}\]

&lt;p&gt;根据我们的假设条件，我们发现首付我们&lt;strong&gt;必须要凑够 44.75% 价格的首付，而贷款额度只有 55.25%&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;所以很多人都说，因为买了二手房，所以首付要高一些，将近 50%。其实就是上面这个原因。&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;增值税影响下的购房决策分析&quot;&gt;增值税影响下的购房决策分析&lt;/h1&gt;

&lt;p&gt;同样的，我们假设&lt;strong&gt;网签总价为 $T_{网签}$ 元&lt;/strong&gt;，且 &lt;strong&gt;假设税务核定价是网签价格的 85%。&lt;/strong&gt; 另外，我从知乎上检索到这么一组数据 「&lt;a href=&quot;https://zhuanlan.zhihu.com/p/75780115&quot; title=&quot;2015-2019 年上海各区房价涨跌情况&quot;&gt;2015-2019 年上海各区房价涨跌情况&lt;/a&gt;」。其中我需要用到各个区的二手房年化平均增长率，如下表总结：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;区域&lt;/th&gt;
      &lt;th&gt;二手房价年化平均涨幅&lt;/th&gt;
      &lt;th&gt;区域&lt;/th&gt;
      &lt;th&gt;二手房价年化平均涨幅&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;长宁&lt;/td&gt;
      &lt;td&gt;13.30%&lt;/td&gt;
      &lt;td&gt;静安（包含老闸北）&lt;/td&gt;
      &lt;td&gt;16.04%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;虹口&lt;/td&gt;
      &lt;td&gt;15.79%&lt;/td&gt;
      &lt;td&gt;闵行&lt;/td&gt;
      &lt;td&gt;14.02%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;黄浦&lt;/td&gt;
      &lt;td&gt;15.99%&lt;/td&gt;
      &lt;td&gt;浦东（包含老南汇）&lt;/td&gt;
      &lt;td&gt;12.55%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;普陀&lt;/td&gt;
      &lt;td&gt;15.81%&lt;/td&gt;
      &lt;td&gt;徐汇&lt;/td&gt;
      &lt;td&gt;13.55%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;由上述数据我们可以计算出，上海二手房平均年化涨幅为 &lt;strong&gt;14.63%&lt;/strong&gt;。有了涨幅数据之后，我们就可以求出差额的表达式，即 $T_{差额} = (税务核定价- 买入价格)$。当然，这里我们还要假设房屋年限为 $y$ 年&lt;/p&gt;

\[\begin{align}
T_{差额} &amp;amp;= T_{核定价} - T_{买入价格} \notag \\
\ &amp;amp;= 0.85T_{网签} - T_{网签} \div (1 + 0.1463)^y \notag \\
\end{align}\]

&lt;p&gt;接下来我们来计算增值税的表达式：&lt;/p&gt;

&lt;p&gt;当房屋是&lt;strong&gt;普通住宅&lt;/strong&gt;时：&lt;/p&gt;

\[\begin{equation}
T_{增值税} = \left\{
\begin{aligned}
&amp;amp; \frac{T_{核定价}}{1.05} \times 5.55\% = 0.04497 · T_{网签} &amp;amp;&amp;amp; (y &amp;lt; 2)\\
&amp;amp; 0 &amp;amp;&amp;amp; (y \geq 2)
\end{aligned} \\
\right. \notag \\
\end{equation}\]

&lt;p&gt;当房屋是&lt;strong&gt;非普通住宅&lt;/strong&gt;时：&lt;/p&gt;

\[\begin{equation}
T_{增值税} = \left\{
\begin{aligned}
&amp;amp; 0.04497 · T_{网签} &amp;amp;&amp;amp; (y &amp;lt; 2) \notag \\ \\
&amp;amp; (0.85T_{网签} - \frac{T_{网签}}{(1 + 0.1463)^y}) \times 0.0529 &amp;amp;&amp;amp; (y \geq 2) \notag \\ 
\end{aligned}
\right. \notag \\
\end{equation}\]

&lt;p&gt;我们可以看到，&lt;strong&gt;当年限小于 2 年的时候，无论是普通住宅还是非普通住宅，其增值税都要支付将近 4.5% 的增值税。且是否是普通住宅对增值税毫无影响。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当年限大于等于 5 年的时候，普通住宅是免征增值税的，而非普通住宅是与年限和网签总价有一定关系的。我们来分析一下。&lt;/p&gt;

&lt;h2 id=&quot;非普通住宅的年限影响&quot;&gt;非普通住宅的年限影响&lt;/h2&gt;

&lt;p&gt;由于年份 $y$ 是离散的，所以我们将其投影在每一条折线上。以网签价格为横轴变量，来观察增值税与网签价的关系图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardiav2-364823c4cf605b91cf8d8a57c6fe7844_1440w.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们可以得到以下结论：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;房龄越高，其所得税缴纳越多&lt;/strong&gt;。这也是可以理解的，因为随着房价的上涨，其差额会逐渐变大。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;所得税的增长幅度与年限呈现下降趋势&lt;/strong&gt;。随着年限增高，增长差值逐渐降低。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;增值税占比&quot;&gt;增值税占比&lt;/h2&gt;

&lt;p&gt;有没有什么方法来评估增值税最低的选择策略呢？我个人的想法是使用所占比例来考量。以下是我想的一个方法：&lt;/p&gt;

\[P_{增值税所占比例} \approx \frac{T_{增值税}}{T_{网签价} + T_{增值税}}\]

&lt;p&gt;为什么这里是约等于呢？因为最后你需要支出的价格除了网签价格外，&lt;strong&gt;不仅只有增值税，还有其他的各种税款。&lt;/strong&gt; 这里仅仅使用增值税来当作基数，可以放大增值税的比重，更能体现问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardiav2-2c8a663f4f74399c25d33fe351b292bc_1440w.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;作出图像我们可以发现，当我们购买“低龄”的房子，其所得税所占比例是更底的，&lt;strong&gt;5 年的二手房其所得税所占比例均值是 1.79%&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;于是乎我们可以大致的计算出房龄与所得税所占比例的大致关系：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1600825890934-a0417c8e-0029-4533-9068-d4a29a72e650.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么我们最好的策略是要选择最新的房子吗？其实并不是这样的，因为随着年限的增长，其单价也在逐渐升高。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;换句话说，当我总价固定后，随着房龄的降低，其面积是越来越小的。房屋面积是和我们的需求息息相关的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;所以当我们做买房策略的时候，我们需要先确定&lt;strong&gt;需求面积&lt;/strong&gt;和我们&lt;strong&gt;所支出的总价&lt;/strong&gt;，然后尽可能的去购买新房就好了。&lt;/p&gt;

&lt;p&gt;由于所得税在这里只能说明部分问题，具体的问题我将在后续的文中来具体分析。&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;购买二手房时，&lt;strong&gt;首付高一些，将近 50%。&lt;/strong&gt; 其原因是因为税务核算价往往偏低，从而拉低了贷款比重，进而使得首付提高；&lt;/li&gt;
  &lt;li&gt;当购买非普通住宅时，&lt;strong&gt;房龄越高，其所得税缴纳越多&lt;/strong&gt;。因为随着房价的上涨，其差额会逐渐变大。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;所得税的增长幅度与年限呈现下降趋势&lt;/strong&gt;。随着年限增高，增长差值逐渐降低。&lt;/li&gt;
  &lt;li&gt;确定&lt;strong&gt;需求面积&lt;/strong&gt;和&lt;strong&gt;所支出的总价&lt;/strong&gt;，尽可能的去购买新房。这与我们的正常认知也是相同的。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;相关数据分析代码&quot;&gt;相关数据分析代码&lt;/h1&gt;

&lt;p&gt;以下代码由我个人编写，可在 Jupyter Notebook 环境下直接运行。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
网签价与增值税
&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# encoding=utf-8
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;IPython.core.pylabtools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;figsize&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# import figsize
#figsize(12.5, 4) # 设置 figsize
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'savefig.dpi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#图片像素
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'figure.dpi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#分辨率
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 总价
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;125000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 年限
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 增值税计算
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;trs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.85&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1463&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0529&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;trs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;年'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;margins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplots_adjust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'网签价/千万元'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#X轴标签
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;增值税/元&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Y轴标签
&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
网签价与增值税占比
&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 年限
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 增值税计算
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;trs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.85&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1463&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0529&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;trs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;th&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;年'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;年'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;margins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplots_adjust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'网签价/千万元'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#X轴标签
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;所得税占总支出比例&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Y轴标签
&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
房龄与增值税占比
&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.017910502320842965&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.021189641628359904&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.024032438906425032&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.026498963556469416&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.028640531033586977&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.030501094013867885&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.032118385667131544&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.03352486519307519&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.034748504347376426&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.035813445129716175&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.03674055234381547&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.03754787981470654&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.038251065262737784&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.03886366589974932&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.03939744452077101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.039862614060287876&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'o'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;margins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'增值税占总支出比例'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#X轴标签
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;房子年限/年&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Y轴标签
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>冬瓜</name><email>gua@desgard.com</email></author><category term="冬瓜买房笔记" /><category term="数学建模" /><summary type="html">我给自己定了一个将近 700 天的计划，这就是在上海买房定居。于是开启了研究购房政策、研究小区和板块、研究购房注意事项等一系列的调研和研究。我将这些笔记归档成文章，发表在公众号与大家分享。 今天距离购房还有 665 天。 虽然说二手房的价格便宜，但其实除了购房款以外，还有大大小小的多个税款。当我们累加上这些价格后才是最终的支出价格。 这篇笔记仅适用于上海 2020 年购入二手房的相关政策，其他省份和城市都略有区别。 二手房交易中，这篇我们只关注增值税。 首先，我们先要了解几个概念。 普通住宅认定标准 什么是普通住宅？ 影响上海普通住宅认定标准的三个因素，一是总价，二是面积，三是圈层。 首先，满足以下任意一行条件的即为普通住宅，反之则为非普通住宅： 圈层 面积 总价 内环内 &amp;lt; 140 平米 ≤ 450 万元 内外环之间 &amp;lt; 140 平米 ≤ 310 万元 外环外 &amp;lt; 140 平米 ≤ 230 万元 知道了普通住宅的认定标准后有什么用呢？接下来就是关于普通和非普通的相关征税内容。 增值税及其附加税 当所购房屋为普通住宅的时候，其增值税及其附加税按照下表为征收标准： 年限 征收标准 &amp;lt; 2 年 (税务核定价 ÷ 1.05) × (5% + 0.55%) [2, 5) 年 免征 ≥ 5 年 免征 对应的，非普通住宅有以下的标准： 年限 征收标准 &amp;lt; 2 年 (税务核定价 ÷ 1.05) × (5% + 0.55%) [2, 5) 年 ((税务核定价- 买入价格) ÷ 1.05) × (5% + 0.55%) ≥ 5 年 ((税务核定价 - 买入价格) ÷ 1.05) × (5% + 0.55%) 这里的税务核定价是什么？又是如何确定的呢？ 税务核定价 税务核定价，又被大家称之为二手房过户指导价。它是由当地税务部门确定的，核定价存在的意义主要是“兜底”，简单来说就是当买卖双方的网签价格低于核定价时，税务部门将不再根据网签价（也就是协商好的交易价格） 来确定税基，而是以核定价为标准来确定税基。 所以你应该明白了，核定价明显就是为了对付“阴阳合同”的。是的，它本质上是为了保证税收。 试想一下，如果买卖双方为了避税，网签价定为 1 元，那么这套房子就完全没有任何税费了。 那么税务核定价格一般是多少呢？ 这个数据我在百度和谷歌也检索了很久，没有办法得到一组批量数据来做数据拟合。核定价格一般也不会对外公布，需要自己去税务机关咨询，也只能得到一个大概的数据。 因为在确定房屋的核定价时，要参考地段、面积等诸多因素，所以这个是很难作出表达式来加权表示的。 由于税务核定价一般是用来“兜底”的，所以我们在这篇文章里做计算的时候，假设税务核定价是网签价格的 85% 来计算。 核定价影响贷款额度 虽然在「公积金贷买房能省多少钱」一文中，我们假定了任意房子的总价格 35% 首付，65% 贷款。 但是贷款额度参考的基数其实是税务核定价格，这也就意味着 往往购买二手房，你的首付是要多交一笔的，是大于 35% 的 。这是为什么？我们简单做一下计算： 假设我们想购买的二手房网签总价为 $T_{网签}$ 元 ，且**假设税务核定价是网签价格的 85% **，此时税务核定价格 ： \[\begin{equation} \left\{ \begin{array}{lr} T_{贷款额度} = T_{核定} \times 65\% \notag \\ T_{核定} = T_{网签} \times 85\% \notag \\ \end{array} \\ \right. \end{equation}\] 带入后我们可以推导出： \[\begin{equation} \left\{ \begin{array}{lr} T_{贷款额度} = T_{网签} \times 55.25\% \notag \\ T_{首付} = 1-55.25\% = 44.75\% \notag \\ \end{array} \right. \end{equation}\] 根据我们的假设条件，我们发现首付我们必须要凑够 44.75% 价格的首付，而贷款额度只有 55.25%。 所以很多人都说，因为买了二手房，所以首付要高一些，将近 50%。其实就是上面这个原因。 增值税影响下的购房决策分析 同样的，我们假设网签总价为 $T_{网签}$ 元，且 假设税务核定价是网签价格的 85%。 另外，我从知乎上检索到这么一组数据 「2015-2019 年上海各区房价涨跌情况」。其中我需要用到各个区的二手房年化平均增长率，如下表总结： 区域 二手房价年化平均涨幅 区域 二手房价年化平均涨幅 长宁 13.30% 静安（包含老闸北） 16.04% 虹口 15.79% 闵行 14.02% 黄浦 15.99% 浦东（包含老南汇） 12.55% 普陀 15.81% 徐汇 13.55% 由上述数据我们可以计算出，上海二手房平均年化涨幅为 14.63%。有了涨幅数据之后，我们就可以求出差额的表达式，即 $T_{差额} = (税务核定价- 买入价格)$。当然，这里我们还要假设房屋年限为 $y$ 年 \[\begin{align} T_{差额} &amp;amp;= T_{核定价} - T_{买入价格} \notag \\ \ &amp;amp;= 0.85T_{网签} - T_{网签} \div (1 + 0.1463)^y \notag \\ \end{align}\] 接下来我们来计算增值税的表达式： 当房屋是普通住宅时： \[\begin{equation} T_{增值税} = \left\{ \begin{aligned} &amp;amp; \frac{T_{核定价}}{1.05} \times 5.55\% = 0.04497 · T_{网签} &amp;amp;&amp;amp; (y &amp;lt; 2)\\ &amp;amp; 0 &amp;amp;&amp;amp; (y \geq 2) \end{aligned} \\ \right. \notag \\ \end{equation}\] 当房屋是非普通住宅时： \[\begin{equation} T_{增值税} = \left\{ \begin{aligned} &amp;amp; 0.04497 · T_{网签} &amp;amp;&amp;amp; (y &amp;lt; 2) \notag \\ \\ &amp;amp; (0.85T_{网签} - \frac{T_{网签}}{(1 + 0.1463)^y}) \times 0.0529 &amp;amp;&amp;amp; (y \geq 2) \notag \\ \end{aligned} \right. \notag \\ \end{equation}\] 我们可以看到，当年限小于 2 年的时候，无论是普通住宅还是非普通住宅，其增值税都要支付将近 4.5% 的增值税。且是否是普通住宅对增值税毫无影响。 当年限大于等于 5 年的时候，普通住宅是免征增值税的，而非普通住宅是与年限和网签总价有一定关系的。我们来分析一下。 非普通住宅的年限影响 由于年份 $y$ 是离散的，所以我们将其投影在每一条折线上。以网签价格为横轴变量，来观察增值税与网签价的关系图： 我们可以得到以下结论： 房龄越高，其所得税缴纳越多。这也是可以理解的，因为随着房价的上涨，其差额会逐渐变大。 所得税的增长幅度与年限呈现下降趋势。随着年限增高，增长差值逐渐降低。 增值税占比 有没有什么方法来评估增值税最低的选择策略呢？我个人的想法是使用所占比例来考量。以下是我想的一个方法： \[P_{增值税所占比例} \approx \frac{T_{增值税}}{T_{网签价} + T_{增值税}}\] 为什么这里是约等于呢？因为最后你需要支出的价格除了网签价格外，不仅只有增值税，还有其他的各种税款。 这里仅仅使用增值税来当作基数，可以放大增值税的比重，更能体现问题。 作出图像我们可以发现，当我们购买“低龄”的房子，其所得税所占比例是更底的，5 年的二手房其所得税所占比例均值是 1.79%。 于是乎我们可以大致的计算出房龄与所得税所占比例的大致关系： 那么我们最好的策略是要选择最新的房子吗？其实并不是这样的，因为随着年限的增长，其单价也在逐渐升高。 换句话说，当我总价固定后，随着房龄的降低，其面积是越来越小的。房屋面积是和我们的需求息息相关的。 所以当我们做买房策略的时候，我们需要先确定需求面积和我们所支出的总价，然后尽可能的去购买新房就好了。 由于所得税在这里只能说明部分问题，具体的问题我将在后续的文中来具体分析。 总结 购买二手房时，首付高一些，将近 50%。 其原因是因为税务核算价往往偏低，从而拉低了贷款比重，进而使得首付提高； 当购买非普通住宅时，房龄越高，其所得税缴纳越多。因为随着房价的上涨，其差额会逐渐变大。 所得税的增长幅度与年限呈现下降趋势。随着年限增高，增长差值逐渐降低。 确定需求面积和所支出的总价，尽可能的去购买新房。这与我们的正常认知也是相同的。 相关数据分析代码 以下代码由我个人编写，可在 Jupyter Notebook 环境下直接运行。 &quot;&quot;&quot; 网签价与增值税 &quot;&quot;&quot; # encoding=utf-8 import numpy as np import math from matplotlib import pyplot import matplotlib.pyplot as plt from IPython.core.pylabtools import figsize # import figsize #figsize(12.5, 4) # 设置 figsize plt.rcParams['savefig.dpi'] = 300 #图片像素 plt.rcParams['figure.dpi'] = 300 #分辨率 # 总价 ths = [i * 125000 for i in range(1, 100)] # 年限 ys = [i for i in range(5, 21)] for y in ys: # 增值税计算 trs = [] for th in ths: tr = (0.85 * th - th / ((1 + 0.1463) ** y)) * 0.0529 trs.append(tr) plt.plot(ths, trs, label=f'{y}年') plt.legend() plt.margins(0) plt.subplots_adjust(bottom=0.10) plt.xlabel('网签价/千万元') #X轴标签 plt.ylabel(&quot;增值税/元&quot;) #Y轴标签 &quot;&quot;&quot; 网签价与增值税占比 &quot;&quot;&quot; # 年限 ys = [i for i in range(5, 21)] for y in ys: # 增值税计算 trs = [] for th in ths: tr = (0.85 * th - th / ((1 + 0.1463) ** y)) * 0.0529 trs.append(tr / (th + tr)) print(sum(trs) / len(trs)) if y &amp;gt;= 10: plt.plot(ths, trs, label=f'{y}年') else: plt.plot(ths, trs, marker='*', label=f'{y}年') plt.legend() plt.margins(0) plt.subplots_adjust(bottom=0.10) plt.xlabel('网签价/千万元') #X轴标签 plt.ylabel(&quot;所得税占总支出比例&quot;) #Y轴标签 &quot;&quot;&quot; 房龄与增值税占比 &quot;&quot;&quot; p = [ 0.017910502320842965, 0.021189641628359904, 0.024032438906425032, 0.026498963556469416, 0.028640531033586977, 0.030501094013867885, 0.032118385667131544, 0.03352486519307519, 0.034748504347376426, 0.035813445129716175, 0.03674055234381547, 0.03754787981470654, 0.038251065262737784, 0.03886366589974932, 0.03939744452077101, 0.039862614060287876, ] plt.plot(p, y, marker='o') plt.legend() plt.margins(0) plt.xlabel('增值税占总支出比例') #X轴标签 plt.ylabel(&quot;房子年限/年&quot;) #Y轴标签</summary></entry><entry><title type="html">Podfile 的解析逻辑</title><link href="https://www.desgard.com/2020/09/16/cocoapods-story-4.html" rel="alternate" type="text/html" title="Podfile 的解析逻辑" /><published>2020-09-16T00:00:00-08:00</published><updated>2020-09-16T00:00:00-08:00</updated><id>https://www.desgard.com/2020/09/16/cocoapods-story-4</id><content type="html" xml:base="https://www.desgard.com/2020/09/16/cocoapods-story-4.html">&lt;h1 id=&quot;引子&quot;&gt;引子&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;在上文 &lt;a href=&quot;/2020/09/02/cocoapods-story-3.html&quot;&gt;CocoaPods 命令解析&lt;/a&gt; 中，我们通过对 &lt;strong&gt;CLAide&lt;/strong&gt; 的源码分析，了解了 CocoaPods 是如何处理 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod&lt;/code&gt; 命令，多级命令又是如何组织和嵌套的，并解释了命令行输出所代表的含义。今天我们开始学习 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 。&lt;br /&gt;
&lt;br /&gt;大多 iOS 工程师最先接触到的 CocoaPods 概念应该是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 属于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cocoapods-core&lt;/code&gt;（以下简称 &lt;strong&gt;Core&lt;/strong&gt;） 的两大概念之一。另外一个则是 &lt;a href=&quot;https://guides.cocoapods.org/syntax/podspec.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt;&lt;/a&gt; (用于描述 Pod Library 的配置文件)，只有当你需要开发 Pod 组件的时候才会接触。&lt;br /&gt;
&lt;br /&gt;在介绍 Podfile 的内容结构之前，必须要谈谈 Xcode 的工程结构。
&lt;a name=&quot;7ae87fa4&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;xcode-工程结构&quot;&gt;Xcode 工程结构&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;我们先来看一个极简 Podfile 声明：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Demo'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Alamofire'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./Alamofire'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;它编译后的工程目录如下：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1599993134156-fe45b615-5b0f-4e71-bd5c-a03cd6b55217.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;如你所见 Podfile 的配置是围绕 Xcode 的这些工程结构：**Workspace、Project、Target 及 Build Setting **来展开的。&lt;br /&gt;作为包管理工具 CocoaPods 将所管理的 Pods 依赖库组装成一个个 Target，统一放入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods project&lt;/code&gt; 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Demo target&lt;/code&gt;，并自动配置好 Target 间的依赖关系。&lt;br /&gt;
&lt;br /&gt;之后将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Example&lt;/code&gt; 主工程和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods&lt;/code&gt; 工程一起打包到新建的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Example.workspace&lt;/code&gt;，配好主工程与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods&lt;/code&gt; 工程之间的依赖，完成最终转换。&lt;br /&gt;
&lt;br /&gt;接下来，我们来聊一聊这些 Xcode 结构：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;9f0655f1&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;target---最小可编译单元&quot;&gt;Target - 最小可编译单元&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;a href=&quot;https://developer.apple.com/library/archive/featuredarticles/XcodeConcepts/Concept-Targets.html#//apple_ref/doc/uid/TP40009328-CH4-SW1&quot;&gt;target&lt;/a&gt; specifies a product to build and contains the instructions for building the product from a set of files in a project or workspace.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;strong&gt;首先是 Target，它作为工程中最小的可编译单元，根据 **&lt;a href=&quot;https://www.objc.io/issues/6-build-tools/build-process/#controlling-the-build-process&quot;&gt;**Build Phases**&lt;/a&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/featuredarticles/XcodeConcepts/Concept-Build_Settings.html#//apple_ref/doc/uid/TP40009328-CH6-SW1&quot;&gt;**Build Settings**&lt;/a&gt;&lt;/strong&gt; 将源码作为输入，经编译后输出结果产物**。&lt;br /&gt;其输出结果可以是链接库、可执行文件或者资源包等，具体细节如下：&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Build Setting：比如指定使用的编译器，目标平台、编译参数、头文件搜索路径等；&lt;/li&gt;
  &lt;li&gt;Build 时的前置依赖、执行的脚本文件；&lt;/li&gt;
  &lt;li&gt;Build 生成目标的签名、Capabilities 等属性；&lt;/li&gt;
  &lt;li&gt;Input：哪些源码或者资源文件会被编译打包；&lt;/li&gt;
  &lt;li&gt;Output：哪些静态库、动态库会被链接；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;8fc0f046&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;project---targets-的载体&quot;&gt;Project - Targets 的载体&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;An &lt;a href=&quot;https://developer.apple.com/library/archive/featuredarticles/XcodeConcepts/Concept-Projects.html#//apple_ref/doc/uid/TP40009328-CH5-SW1&quot;&gt;Xcode project&lt;/a&gt; is a repository for all the files, resources, and information required to build one or more software products.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;strong&gt;Project 就是一个独立的 Xcode 工程，作为一个或多个 Targets 的资源管理器，本身无法被编译。&lt;/strong&gt;&lt;br /&gt;Project 所管理的资源都来自它所包含的 Targets。特点如下：&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;至少包含一个或多个可编译的 Target；&lt;/li&gt;
  &lt;li&gt;为所包含的 Targets 定义了一份默认编译选项，如果 Target 有自己的配置，则会覆盖 Project 的预设值；&lt;/li&gt;
  &lt;li&gt;能将其他 Project 作为依赖嵌入其中；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;下图为 Project 与所包含对 Targets 的关系&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1600222941789-99a85a65-f93f-48ce-92c2-53b85c576bfd.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;be439828&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;workspace---容器&quot;&gt;Workspace - 容器&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;a href=&quot;https://developer.apple.com/library/archive/featuredarticles/XcodeConcepts/Concept-Workspace.html&quot;&gt;workspace&lt;/a&gt; is an Xcode document that groups projects&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;strong&gt;作为纯粹的项目容器，Workspace 不参与任何编译链接过程，仅用于管理同层级的 Project&lt;/strong&gt;，其特点：&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Workspace 可以包含多个 Projects&lt;/strong&gt;；&lt;/li&gt;
  &lt;li&gt;同一个 Workspace 中的 Proejct 文件对于其他 Project 是默认可见的，&lt;strong&gt;这些 Projcts 会共享 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workspace build directory&lt;/code&gt;&lt;/strong&gt; ；&lt;/li&gt;
  &lt;li&gt;一个 Xcode Project 可以被包含在多个不同的 Workspace 中，因为每个 Project 都有独立的 Identity，默认是 Project Name；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1599993134181-70da3da0-70d6-46ff-b9ad-358e77f64466.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;db334362&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;scheme---描述-build-过程&quot;&gt;Scheme - 描述 Build 过程&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;An &lt;a href=&quot;https://developer.apple.com/library/archive/featuredarticles/XcodeConcepts/Concept-Schemes.html&quot;&gt;Xcode scheme&lt;/a&gt; defines a collection of targets to build, a configuration to use when building, and a collection of tests to execute.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;strong&gt;Scheme 是对于整个 Build 过程的一个抽象&lt;/strong&gt;，它描述了 Xcode 应该使用哪种 &lt;a href=&quot;https://medium.com/practical-ios-development/some-practical-uses-for-xcode-build-schemes-and-build-configurations-swift-e50d15a1304f&quot;&gt;Build Configurations&lt;/a&gt; 、执行什么任务、环境参数等来构建我们所需的 Target。&lt;br /&gt;
&lt;br /&gt;Scheme 中预设了六个主要过程： &lt;strong&gt;Build、Run、Test、Profile、Analyze、Archive&lt;/strong&gt;。包括了我们对 Target 的所有操作，每一个过程都可以单独配置。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1600222941772-4998de2f-7375-4019-b665-77d5e7692c79.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;CocoaPods-Core&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;cocoapods-core&quot;&gt;CocoaPods-Core&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/CocoaPods/Core&quot;&gt;CocoaPods-Core&lt;/a&gt; gem provides support to work with the models of CocoaPods, for example the Podspecs or the Podfile.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;CocoaPods-Core 用于 CocoaPods 中配置文件的解析，包括 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podspec&lt;/code&gt; 以及解析后的依赖锁存文件，如 Podfile.lock 等。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;49aa38a1&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;cocoapods-core-的文件构成&quot;&gt;CocoaPods-Core 的文件构成&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;照例，我们先通过入口文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/cocoapods-core.rb&lt;/code&gt; 来一窥 Core 项目的主要文件：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Pod&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/gem_version'&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PlainInformative&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StandardError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Informative&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PlainInformative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pathname'&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/vendor'&lt;/span&gt;
   
  &lt;span class=&quot;c1&quot;&gt;# 用于存储 PodSpec 中的版本号&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/version'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# pod 的版本限制&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Requirement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/requirement'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 配置 Podfile 或 PodSpec 中的 pod 依赖&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Dependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/dependency'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 获取 Github 仓库信息&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:GitHub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/github'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 处理 HTTP 请求&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/http'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 记录最终 pod 的依赖信息&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Lockfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/lockfile'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 记录 SDK 的名称和 target 版本&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/platform'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 对应 Podfile 文件的 class&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Podfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/podfile'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 管理 PodSpec 的集合&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/source'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 管理基于 CDN 来源的 PodSpec 集合&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:CDNSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/cdn_source'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 管理基于 Trunk 来源的 PodSpec 集合&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:TrunkSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/trunk_source'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 对应 PodSpec 文件的 class&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/specification'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 将 pod 信息转为 .yml 文件，用于 lockfile 的序列化&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:YAMLHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/yaml_helper'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 记录 pod 依赖类型，是静态库/动态库&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:BuildType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/build_type'&lt;/span&gt;
  
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;Spec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;将这些 Model 类按照对应的依赖关系进行划分，层级如下：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1599993134206-3a7f8fdb-611d-44c1-a2c4-026365408d5e.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;7b11f844&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;podfile-的主要数据结构&quot;&gt;Podfile 的主要数据结构&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;先来了解 Podfile 的主要数据结构&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;Specification&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;specification&quot;&gt;Specification&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Specification provides a DSL to describe a Pod. A pod is defined as a library originating from a source. A specification can support detailed attributes for modules of code  through subspecs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;Specification 即存储 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PodSpec&lt;/code&gt; 的内容，是用于&lt;strong&gt;描述一个 Pod 库的源代码和资源将如何被打包编译成链接库或 framework&lt;/strong&gt;，后续将会介绍更多的细节。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;TargetDefinition&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;targetdefinition&quot;&gt;TargetDefinition&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;The TargetDefinition stores the information of a CocoaPods static library. The target definition can be linked with one or more targets of the user project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TargetDefinition&lt;/code&gt; 是一个多叉树结构，每个节点记录着 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 中定义的 Pod 的 Source 来源、Build Setting、Pod 子依赖等。该树的根节点指向 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root_target_definitions&lt;/code&gt; 则记录着所有的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TargetDefinition&lt;/code&gt; 的根节点，正常情况下该 list 中只有一个 root 即 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;**Pods.project**&lt;/code&gt;。&lt;br /&gt;
&lt;br /&gt;为了便于阅读，简化了大量的 DSL 配置相关的方法和属性并对代码顺序做了调整，大致结构如下：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Pod&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Podfile&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TargetDefinition&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# 父节点: TargetDefinition 或者 Podfile&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:parent&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 子节点: TargetDefinition&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:children&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 记录 tareget 的配置信息&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:internal_hash&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;root?&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Podfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root?&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;podfile&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parent&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
       
      &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;对应上一节 Xcode 工程结构中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 关系如下：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1599993134189-fdfc2639-938d-47c7-ad69-1a8141502f8f.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;CocoaPods 正是巧妙利用了 Xcode 工程结构的特点，引入  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods.project&lt;/code&gt; 这一中间层，将主工程的 Pods 依赖全部转接到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods.project&lt;/code&gt; 上，最后再将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods.project&lt;/code&gt; 作为主项目的依赖。尽管这么做也受到了一些质疑和诟病（所谓的侵入性太强），但笔者的观点是，正得益于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods.project&lt;/code&gt; 这一设计隔绝了第三方依赖库对于主项目的频繁更改，也便于后续的管理和更新，体现了软件工程中的&lt;strong&gt;开放-关闭原则&lt;/strong&gt;。&lt;br /&gt;
&lt;br /&gt;比如，在 Pod 1.7.0 版本中支持的 &lt;strong&gt;&lt;a href=&quot;http://blog.cocoapods.org/CocoaPods-1.7.0-beta/&quot;&gt;Multiple Xcodeproj Generation&lt;/a&gt;&lt;/strong&gt; 就是解决随着项目的迭代而日益增大的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods&lt;/code&gt; project 的问题。试想当你的项目中存在上百个依赖库，每个依赖库的变更都会影响到你的主工程，这将是非常可怕的问题。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;Podfile&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;podfile&quot;&gt;Podfile&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Podfile is a specification that describes the dependencies of the targets of one or more Xcode projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 是用于描述一个或多个 Xcode Project 中各个 Targets 之间的依赖关系。&lt;br /&gt;
&lt;br /&gt;这些 Targets 的依赖关系对应的就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TargetDefinition&lt;/code&gt; 树中的各子节点的层级关系。如前面所说，&lt;strong&gt;有了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 这个根节点的指向，仅需对依赖树进行遍历，就能轻松获取完整的依赖关系&lt;/strong&gt;。&lt;br /&gt;
&lt;br /&gt;有了这层依赖树，对于某个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 库的更新即是对树节点的更新，便可轻松的分析出此次更新涉及的影响。&lt;br /&gt;
&lt;br /&gt;简化调整后的 Podfile 代码如下：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/podfile/dsl'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-core/podfile/target_definition'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Pod&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Podfile&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Podfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DSL&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# podfile 路径&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:defined_in_file&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 所有的 TargetDefinition 的根节点, 正常只有一个，即 Pods.project target&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:root_target_definitions&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 记录 Pods.project 项目的配置信息&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:internal_hash&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 当前 DSL 解析使用的 TargetDefinition&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:current_target_definition&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;直接看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsl.rb&lt;/code&gt;，该文件内部定义了 Podfile DSL 支持的所有方法。通过 &lt;strong&gt;include&lt;/strong&gt; 的使用将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pod::Podfile::DSL&lt;/code&gt; 模块 Mix-in 后插入到 Podfile 类中。&lt;br /&gt;想了解更多 Mix-in 特性，移步 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA5MTM1NTc2Ng==&amp;amp;mid=2458324049&amp;amp;idx=1&amp;amp;sn=8de53f46fbc52427cdb660b427cb8226&amp;amp;chksm=870e0348b0798a5ed6d14715cc4a1af93cd168a5e15198acfb3b84ea49506b0f815fa891d683&amp;amp;token=883887783&amp;amp;lang=zh_CN#rd&quot;&gt;Ruby 特性之 Mix-in&lt;/a&gt;。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;Lockfile&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;lockfile&quot;&gt;Lockfile&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Lockfile stores information about the pods that were installed by  CocoaPods.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;strong&gt;Lockfile，顾名思义是用于记录最后一次 CocoaPods 所安装的 Pod 依赖库版本的信息快照。也就是生成的 **&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile.lock&lt;/code&gt;&lt;/strong&gt;。**&lt;br /&gt;
&lt;br /&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt; 过程，Podfile 会结合它来确认最终所安装的 Pod 版本，固定 Pod 依赖库版本防止其自动更新。Lockfile 也作为 Pods 状态清单 (mainfest)，用于记录安装过程的中哪些 Pod 需要被删除或安装或更新等。&lt;br /&gt;
&lt;br /&gt;以开头的 Podfile 经 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt; 所生成的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile.lock&lt;/code&gt; 为例：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;PODS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Alamofire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;DEPENDENCIES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Alamofire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`./Alamofire`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;EXTERNAL&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SOURCES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Alamofire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./Alamofire&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;SPEC&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CHECKSUMS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Alamofire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dda98a0ed7eec4bdcd5fe3cdd35fcd2b3022825&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;PODFILE&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;da12cc12a30cfb48ebc5d14e8f51737ab65e8241&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;COCOAPODS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;我们来分析一下，通过该 Lockfile 能够获取哪些信息：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Key&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;含义&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;PODS&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;记录所有 Pod 库的具体安装版本号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;DEPENDENCIES&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;记录各 Pod 库之间的相互依赖关系，由于这里只有 Alamofire 且它无其他依赖，暂时无关看出区别&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;EXTERNAL SOURCES&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;记录部分通过外部源的 Pod 库（Git 引入、Path 引入）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;SPEC CHECKSUMS&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;记录当前各 Pod 库的 Podspec 文件 Hash 值，其实就是文件的 md5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;PODFILE CHECKSUM&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;记录 Podfile 文件的 Hash 值，同样是 md5，确认是否有变更&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;COCOAPODS&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;记录上次所使用的 CocoaPods 版本&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&quot;80b7b70d&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;podfile-内容加载&quot;&gt;Podfile 内容加载&lt;/h2&gt;

&lt;p&gt;&lt;a name=&quot;8d8c5129&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;podfile-文件类型&quot;&gt;Podfile 文件类型&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;你可以在 CocoaPods 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/lib/cocoapods/config.rb&lt;/code&gt; 找到 Podfile 所支持的文件类型：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;PODFILE_NAMES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
   &lt;span class=&quot;s1&quot;&gt;'CocoaPods.podfile.yaml'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s1&quot;&gt;'CocoaPods.podfile'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s1&quot;&gt;'Podfile'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s1&quot;&gt;'Podfile.rb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;CocoaPods 按照上述命名优先级来查找工程目录下所对应的 Podfile 文件。当发现目录中存在 &lt;strong&gt;CocoaPods.podfile.yaml&lt;/strong&gt; 文件时会优先加载。很多同学可能只知道到 Podfile 支持 Ruby 的文件格式，而不了解它还支持了 YAML 格式。YAML 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YAML Ain't Markup Language&lt;/code&gt; 的缩写，其 &lt;a href=&quot;https://yaml.org/&quot;&gt;官方定义&lt;/a&gt;：&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;YAML is a human friendly data serialization standard for all programming languages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;它是一种面向工程师友好的序列化语言。我们的 Lockfile 文件就是以 YAML 格式写入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile.lock&lt;/code&gt; 中的。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;93616363&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;podfile-文件读取&quot;&gt;Podfile 文件读取&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;回到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/cocoapods-core/podfile.rb&lt;/code&gt; 来看读取方法：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Pod&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Podfile&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Podfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DSL&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exist?&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Informative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;No Podfile exists at path `&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`.&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;# 这里我们可以看出，Podfile 目前已经支持了结尾是 .podfile 和 .rb 后缀的文件名&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 其实是为了改善很多编译器使用文件后缀来确认 filetype，比如 vim&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 相比与 Podfile 这个文件名要更加的友好&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extname&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.podfile'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.rb'&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Podfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_ruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.yaml'&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 现在也支持了 .yaml 格式&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Podfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_yaml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Informative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Unsupported Podfile format `&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`.&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from_file&lt;/code&gt; 在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt; 命令执行后的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verify_podfile_exists!&lt;/code&gt; 中被调用的：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;verify_podfile_exists!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;podfile&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Informative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;No `Podfile' found in the project directory.&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;而 Podfile 文件的读取就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.podfile&lt;/code&gt;  里触发的，代码在 CocoaPods 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.rb&lt;/code&gt; 文件中：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;podfile_path_in_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;PODFILE_NAMES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;file?&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;podfile_path&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@podfile_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;podfile_path_in_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;installation_root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;podfile&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@podfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Podfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;podfile_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;podfile_path&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;这里的方法 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;podfile&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;podfile_path&lt;/code&gt; 都是 lazy 加载的。最后 Core 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from_file&lt;/code&gt; 将依据目录下的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 文件类型选择调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from_yaml&lt;/code&gt; 或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from_ruby&lt;/code&gt;。&lt;br /&gt;
&lt;br /&gt;从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pod::Command::Install&lt;/code&gt; 命令到 Podfile 文件加载的调用栈如下：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1599993134203-782e510d-c084-4b57-98fe-970f5a38cc79.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;28797697&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;podfile-from-ruby-解析&quot;&gt;Podfile From Ruby 解析&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;当我们通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod init&lt;/code&gt; 来初始化 CocoaPods 项目时，默认生成的 Podfile 名称就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;，那就从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile.from_ruby&lt;/code&gt; 开始。&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_ruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ①&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'r:utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 兼容 1.9 版本的 Rubinius 中的编码问题&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UTF-8'&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'UTF-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 对 Podfile 中不规范的单引号或双引号进行检查，并进行自动修正，及抛出错误&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tr!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'“”‘’‛'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%(&quot;&quot;''')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;CoreUI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;warn&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;...&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ②&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;podfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Podfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	        &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Invalid `&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;` file: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
   	     &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DSLError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;podfile&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;strong&gt;①&lt;/strong&gt; 是对 Podfile 内容的读取和编码，同时对可能出现的单引号和双引号的匹配问题进行了修正。&lt;br /&gt;&lt;strong&gt;②&lt;/strong&gt; 以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;block&lt;/code&gt; 为入参进行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;podfile&lt;/code&gt; 类的初始化并将其放回，保存在全局的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.podfile&lt;/code&gt; 中。&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tips: 如果要在 Ruby 对象的初始化中传入参数，需要重载 Object 的 &lt;a href=&quot;https://ruby-doc.org/docs/ruby-doc-bundle/UsersGuide/rg/objinitialization.html&quot;&gt;initialize&lt;/a&gt; 方法，这里的 Podfile.new(…) 本质上是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialize&lt;/code&gt; 的方法调用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialize&lt;/code&gt; 方法所传入的尾随闭包 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;block&lt;/code&gt; 的核心在于内部的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt; 函数（在 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/187272448&quot;&gt;CocoaPods 核心组件&lt;/a&gt; 中有提到）：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;它将 Podfile 中的文本内容转化为方法执行，也就是说里面的参数是一段 Ruby 的代码字符串，通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt; 方法可以直接执行。&lt;br /&gt;继续看 Podfile 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialize&lt;/code&gt; 方法：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defined_in_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internal_hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defined_in_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defined_in_file&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@internal_hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internal_hash&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;default_target_def&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TargetDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Pods'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;default_target_def&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@root_target_definitions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_target_def&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@current_target_definition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_target_def&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;instance_eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@root_target_definitions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;它定义了三个参数：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;参数&lt;/th&gt;
      &lt;th&gt;定义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;defined_in_file&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 文件路径&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;internal_hash&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;通过 yaml 序列化得到的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 配置信息，保存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;internal_hash&lt;/code&gt; 中&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;block&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;用于映射 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 的 DSL 配置&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;需要注意的是，通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from_ruby&lt;/code&gt; 初始化的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 只传入了参数 1 和 3，参数 2 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;internal_hash&lt;/code&gt; 则是提供给 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from_yaml&lt;/code&gt; 的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;当 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;block&lt;/code&gt; 存在，会初始化名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods&lt;/code&gt; 的 TargetDefinition 对象，用于保存 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods project&lt;/code&gt; 的相关信息和 Pod 依赖。然后调用 &lt;em&gt;&lt;a href=&quot;https://ruby-doc.org/core-2.7.0/BasicObject.html&quot;&gt;instance_eval&lt;/a&gt;&lt;/em&gt; 执行传入的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;block&lt;/code&gt;，将 Podfile 的 DSL 内容转换成对应的方法和参数，最终将参数存入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;internal_hash&lt;/code&gt; 和对应的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target_definitions&lt;/code&gt; 中。&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tips: 在 Ruby 中存在两种不同的方式来执行代码块 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;block&lt;/code&gt;，分别是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instance_eval&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class_eval&lt;/code&gt;。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class_eval&lt;/code&gt; 的执行上下文与调用类相关，调用者是类名或者模块名，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instance_eval&lt;/code&gt; 的调用者可以是类的实例或者类本身。细节看 &lt;a href=&quot;https://stackoverflow.com/questions/900419/how-to-understand-the-difference-between-class-eval-and-instance-eval&quot;&gt;StackoverFlow&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&quot;434ab4f0&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;podfile-from-yaml-解析&quot;&gt;Podfile From YAML 解析&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;YAML 格式的 Podfile 加载需要借助 &lt;strong&gt;YAMLHelper&lt;/strong&gt; 类来完成，YAMLHelper 则是基于 &lt;a href=&quot;https://github.com/ruby/yaml&quot;&gt;yaml&lt;/a&gt; 的简单封装。&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_yaml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'r:utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
    &lt;span class=&quot;c1&quot;&gt;# 为了解决 Rubinius incomplete encoding in 1.9 mode&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;# https://github.com/rubinius/rubinius/issues/1539&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UTF-8'&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'UTF-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YAMLHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;internal_hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dup&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target_definitions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internal_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'target_definitions'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;podfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Podfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internal_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target_definitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;definition_hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;definition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TargetDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;definition_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;podfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;podfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root_target_definitions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;definition&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;podfile&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from_yaml&lt;/code&gt; 将文件内容转成 Ruby hash 后转入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from_hash&lt;/code&gt; 方法。&lt;br /&gt;
&lt;br /&gt;区别于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from_ruby&lt;/code&gt;，这里调用的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialize&lt;/code&gt; 将读取的 hash 直接存入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;internal_hash&lt;/code&gt;，然后利用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TargetDefinition.from_hash&lt;/code&gt; 来完成的 hash 内容到 targets 的转换，因此，这里无需传入 block 进行 DSL 解析和方法转换。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;32e84827&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;podfile-内容解析&quot;&gt;Podfile 内容解析&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;前面提到 Podfile 的内容最终保存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;internal_hash&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target_definitions&lt;/code&gt; 中，本质上都是使用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hash&lt;/code&gt; 来保存数据。由于 YAML 文件格式的 Podfile 加载后就是 hash 对象，无需过多加工。唯一需要处理的是递归调用 TargetDefinition 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from_hash&lt;/code&gt; 方法来解析 target 子节点的数据。&lt;br /&gt;
&lt;br /&gt;因此，接下来的内容解析主要针对 Ruby 文件格式的 DSL 解析，我们以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod&lt;/code&gt; 方法为例：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Example'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Alamofire'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;当解析到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod 'Alamofire'&lt;/code&gt; 时，会先通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval(contents, nil, path.to_s&lt;/code&gt; 将其转换为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dsl.rb&lt;/code&gt; 中的方法：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StandardError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'A dependency requires a name.'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_target_definition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;store_pod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;name 为 Alamofire，由于我们没有指定对应的 Alamofire 版本，默认会使用最新版本。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requirements&lt;/code&gt;  是控制 该 pod 来源获取或者 pod target 的编译选项等，例如：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Alamofire'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0.9'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Alamofire'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:modular_headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Alamofire'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:configurations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Debug'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Beta'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Alamofire'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://github.com/CocoaPods/Specs.git'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Alamofire'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:subspecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Attribute'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'QuerySet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Alamofire'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:testspecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'UnitTests'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SomeOtherTests'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Alamofire'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'~/Documents/AFNetworking'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Alamofire'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:podspec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://example.com/Alamofire.podspec'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Alamofire'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://github.com/looseyi/Alamofire.git'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0.7.0'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tips：requirements 最终是以 Gem::Requirement 对象来保存的。关于 pod 详细说明请移步：&lt;a href=&quot;https://guides.cocoapods.org/syntax/podfile.html#pod&quot;&gt;Podfile 手册&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;对 name 进行校验后，直接转入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_target_definition&lt;/code&gt; 毕竟 Pod 库都是存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods.project&lt;/code&gt; 之下：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;store_pod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_subspecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This parse method must be called first&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;parse_inhibit_warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;parse_modular_headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;parse_configuration_whitelist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;parse_project_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;get_hash_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dependencies'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_hash_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HASH_KEYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StandardError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Unsupported hash key `&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;internal_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internal_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;internal_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_hash_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HASH_KEYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StandardError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Unsupported hash key `&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;internal_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;经过一系列检查之后，调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_hash_value&lt;/code&gt; 获取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;internal_hash&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dependencies&lt;/code&gt;，并将 name 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requirements&lt;/code&gt; 选项存入。&lt;br /&gt;
&lt;br /&gt;这里的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dependencies&lt;/code&gt; key 是定义在 TargetDefinition 文件的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;**HASH_KEYS**&lt;/code&gt;，表示 Core 所支持的配置参数:&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;HASH_KEYS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(
    name
    platform
    podspecs
    exclusive
    link_with
    link_with_first_target
    inhibit_warnings
    use_modular_headers
    user_project_path
    build_configurations
    project_names
    dependencies
    script_phases
    children
    configuration_pod_whitelist
    uses_frameworks
    swift_version_requirements
    inheritance
    abstract
    swift_version
)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tips：freeze 表示该数组不可修改。另外，%w 用于表示其中元素被单引号括起的数组。
%W(#{foo} Bar Bar\ with\ space)
=&amp;gt; [“Foo”, “Bar”, “Bar with space”]
对应的还有 %W 表示其中元素被双引号括起的数组。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;整个映射过程如下：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1599993134247-591416bf-8bbb-46cb-a8b9-86c41721acde.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;f7ab0349&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;精细化的-podfile-配置&quot;&gt;精细化的 Podfile 配置&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;最后一节让我们来展示一下 💪，看看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 所谓的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;targets&lt;/code&gt; 之间的依赖关系可以玩出什么花来 😂。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;204d60fe&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;target-嵌套&quot;&gt;Target 嵌套&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;最简单的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 就是文章开头所展示的，不过在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 中还可以对 Target 进行嵌套使用。假设在我们的主工程同时维护了三个项目，它们都依赖了 Alamofire，通过俄罗斯套娃就能轻松满足条件：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Demo1'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Alamofire'&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Demo2'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Demo3'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;编译后的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods.project&lt;/code&gt; 项目结构如下：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1600222941775-314f4f32-ae1d-4bb2-befc-8f46bf25c105.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;我们知道，CocoaPods 在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods.project&lt;/code&gt; 中为每个在 Podfile 中声明的 Target 生成一个与之对应的专属 Target 来集成它的 Pod 依赖。对于有依赖关系的 Target 其生成的专属 Target 名称则会按照依赖关系叠加来命名，如  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target Demo3&lt;/code&gt; 的专属 Target 名称为 &lt;strong&gt;Pods-Demo1-Demo2-Demo3&lt;/strong&gt;。安装完成后主项目将会引入该专属 Target 来完成依赖关联，如 Demo3：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1600222941734-6b94dfeb-d608-4240-9a38-ebb812da18d0.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;关于 Target 嵌套，一个父节点是可以有多个子节点的：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Demo1'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Alamofire'&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Demo2'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'RxSwift'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Demo3'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SwiftyJSON'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;f52857bd&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;abstract-target&quot;&gt;Abstract Target&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;上面例子中，由于 Demo1 与 Demo2 都需要依赖 Alamofire，我们通过 Target 嵌套让 Demo2 来继承 Demo1 的 Pods 库依赖。这么做可能会有一个限制，就是当 Demo1 的 Pod 依赖并非 Demo2 所需要的时候，就会有依赖冗余。此时就需要 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Abstract Target&lt;/code&gt; 登场了。例如：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;abstract_target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Networking'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Alamofire'&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Demo1'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'RxSwift'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Demo2'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ReactCocoa'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Demo3'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;将网络请求的 pod 依赖抽象到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Networking&lt;/code&gt; target 中，这样就能避免 Demo2 对 RxSwift 的依赖。这种方式配置所生成的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods.project&lt;/code&gt; 并不会存在名称为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Networking&lt;/code&gt; 的 Target，它仅会在主工程的专属 Target 中留下印记：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1600222941749-f98999d7-0a31-4523-bd31-8646c92f05fc.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;25f9c7fa&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;本文结合 Xcode 工程结构来展开 CocoaPods-Core 的 Podfile 之旅，主要感受如下：&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;再一次感受了 Ruby 语言的动态之美，给我一个字符串，还你一个未知世界；&lt;/li&gt;
  &lt;li&gt;结合 Xcode 工程结构更好的理解了 Podfile 的设计初衷，&lt;strong&gt;基础知识很重要；&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;所谓“算法无用论”这种事情，在计算机的世界是不存在的，没有好的数据结构知识如何更好的抽象；&lt;/li&gt;
  &lt;li&gt;了解 Podfile 的 DSL 是如何映射到内存中，又是如何来存储每个关键数据的&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;c6813027&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;知识点问题梳理&quot;&gt;知识点问题梳理&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;这里罗列了四个问题用来考察你是否已经掌握了这篇文章，如果没有建议你加入**收藏 **再次阅读：&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;说说 TargetDefinition 的数据结构 ？&lt;/li&gt;
  &lt;li&gt;说说 TargetDefinition 与 Xcode Project 的关系 ？&lt;/li&gt;
  &lt;li&gt;Podfile 的文件格式有几种，分别是如何加载 ？&lt;/li&gt;
  &lt;li&gt;Lockfile 和 Podfile 的关系&lt;/li&gt;
&lt;/ol&gt;</content><author><name>冬瓜</name><email>gua@desgard.com</email></author><category term="CocoaPods 历险记" /><category term="Ruby" /><summary type="html">引子 在上文 CocoaPods 命令解析 中，我们通过对 CLAide 的源码分析，了解了 CocoaPods 是如何处理 pod 命令，多级命令又是如何组织和嵌套的，并解释了命令行输出所代表的含义。今天我们开始学习 Podfile 。 大多 iOS 工程师最先接触到的 CocoaPods 概念应该是 Podfile，而 Podfile 属于 cocoapods-core（以下简称 Core） 的两大概念之一。另外一个则是 Podspec (用于描述 Pod Library 的配置文件)，只有当你需要开发 Pod 组件的时候才会接触。 在介绍 Podfile 的内容结构之前，必须要谈谈 Xcode 的工程结构。 Xcode 工程结构 我们先来看一个极简 Podfile 声明： target 'Demo' do pod 'Alamofire', :path =&amp;gt; './Alamofire' end 它编译后的工程目录如下： 如你所见 Podfile 的配置是围绕 Xcode 的这些工程结构：**Workspace、Project、Target 及 Build Setting **来展开的。作为包管理工具 CocoaPods 将所管理的 Pods 依赖库组装成一个个 Target，统一放入 Pods project 中的 Demo target，并自动配置好 Target 间的依赖关系。 之后将 Example 主工程和 Pods 工程一起打包到新建的 Example.workspace，配好主工程与 Pods 工程之间的依赖，完成最终转换。 接下来，我们来聊一聊这些 Xcode 结构： Target - 最小可编译单元 A target specifies a product to build and contains the instructions for building the product from a set of files in a project or workspace. 首先是 Target，它作为工程中最小的可编译单元，根据 ****Build Phases** 和 **Build Settings** 将源码作为输入，经编译后输出结果产物**。其输出结果可以是链接库、可执行文件或者资源包等，具体细节如下： Build Setting：比如指定使用的编译器，目标平台、编译参数、头文件搜索路径等； Build 时的前置依赖、执行的脚本文件； Build 生成目标的签名、Capabilities 等属性； Input：哪些源码或者资源文件会被编译打包； Output：哪些静态库、动态库会被链接； Project - Targets 的载体 An Xcode project is a repository for all the files, resources, and information required to build one or more software products. Project 就是一个独立的 Xcode 工程，作为一个或多个 Targets 的资源管理器，本身无法被编译。Project 所管理的资源都来自它所包含的 Targets。特点如下： 至少包含一个或多个可编译的 Target； 为所包含的 Targets 定义了一份默认编译选项，如果 Target 有自己的配置，则会覆盖 Project 的预设值； 能将其他 Project 作为依赖嵌入其中； 下图为 Project 与所包含对 Targets 的关系 Workspace - 容器 A workspace is an Xcode document that groups projects 作为纯粹的项目容器，Workspace 不参与任何编译链接过程，仅用于管理同层级的 Project，其特点： Workspace 可以包含多个 Projects； 同一个 Workspace 中的 Proejct 文件对于其他 Project 是默认可见的，这些 Projcts 会共享 workspace build directory ； 一个 Xcode Project 可以被包含在多个不同的 Workspace 中，因为每个 Project 都有独立的 Identity，默认是 Project Name； Scheme - 描述 Build 过程 An Xcode scheme defines a collection of targets to build, a configuration to use when building, and a collection of tests to execute. Scheme 是对于整个 Build 过程的一个抽象，它描述了 Xcode 应该使用哪种 Build Configurations 、执行什么任务、环境参数等来构建我们所需的 Target。 Scheme 中预设了六个主要过程： Build、Run、Test、Profile、Analyze、Archive。包括了我们对 Target 的所有操作，每一个过程都可以单独配置。 CocoaPods-Core The CocoaPods-Core gem provides support to work with the models of CocoaPods, for example the Podspecs or the Podfile. CocoaPods-Core 用于 CocoaPods 中配置文件的解析，包括 Podfile、Podspec 以及解析后的依赖锁存文件，如 Podfile.lock 等。 CocoaPods-Core 的文件构成 照例，我们先通过入口文件 lib/cocoapods-core.rb 来一窥 Core 项目的主要文件： module Pod require 'cocoapods-core/gem_version' class PlainInformative &amp;lt; StandardError; end class Informative &amp;lt; PlainInformative; end require 'pathname' require 'cocoapods-core/vendor' # 用于存储 PodSpec 中的版本号 autoload :Version, 'cocoapods-core/version' # pod 的版本限制 autoload :Requirement, 'cocoapods-core/requirement' # 配置 Podfile 或 PodSpec 中的 pod 依赖 autoload :Dependency, 'cocoapods-core/dependency' # 获取 Github 仓库信息 autoload :GitHub, 'cocoapods-core/github' # 处理 HTTP 请求 autoload :HTTP, 'cocoapods-core/http' # 记录最终 pod 的依赖信息 autoload :Lockfile, 'cocoapods-core/lockfile' # 记录 SDK 的名称和 target 版本 autoload :Platform, 'cocoapods-core/platform' # 对应 Podfile 文件的 class autoload :Podfile, 'cocoapods-core/podfile' # 管理 PodSpec 的集合 autoload :Source, 'cocoapods-core/source' # 管理基于 CDN 来源的 PodSpec 集合 autoload :CDNSource, 'cocoapods-core/cdn_source' # 管理基于 Trunk 来源的 PodSpec 集合 autoload :TrunkSource, 'cocoapods-core/trunk_source' # 对应 PodSpec 文件的 class autoload :Specification, 'cocoapods-core/specification' # 将 pod 信息转为 .yml 文件，用于 lockfile 的序列化 autoload :YAMLHelper, 'cocoapods-core/yaml_helper' # 记录 pod 依赖类型，是静态库/动态库 autoload :BuildType, 'cocoapods-core/build_type' ... Spec = Specification end 将这些 Model 类按照对应的依赖关系进行划分，层级如下： Podfile 的主要数据结构 先来了解 Podfile 的主要数据结构 Specification The Specification provides a DSL to describe a Pod. A pod is defined as a library originating from a source. A specification can support detailed attributes for modules of code  through subspecs. Specification 即存储 PodSpec 的内容，是用于描述一个 Pod 库的源代码和资源将如何被打包编译成链接库或 framework，后续将会介绍更多的细节。 TargetDefinition The TargetDefinition stores the information of a CocoaPods static library. The target definition can be linked with one or more targets of the user project. TargetDefinition 是一个多叉树结构，每个节点记录着 Podfile 中定义的 Pod 的 Source 来源、Build Setting、Pod 子依赖等。该树的根节点指向 Podfile，而 Podfile 中的 root_target_definitions 则记录着所有的 TargetDefinition 的根节点，正常情况下该 list 中只有一个 root 即 **Pods.project**。 为了便于阅读，简化了大量的 DSL 配置相关的方法和属性并对代码顺序做了调整，大致结构如下： module Pod class Podfile class TargetDefinition # 父节点: TargetDefinition 或者 Podfile attr_reader :parent # 子节点: TargetDefinition attr_reader :children # 记录 tareget 的配置信息 attr_accessor :internal_hash def root? parent.is_a?(Podfile) || parent.nil? end def root if root? self else parent.root end end def podfile root.parent end # ... end end 对应上一节 Xcode 工程结构中的 Podfile 关系如下： CocoaPods 正是巧妙利用了 Xcode 工程结构的特点，引入  Pods.project 这一中间层，将主工程的 Pods 依赖全部转接到 Pods.project 上，最后再将 Pods.project 作为主项目的依赖。尽管这么做也受到了一些质疑和诟病（所谓的侵入性太强），但笔者的观点是，正得益于 Pods.project 这一设计隔绝了第三方依赖库对于主项目的频繁更改，也便于后续的管理和更新，体现了软件工程中的开放-关闭原则。 比如，在 Pod 1.7.0 版本中支持的 Multiple Xcodeproj Generation 就是解决随着项目的迭代而日益增大的 Pods project 的问题。试想当你的项目中存在上百个依赖库，每个依赖库的变更都会影响到你的主工程，这将是非常可怕的问题。 Podfile The Podfile is a specification that describes the dependencies of the targets of one or more Xcode projects. Podfile 是用于描述一个或多个 Xcode Project 中各个 Targets 之间的依赖关系。 这些 Targets 的依赖关系对应的就是 TargetDefinition 树中的各子节点的层级关系。如前面所说，有了 Podfile 这个根节点的指向，仅需对依赖树进行遍历，就能轻松获取完整的依赖关系。 有了这层依赖树，对于某个 Pod 库的更新即是对树节点的更新，便可轻松的分析出此次更新涉及的影响。 简化调整后的 Podfile 代码如下： require 'cocoapods-core/podfile/dsl' require 'cocoapods-core/podfile/target_definition' module Pod class Podfile include Pod::Podfile::DSL # podfile 路径 attr_accessor :defined_in_file # 所有的 TargetDefinition 的根节点, 正常只有一个，即 Pods.project target attr_accessor :root_target_definitions # 记录 Pods.project 项目的配置信息 attr_accessor :internal_hash # 当前 DSL 解析使用的 TargetDefinition attr_accessor :current_target_definition # ... end end 直接看 dsl.rb，该文件内部定义了 Podfile DSL 支持的所有方法。通过 include 的使用将 Pod::Podfile::DSL 模块 Mix-in 后插入到 Podfile 类中。想了解更多 Mix-in 特性，移步 Ruby 特性之 Mix-in。 Lockfile The Lockfile stores information about the pods that were installed by  CocoaPods. Lockfile，顾名思义是用于记录最后一次 CocoaPods 所安装的 Pod 依赖库版本的信息快照。也就是生成的 **Podfile.lock。** 在 pod install 过程，Podfile 会结合它来确认最终所安装的 Pod 版本，固定 Pod 依赖库版本防止其自动更新。Lockfile 也作为 Pods 状态清单 (mainfest)，用于记录安装过程的中哪些 Pod 需要被删除或安装或更新等。 以开头的 Podfile 经 pod install 所生成的 Podfile.lock 为例： PODS: - Alamofire (4.6.0) DEPENDENCIES: - Alamofire (from `./Alamofire`) EXTERNAL SOURCES: Alamofire: :path: &quot;./Alamofire&quot; SPEC CHECKSUMS: Alamofire: 0dda98a0ed7eec4bdcd5fe3cdd35fcd2b3022825 PODFILE CHECKSUM: da12cc12a30cfb48ebc5d14e8f51737ab65e8241 COCOAPODS: 1.10.0.beta.2 我们来分析一下，通过该 Lockfile 能够获取哪些信息： Key 含义 PODS 记录所有 Pod 库的具体安装版本号 DEPENDENCIES 记录各 Pod 库之间的相互依赖关系，由于这里只有 Alamofire 且它无其他依赖，暂时无关看出区别 EXTERNAL SOURCES 记录部分通过外部源的 Pod 库（Git 引入、Path 引入） SPEC CHECKSUMS 记录当前各 Pod 库的 Podspec 文件 Hash 值，其实就是文件的 md5 PODFILE CHECKSUM 记录 Podfile 文件的 Hash 值，同样是 md5，确认是否有变更 COCOAPODS 记录上次所使用的 CocoaPods 版本 Podfile 内容加载 Podfile 文件类型 你可以在 CocoaPods 的 /lib/cocoapods/config.rb 找到 Podfile 所支持的文件类型： PODFILE_NAMES = [ 'CocoaPods.podfile.yaml', 'CocoaPods.podfile', 'Podfile', 'Podfile.rb', ].freeze CocoaPods 按照上述命名优先级来查找工程目录下所对应的 Podfile 文件。当发现目录中存在 CocoaPods.podfile.yaml 文件时会优先加载。很多同学可能只知道到 Podfile 支持 Ruby 的文件格式，而不了解它还支持了 YAML 格式。YAML 是 YAML Ain't Markup Language 的缩写，其 官方定义： YAML is a human friendly data serialization standard for all programming languages. 它是一种面向工程师友好的序列化语言。我们的 Lockfile 文件就是以 YAML 格式写入 Podfile.lock 中的。 Podfile 文件读取 回到 lib/cocoapods-core/podfile.rb 来看读取方法： module Pod class Podfile include Pod::Podfile::DSL def self.from_file(path) path = Pathname.new(path) unless path.exist? raise Informative, &quot;No Podfile exists at path `#{path}`.&quot; end # 这里我们可以看出，Podfile 目前已经支持了结尾是 .podfile 和 .rb 后缀的文件名 # 其实是为了改善很多编译器使用文件后缀来确认 filetype，比如 vim # 相比与 Podfile 这个文件名要更加的友好 case path.extname when '', '.podfile', '.rb' Podfile.from_ruby(path) when '.yaml' # 现在也支持了 .yaml 格式 Podfile.from_yaml(path) else raise Informative, &quot;Unsupported Podfile format `#{path}`.&quot; end end end from_file 在 pod install 命令执行后的 verify_podfile_exists! 中被调用的： def verify_podfile_exists! unless config.podfile raise Informative, &quot;No `Podfile' found in the project directory.&quot; end end 而 Podfile 文件的读取就是 config.podfile  里触发的，代码在 CocoaPods 的 config.rb 文件中： def podfile_path_in_dir(dir) PODFILE_NAMES.each do |filename| candidate = dir + filename if candidate.file? return candidate end end nil end def podfile_path @podfile_path ||= podfile_path_in_dir(installation_root) end def podfile @podfile ||= Podfile.from_file(podfile_path) if podfile_path end 这里的方法 podfile 和 podfile_path 都是 lazy 加载的。最后 Core 的 from_file 将依据目录下的 Podfile 文件类型选择调用 from_yaml 或者 from_ruby。 从 Pod::Command::Install 命令到 Podfile 文件加载的调用栈如下： Podfile From Ruby 解析 当我们通过 pod init 来初始化 CocoaPods 项目时，默认生成的 Podfile 名称就是 Podfile，那就从 Podfile.from_ruby 开始。 def self.from_ruby(path, contents = nil) # ① contents ||= File.open(path, 'r:utf-8', &amp;amp;:read) # 兼容 1.9 版本的 Rubinius 中的编码问题 if contents.respond_to?(:encoding) &amp;amp;&amp;amp; contents.encoding.name != 'UTF-8' contents.encode!('UTF-8') end # 对 Podfile 中不规范的单引号或双引号进行检查，并进行自动修正，及抛出错误 if contents.tr!('“”‘’‛', %(&quot;&quot;''')) CoreUI.warn &quot;...&quot; end # ② podfile = Podfile.new(path) do begin eval(contents, nil, path.to_s) rescue Exception =&amp;gt; e message = &quot;Invalid `#{path.basename}` file: #{e.message}&quot; raise DSLError.new(message, path, e, contents) end end podfile end ① 是对 Podfile 内容的读取和编码，同时对可能出现的单引号和双引号的匹配问题进行了修正。② 以 path 和 block 为入参进行 podfile 类的初始化并将其放回，保存在全局的 config.podfile 中。 Tips: 如果要在 Ruby 对象的初始化中传入参数，需要重载 Object 的 initialize 方法，这里的 Podfile.new(…) 本质上是 initialize 的方法调用。 initialize 方法所传入的尾随闭包 block 的核心在于内部的 eval 函数（在 CocoaPods 核心组件 中有提到）： eval(contents, nil, path.to_s) 它将 Podfile 中的文本内容转化为方法执行，也就是说里面的参数是一段 Ruby 的代码字符串，通过 eval 方法可以直接执行。继续看 Podfile 的 initialize 方法： def initialize(defined_in_file = nil, internal_hash = {}, &amp;amp;block) self.defined_in_file = defined_in_file @internal_hash = internal_hash if block default_target_def = TargetDefinition.new('Pods', self) default_target_def.abstract = true @root_target_definitions = [default_target_def] @current_target_definition = default_target_def instance_eval(&amp;amp;block) else @root_target_definitions = [] end end 它定义了三个参数： 参数 定义 defined_in_file Podfile 文件路径 internal_hash 通过 yaml 序列化得到的 Podfile 配置信息，保存在 internal_hash 中 block 用于映射 Podfile 的 DSL 配置 需要注意的是，通过 from_ruby 初始化的 Podfile 只传入了参数 1 和 3，参数 2 internal_hash 则是提供给 from_yaml 的。 当 block 存在，会初始化名为 Pods 的 TargetDefinition 对象，用于保存 Pods project 的相关信息和 Pod 依赖。然后调用 instance_eval 执行传入的 block，将 Podfile 的 DSL 内容转换成对应的方法和参数，最终将参数存入 internal_hash 和对应的 target_definitions 中。 Tips: 在 Ruby 中存在两种不同的方式来执行代码块 block，分别是 instance_eval 和 class_eval。 class_eval 的执行上下文与调用类相关，调用者是类名或者模块名，而 instance_eval 的调用者可以是类的实例或者类本身。细节看 StackoverFlow。 Podfile From YAML 解析 YAML 格式的 Podfile 加载需要借助 YAMLHelper 类来完成，YAMLHelper 则是基于 yaml 的简单封装。 def self.from_yaml(path) string = File.open(path, 'r:utf-8', &amp;amp;:read) # 为了解决 Rubinius incomplete encoding in 1.9 mode # https://github.com/rubinius/rubinius/issues/1539 if string.respond_to?(:encoding) &amp;amp;&amp;amp; string.encoding.name != 'UTF-8' string.encode!('UTF-8') end hash = YAMLHelper.load_string(string) from_hash(hash, path) end def self.from_hash(hash, path = nil) internal_hash = hash.dup target_definitions = internal_hash.delete('target_definitions') || [] podfile = Podfile.new(path, internal_hash) target_definitions.each do |definition_hash| definition = TargetDefinition.from_hash(definition_hash, podfile) podfile.root_target_definitions &amp;lt;&amp;lt; definition end podfile end 通过 from_yaml 将文件内容转成 Ruby hash 后转入 from_hash 方法。 区别于 from_ruby，这里调用的 initialize 将读取的 hash 直接存入 internal_hash，然后利用 TargetDefinition.from_hash 来完成的 hash 内容到 targets 的转换，因此，这里无需传入 block 进行 DSL 解析和方法转换。 Podfile 内容解析 前面提到 Podfile 的内容最终保存在 internal_hash 和 target_definitions 中，本质上都是使用了 hash 来保存数据。由于 YAML 文件格式的 Podfile 加载后就是 hash 对象，无需过多加工。唯一需要处理的是递归调用 TargetDefinition 的 from_hash 方法来解析 target 子节点的数据。 因此，接下来的内容解析主要针对 Ruby 文件格式的 DSL 解析，我们以 pod 方法为例： target 'Example' do pod 'Alamofire' end 当解析到 pod 'Alamofire' 时，会先通过 eval(contents, nil, path.to_s 将其转换为 dsl.rb 中的方法： def pod(name = nil, *requirements) unless name raise StandardError, 'A dependency requires a name.' end current_target_definition.store_pod(name, *requirements) end name 为 Alamofire，由于我们没有指定对应的 Alamofire 版本，默认会使用最新版本。requirements  是控制 该 pod 来源获取或者 pod target 的编译选项等，例如： pod 'Alamofire', '0.9' pod 'Alamofire', :modular_headers =&amp;gt; true pod 'Alamofire', :configurations =&amp;gt; ['Debug', 'Beta'] pod 'Alamofire', :source =&amp;gt; 'https://github.com/CocoaPods/Specs.git' pod 'Alamofire', :subspecs =&amp;gt; ['Attribute', 'QuerySet'] pod 'Alamofire', :testspecs =&amp;gt; ['UnitTests', 'SomeOtherTests'] pod 'Alamofire', :path =&amp;gt; '~/Documents/AFNetworking' pod 'Alamofire', :podspec =&amp;gt; 'https://example.com/Alamofire.podspec' pod 'Alamofire', :git =&amp;gt; 'https://github.com/looseyi/Alamofire.git', :tag =&amp;gt; '0.7.0' Tips：requirements 最终是以 Gem::Requirement 对象来保存的。关于 pod 详细说明请移步：Podfile 手册。 对 name 进行校验后，直接转入 current_target_definition 毕竟 Pod 库都是存在 Pods.project 之下： def store_pod(name, *requirements) return if parse_subspecs(name, requirements) # This parse method must be called first parse_inhibit_warnings(name, requirements) parse_modular_headers(name, requirements) parse_configuration_whitelist(name, requirements) parse_project_name(name, requirements) if requirements &amp;amp;&amp;amp; !requirements.empty? pod = { name =&amp;gt; requirements } else pod = name end get_hash_value('dependencies', []) &amp;lt;&amp;lt; pod nil end def get_hash_value(key, base_value = nil) unless HASH_KEYS.include?(key) raise StandardError, &quot;Unsupported hash key `#{key}`&quot; end internal_hash[key] = base_value if internal_hash[key].nil? internal_hash[key] end def set_hash_value(key, value) unless HASH_KEYS.include?(key) raise StandardError, &quot;Unsupported hash key `#{key}`&quot; end internal_hash[key] = value end 经过一系列检查之后，调用 get_hash_value 获取 internal_hash 的 dependencies，并将 name 和 requirements 选项存入。 这里的 dependencies key 是定义在 TargetDefinition 文件的 **HASH_KEYS**，表示 Core 所支持的配置参数: HASH_KEYS = %w( name platform podspecs exclusive link_with link_with_first_target inhibit_warnings use_modular_headers user_project_path build_configurations project_names dependencies script_phases children configuration_pod_whitelist uses_frameworks swift_version_requirements inheritance abstract swift_version ).freeze Tips：freeze 表示该数组不可修改。另外，%w 用于表示其中元素被单引号括起的数组。 %W(#{foo} Bar Bar\ with\ space) =&amp;gt; [“Foo”, “Bar”, “Bar with space”] 对应的还有 %W 表示其中元素被双引号括起的数组。 整个映射过程如下： 精细化的 Podfile 配置 最后一节让我们来展示一下 💪，看看 Podfile 所谓的 targets 之间的依赖关系可以玩出什么花来 😂。 Target 嵌套 最简单的 Podfile 就是文章开头所展示的，不过在 Podfile 中还可以对 Target 进行嵌套使用。假设在我们的主工程同时维护了三个项目，它们都依赖了 Alamofire，通过俄罗斯套娃就能轻松满足条件： target 'Demo1' do pod 'Alamofire' target 'Demo2' do target 'Demo3' do end end end 编译后的 Pods.project 项目结构如下： 我们知道，CocoaPods 在 Pods.project 中为每个在 Podfile 中声明的 Target 生成一个与之对应的专属 Target 来集成它的 Pod 依赖。对于有依赖关系的 Target 其生成的专属 Target 名称则会按照依赖关系叠加来命名，如  target Demo3 的专属 Target 名称为 Pods-Demo1-Demo2-Demo3。安装完成后主项目将会引入该专属 Target 来完成依赖关联，如 Demo3： 关于 Target 嵌套，一个父节点是可以有多个子节点的： target 'Demo1' do pod 'Alamofire' target 'Demo2' do pod 'RxSwift' end target 'Demo3' do pod 'SwiftyJSON' end end Abstract Target 上面例子中，由于 Demo1 与 Demo2 都需要依赖 Alamofire，我们通过 Target 嵌套让 Demo2 来继承 Demo1 的 Pods 库依赖。这么做可能会有一个限制，就是当 Demo1 的 Pod 依赖并非 Demo2 所需要的时候，就会有依赖冗余。此时就需要 Abstract Target 登场了。例如： abstract_target 'Networking' do pod 'Alamofire' target 'Demo1' do pod 'RxSwift' end target 'Demo2' do pod 'ReactCocoa' end target 'Demo3' do end end 将网络请求的 pod 依赖抽象到 Networking target 中，这样就能避免 Demo2 对 RxSwift 的依赖。这种方式配置所生成的 Pods.project 并不会存在名称为 Networking 的 Target，它仅会在主工程的专属 Target 中留下印记： 总结 本文结合 Xcode 工程结构来展开 CocoaPods-Core 的 Podfile 之旅，主要感受如下： 再一次感受了 Ruby 语言的动态之美，给我一个字符串，还你一个未知世界； 结合 Xcode 工程结构更好的理解了 Podfile 的设计初衷，基础知识很重要； 所谓“算法无用论”这种事情，在计算机的世界是不存在的，没有好的数据结构知识如何更好的抽象； 了解 Podfile 的 DSL 是如何映射到内存中，又是如何来存储每个关键数据的 知识点问题梳理 这里罗列了四个问题用来考察你是否已经掌握了这篇文章，如果没有建议你加入**收藏 **再次阅读： 说说 TargetDefinition 的数据结构 ？ 说说 TargetDefinition 与 Xcode Project 的关系 ？ Podfile 的文件格式有几种，分别是如何加载 ？ Lockfile 和 Podfile 的关系</summary></entry><entry><title type="html">公积金贷买房能省多少钱</title><link href="https://www.desgard.com/2020/09/14/buy-big-house-in-sh-1.html" rel="alternate" type="text/html" title="公积金贷买房能省多少钱" /><published>2020-09-14T00:00:00-08:00</published><updated>2020-09-14T00:00:00-08:00</updated><id>https://www.desgard.com/2020/09/14/buy-big-house-in-sh-1</id><content type="html" xml:base="https://www.desgard.com/2020/09/14/buy-big-house-in-sh-1.html">&lt;blockquote&gt;
  &lt;p&gt;我给自己定了一个将近 700 天的计划，这就是在上海买房定居。于是开启了研究购房政策、研究小区和板块、研究购房注意事项等一系列的调研和研究。我将这些笔记归档成文章，发表在公众号与大家分享。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;今天距离购房还有 675 天。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这篇文章来讨论使用公积金贷款买房的最大化省钱空间。&lt;strong&gt;以下讨论均针对于上海市&lt;/strong&gt;。因为公积金贷款比商业贷款利率低了近两个点，所以公积金贷款也是购房者的首选。下面我来较为全面的记录一下公积金贷款的所有细节问题。&lt;/p&gt;

&lt;h1 id=&quot;使用公积金贷款的条件&quot;&gt;使用公积金贷款的条件&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;购买上海市具有所有权的自住住房；&lt;/li&gt;
  &lt;li&gt;申请贷款前 6 个月连续正常缴存住房公积金；&lt;/li&gt;
  &lt;li&gt;借款人家庭没有尚未还清的公积金债务；&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;利率数据&quot;&gt;利率数据&lt;/h1&gt;

&lt;p&gt;首先先给出公积金贷款的贷款利率（以下表内加粗为一般大家所需要关注的数据）：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;贷款年限&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;首套房、二套房普通住宅（基准利率 - 2015.4.8 起开始执行）&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;二套房非普通住宅（1.1 倍利率）&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;五年以下（包含五年）&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2.75%&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3.025%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;五年以上&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;3.25%&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3.575%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;最高贷款额度&quot;&gt;最高贷款额度&lt;/h1&gt;

&lt;p&gt;这里不讨论非普通住宅。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;普通住宅：按所在地一般民用住宅建筑标准来建造的作为居住用途的房屋，目前多为多层住宅与高层住宅。&lt;/li&gt;
  &lt;li&gt;非普通住宅：非普通住宅一般指宅建筑面积较大或用作商业用途的房子。&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;所购住房&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;首套房&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;首套房&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;二套房普通&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;二套房普通&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;贷款家庭&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1 人贷款&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;≥ 2 人贷款&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1 人贷款&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;≥ 2 人贷款&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;缴纳住房公积金最高可贷金额&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;50 万&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;100 万&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;50 万&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;100 万&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;缴纳补充公积金最高可贷金额&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10 万&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;20 万&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10 万&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;20 万&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;可贷金额总计&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;60 万&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;120 万&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;60 万&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;120 万&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;首付比列&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;≤ 90 平米，不低于 20%; ＞ 90 平米不低于 30%&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;同左&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;不低于 30\%&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;同左&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这里面我们可以发现住房公积金和补充公积金是有个上限值，但是如何出自己的可贷公积金的数值呢？其实是有如下计算公式：假如我们另当前住房公积金账户余额是，补充公积金账户余额是，则最高可贷金额有如下关系：&lt;/p&gt;

\[\begin{cases}
f(x, y)=40x+20y \\
40x \leq 50 \times 10^{4} \\ 
20y \leq 10 \times 10^{4} 
\end{cases}\]

&lt;p&gt;通俗的翻译过来就是，&lt;strong&gt;公积金最高可贷金额 = 住房公积金余额 × 40 + 补充公积金余额 × 20&lt;/strong&gt;。所以通过不等式反解我们可得，&lt;strong&gt;如果我们想最大的利用公积金，那么我们住房公积金最少需要有 12500 元的余额、补充公积金需要有 5000 块钱的余额，就满足了最高可贷金额的条件。&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;贷款年限和贷款人年龄限制&quot;&gt;贷款年限和贷款人年龄限制&lt;/h1&gt;

&lt;p&gt;首先，如果是新建商品房，也就是房龄为 0 年的房子，最长贷款年限是 30 年。然后我们说二手房，它有以下规则：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;房龄&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;最长贷款年限&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;≤ 5 年&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;30 年&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;6 - 19 年&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;35 年 - 房龄（假如是 10 年房龄，则最高可贷 25 年）&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;≥ 20 年&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;15 年&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;贷款算法&quot;&gt;贷款算法&lt;/h1&gt;

&lt;p&gt;同商业贷款的算法相同，公积金贷款也分成等额本金和等额本息两种算法。考虑到更多的人愿意均摊风险以及银行希望获取到更高的利息收入，所以这里我均采用&lt;strong&gt;等额本息来计算还款总额&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;每月月供&quot;&gt;每月月供&lt;/h2&gt;

\[月供额 = \frac{月利率 \times (1+月利率)^{还款月数}}{(1+月利率)^{还款月数} - 1} \times 贷款本金\]

&lt;p&gt;其中月利率的计算方法：&lt;/p&gt;

\[月利率 = \frac{年利率}{12}\]

&lt;h2 id=&quot;其他约束&quot;&gt;其他约束&lt;/h2&gt;

&lt;p&gt;除了我们上文提到的公积金余额对于贷款的约束，我们还要考虑房龄所带来的影响：&lt;/p&gt;

\[还款月数 = (35 - 房龄) \times 12\]

&lt;h2 id=&quot;举例计算&quot;&gt;举例计算&lt;/h2&gt;

&lt;p&gt;以上就是我们要考虑的所有月数条件，那么我们来举一个例子来进行计算。假如我们现在要买一个 2010 年（房龄 10 年的二手房），总价是 400 万。使用了 35\% 的首付比例之后，我们需要&lt;strong&gt;贷款 260 万&lt;/strong&gt;，最长贷款时间 25 年，也就是&lt;strong&gt;还款月数 300 个月&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;情况一全部使用商业贷款&quot;&gt;情况一：全部使用商业贷款&lt;/h3&gt;

&lt;p&gt;先要确定一下商业贷款的利息，我这里查阅了一下资料，由于上海的商贷金额往往较高，银行会对利息进行 95 折的优惠，从 4.9\% 的基准利率下调到 4.655\%。但今年国家出了 LPR 的利息策略，&lt;strong&gt;我们用当前 8 月份的 LPR 利息 4.65\% 来计算&lt;/strong&gt;。首先来算月利率：&lt;/p&gt;

\[月利率 = \frac{4.65\%}{12} = 0.003875\]

&lt;p&gt;然后我们来带入计算月供：&lt;/p&gt;

\[\begin{split}
月供额 &amp;amp;= \frac {0.003875 \times (1 + 0.003875)^{300}}{(1 + 0.003875)^{300} - 1} \times 2.6 \times 10^6 \\
&amp;amp;\approx 14673.899\ 元 
\end{split}\]

\[\begin{equation}
\begin{split}
月供额 &amp;amp;= \frac {0.003875 \times (1 + 0.003875)^{300}}{(1 + 0.003875)^{300} - 1} \times 2.6 \times 10^6 \\
&amp;amp;\approx 14673.899\ 元 
\end{split}
\end{equation}\]

&lt;p&gt;使用月供额来乘以 30 个月算出总还款：&lt;/p&gt;

\[总还款 = 30 * 14673.899 = 4402169.7\ 元\]

&lt;h3 id=&quot;情况二使用最大组合贷&quot;&gt;情况二：使用最大组合贷&lt;/h3&gt;

&lt;p&gt;由于&lt;strong&gt;公积金贷款只能贷 120 万，所以采用 120 万是公积金贷，利息是五年以上的 3.75\%。我们用当前 8 月份的 LPR 利息 4.65\% 当做商业贷款的利息，商业贷款 140 万&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;同上述计算法相同，带入公式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;① 公积金贷款&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;公积金贷款的月供：&lt;/p&gt;

\[公积金月供 \approx 6169.57 元\]

&lt;p&gt;300 个月公积金总还款：&lt;/p&gt;

\[公积金总还款 = 1850871 \ 元\]

&lt;p&gt;&lt;strong&gt;② 商业贷款&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;商业贷款月供：&lt;/p&gt;

\[商业贷款月供 \approx 7901.33\ 元\]

&lt;p&gt;300 个月商贷总还款：&lt;/p&gt;

\[商贷总还款 = 2370399元\]

&lt;p&gt;我们得到总还款数：&lt;/p&gt;

\[总还款 = 1850871 + 2370399 = 4221270 元\]

&lt;h3 id=&quot;结果分析&quot;&gt;结果分析&lt;/h3&gt;

&lt;p&gt;从上面的计算结果来看，我们购买房龄为 10 年的二手房，加入总价为 400 万元，则选择组合贷&lt;strong&gt;可以节省 180900 元&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&quot;数据分析&quot;&gt;数据分析&lt;/h1&gt;

&lt;p&gt;上面已经给出了等额本息的计算方法。所以接下来进行控制变量，&lt;strong&gt;我们让贷款年限映射到正实数区间，让其投影在 5 年与 30 年之间&lt;/strong&gt;。保证贷款金额为 400 万。然后我们来计算纯商贷和使用组合贷的数据。蓝色线代表使用纯商贷模式，红色线代表使用组合贷模式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia640&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由图一可以看出，&lt;strong&gt;还款年份数越多，其所需还款金额越多，也就意味着利息越高&lt;/strong&gt;。而红（组合贷）与蓝（纯商贷）的差距也越来越大。&lt;strong&gt;并且由右图可知，当还款年份数越多，组合贷的优势愈加明显&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;接下来我们来总结一下买房贷款的最大化利益策略：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;所以贷款买房尽量可以使用公积金贷款。可贷最大公积金额度需要我们以及我们的配偶具有&lt;strong&gt;住房公积金余额 12500 元、补充公积金余额 5000 元。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;根据&lt;strong&gt;最大贷款额原则&lt;/strong&gt;（之后会讲到，结论是“首套房付最少的首付，用最大的杠杆贷最多的款，选择 30 年等额本息法，拒不提前还款”策略可达最大收益），&lt;strong&gt;当我们将还款时间设置为 30 年的上限阈值，在公积金贷款中也可以获得最大化的成本节约&lt;/strong&gt;。当然，这就要求我们购买新房和房龄小的二手房。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果你有任何问题以及更好的建议，&lt;strong&gt;可以在下方评论区留言&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&quot;相关数据分析代码&quot;&gt;相关数据分析代码&lt;/h1&gt;

&lt;p&gt;以下代码由我个人编写，可在 Jupyter Notebook 环境下直接运行。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;等额本息算法描述&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 等额本息算法
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;averageCapitalPlusInterest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anualInterestRate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    principal 表示贷款总额, anualInterestRate 表示年利率, month 表示房贷月份
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 计算每月应还款金额
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;monthlyPayment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;around&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;averageCapitalPlusInterestRate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monthlyInterestRate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anualInterestRate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 还款总额
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;totalPayment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;around&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monthlyPayment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalPayment&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 计算每月利率
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;monthlyInterestRate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anualInterestRate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anualInterestRate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 计算比例系数
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;averageCapitalPlusInterestRate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monthlyInterestRate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monthlyInterestRate&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;贷款数据模拟&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 全商贷
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0465&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;averageCapitalPlusInterest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;around&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 组合贷
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0465&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0375&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1200000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;averageCapitalPlusInterest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;averageCapitalPlusInterest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;around&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;做图&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;221&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Loan Time - Year&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Repayment Amount - RMB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;222&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;detal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;detal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Loan Time - Year&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Savings - RMB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;around&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;va&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bottom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>冬瓜</name><email>gua@desgard.com</email></author><category term="冬瓜买房笔记" /><category term="数学建模" /><summary type="html">我给自己定了一个将近 700 天的计划，这就是在上海买房定居。于是开启了研究购房政策、研究小区和板块、研究购房注意事项等一系列的调研和研究。我将这些笔记归档成文章，发表在公众号与大家分享。 今天距离购房还有 675 天。 这篇文章来讨论使用公积金贷款买房的最大化省钱空间。以下讨论均针对于上海市。因为公积金贷款比商业贷款利率低了近两个点，所以公积金贷款也是购房者的首选。下面我来较为全面的记录一下公积金贷款的所有细节问题。 使用公积金贷款的条件 购买上海市具有所有权的自住住房； 申请贷款前 6 个月连续正常缴存住房公积金； 借款人家庭没有尚未还清的公积金债务； 利率数据 首先先给出公积金贷款的贷款利率（以下表内加粗为一般大家所需要关注的数据）： 贷款年限 首套房、二套房普通住宅（基准利率 - 2015.4.8 起开始执行） 二套房非普通住宅（1.1 倍利率） 五年以下（包含五年） 2.75% 3.025% 五年以上 3.25% 3.575% 最高贷款额度 这里不讨论非普通住宅。 普通住宅：按所在地一般民用住宅建筑标准来建造的作为居住用途的房屋，目前多为多层住宅与高层住宅。 非普通住宅：非普通住宅一般指宅建筑面积较大或用作商业用途的房子。 所购住房 首套房 首套房 二套房普通 二套房普通 贷款家庭 1 人贷款 ≥ 2 人贷款 1 人贷款 ≥ 2 人贷款 缴纳住房公积金最高可贷金额 50 万 100 万 50 万 100 万 缴纳补充公积金最高可贷金额 10 万 20 万 10 万 20 万 可贷金额总计 60 万 120 万 60 万 120 万 首付比列 ≤ 90 平米，不低于 20%; ＞ 90 平米不低于 30% 同左 不低于 30\% 同左 这里面我们可以发现住房公积金和补充公积金是有个上限值，但是如何出自己的可贷公积金的数值呢？其实是有如下计算公式：假如我们另当前住房公积金账户余额是，补充公积金账户余额是，则最高可贷金额有如下关系： \[\begin{cases} f(x, y)=40x+20y \\ 40x \leq 50 \times 10^{4} \\ 20y \leq 10 \times 10^{4} \end{cases}\] 通俗的翻译过来就是，公积金最高可贷金额 = 住房公积金余额 × 40 + 补充公积金余额 × 20。所以通过不等式反解我们可得，如果我们想最大的利用公积金，那么我们住房公积金最少需要有 12500 元的余额、补充公积金需要有 5000 块钱的余额，就满足了最高可贷金额的条件。 贷款年限和贷款人年龄限制 首先，如果是新建商品房，也就是房龄为 0 年的房子，最长贷款年限是 30 年。然后我们说二手房，它有以下规则： 房龄 最长贷款年限 ≤ 5 年 30 年 6 - 19 年 35 年 - 房龄（假如是 10 年房龄，则最高可贷 25 年） ≥ 20 年 15 年 贷款算法 同商业贷款的算法相同，公积金贷款也分成等额本金和等额本息两种算法。考虑到更多的人愿意均摊风险以及银行希望获取到更高的利息收入，所以这里我均采用等额本息来计算还款总额。 每月月供 \[月供额 = \frac{月利率 \times (1+月利率)^{还款月数}}{(1+月利率)^{还款月数} - 1} \times 贷款本金\] 其中月利率的计算方法： \[月利率 = \frac{年利率}{12}\] 其他约束 除了我们上文提到的公积金余额对于贷款的约束，我们还要考虑房龄所带来的影响： \[还款月数 = (35 - 房龄) \times 12\] 举例计算 以上就是我们要考虑的所有月数条件，那么我们来举一个例子来进行计算。假如我们现在要买一个 2010 年（房龄 10 年的二手房），总价是 400 万。使用了 35\% 的首付比例之后，我们需要贷款 260 万，最长贷款时间 25 年，也就是还款月数 300 个月。 情况一：全部使用商业贷款 先要确定一下商业贷款的利息，我这里查阅了一下资料，由于上海的商贷金额往往较高，银行会对利息进行 95 折的优惠，从 4.9\% 的基准利率下调到 4.655\%。但今年国家出了 LPR 的利息策略，我们用当前 8 月份的 LPR 利息 4.65\% 来计算。首先来算月利率： \[月利率 = \frac{4.65\%}{12} = 0.003875\] 然后我们来带入计算月供： \[\begin{split} 月供额 &amp;amp;= \frac {0.003875 \times (1 + 0.003875)^{300}}{(1 + 0.003875)^{300} - 1} \times 2.6 \times 10^6 \\ &amp;amp;\approx 14673.899\ 元 \end{split}\] \[\begin{equation} \begin{split} 月供额 &amp;amp;= \frac {0.003875 \times (1 + 0.003875)^{300}}{(1 + 0.003875)^{300} - 1} \times 2.6 \times 10^6 \\ &amp;amp;\approx 14673.899\ 元 \end{split} \end{equation}\] 使用月供额来乘以 30 个月算出总还款： \[总还款 = 30 * 14673.899 = 4402169.7\ 元\] 情况二：使用最大组合贷 由于公积金贷款只能贷 120 万，所以采用 120 万是公积金贷，利息是五年以上的 3.75\%。我们用当前 8 月份的 LPR 利息 4.65\% 当做商业贷款的利息，商业贷款 140 万。 同上述计算法相同，带入公式。 ① 公积金贷款 公积金贷款的月供： \[公积金月供 \approx 6169.57 元\] 300 个月公积金总还款： \[公积金总还款 = 1850871 \ 元\] ② 商业贷款 商业贷款月供： \[商业贷款月供 \approx 7901.33\ 元\] 300 个月商贷总还款： \[商贷总还款 = 2370399元\] 我们得到总还款数： \[总还款 = 1850871 + 2370399 = 4221270 元\] 结果分析 从上面的计算结果来看，我们购买房龄为 10 年的二手房，加入总价为 400 万元，则选择组合贷可以节省 180900 元。 数据分析 上面已经给出了等额本息的计算方法。所以接下来进行控制变量，我们让贷款年限映射到正实数区间，让其投影在 5 年与 30 年之间。保证贷款金额为 400 万。然后我们来计算纯商贷和使用组合贷的数据。蓝色线代表使用纯商贷模式，红色线代表使用组合贷模式。 由图一可以看出，还款年份数越多，其所需还款金额越多，也就意味着利息越高。而红（组合贷）与蓝（纯商贷）的差距也越来越大。并且由右图可知，当还款年份数越多，组合贷的优势愈加明显。 总结 接下来我们来总结一下买房贷款的最大化利益策略： 所以贷款买房尽量可以使用公积金贷款。可贷最大公积金额度需要我们以及我们的配偶具有住房公积金余额 12500 元、补充公积金余额 5000 元。 根据最大贷款额原则（之后会讲到，结论是“首套房付最少的首付，用最大的杠杆贷最多的款，选择 30 年等额本息法，拒不提前还款”策略可达最大收益），当我们将还款时间设置为 30 年的上限阈值，在公积金贷款中也可以获得最大化的成本节约。当然，这就要求我们购买新房和房龄小的二手房。 如果你有任何问题以及更好的建议，可以在下方评论区留言。 相关数据分析代码 以下代码由我个人编写，可在 Jupyter Notebook 环境下直接运行。 &quot;&quot;&quot;等额本息算法描述&quot;&quot;&quot; import numpy as np import math # 等额本息算法 def averageCapitalPlusInterest(principal, anualInterestRate, month): &quot;&quot;&quot; principal 表示贷款总额, anualInterestRate 表示年利率, month 表示房贷月份 &quot;&quot;&quot; # 计算每月应还款金额 monthlyPayment = np.around(principal * averageCapitalPlusInterestRate(month, monthlyInterestRate(anualInterestRate)), 2) # 还款总额 totalPayment = np.around(monthlyPayment * month, 2) return totalPayment # 计算每月利率 def monthlyInterestRate(anualInterestRate): s = anualInterestRate / 12 return s # 计算比例系数 def averageCapitalPlusInterestRate(month, monthlyInterestRate): R = monthlyInterestRate N = month I = R * math.pow(1 + R, N) / (math.pow(1 + R, N) - 1) return I &quot;&quot;&quot;贷款数据模拟&quot;&quot;&quot; # 全商贷 r = 0.0465 ms = [12 * mi for mi in range(6, 31)] t = 4000000 res = [] for m in ms: res.append(averageCapitalPlusInterest(t, r, m)) res = [np.around(x / 10000, 2) for x in res] # 组合贷 r1 = 0.0465 r2 = 0.0375 t2 = 1200000 t1 = t - t2 rest = [] for m in ms: rest.append(averageCapitalPlusInterest(t1, r1, m) + averageCapitalPlusInterest(t2, r2, m)) rest = [np.around(x / 10000, 2) for x in rest] &quot;&quot;&quot;做图&quot;&quot;&quot; import matplotlib.pyplot as plt year = [m // 12 for m in ms] plt.subplot(221) plt.plot(year, res) plt.plot(year, rest, 'r') plt.xlabel(&quot;Loan Time - Year&quot;) plt.ylabel(&quot;Repayment Amount - RMB&quot;) plt.subplot(222) detal = [] for i in range(len(res)): detal.append(res[i] - rest[i]) rects = plt.bar(year, detal) plt.xlabel(&quot;Loan Time - Year&quot;) plt.ylabel(&quot;Savings - RMB&quot;) for rect in rects: height = np.around(rect.get_height(), 1) plt.text(rect.get_x() + rect.get_width() / 2, height+1, str(height), ha=&quot;center&quot;, va=&quot;bottom&quot;)</summary></entry><entry><title type="html">CocoaPods 命令解析 - CLAide</title><link href="https://www.desgard.com/2020/09/02/cocoapods-story-3.html" rel="alternate" type="text/html" title="CocoaPods 命令解析 - CLAide" /><published>2020-09-02T00:00:00-08:00</published><updated>2020-09-02T00:00:00-08:00</updated><id>https://www.desgard.com/2020/09/02/cocoapods-story-3</id><content type="html" xml:base="https://www.desgard.com/2020/09/02/cocoapods-story-3.html">&lt;h1 id=&quot;引子&quot;&gt;引子&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;在上文 &lt;a href=&quot;/2020/08/17/cocoapods-story-2.html&quot;&gt;整体把握 CocoaPods 核心组件&lt;/a&gt; 中，我们通过对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt; 的流程的介绍，引出 CocoaPods 的各个核心组件的角色分工和其主要作用，希望通过对这些组件的使用和介绍来帮助大家更好的了解 CocoaPods 的完整工作流以及背后的原理。&lt;br /&gt;
&lt;br /&gt;今天我们主要聊一聊为 CocoaPods 提供的命令行解析的工具 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLAide&lt;/code&gt;，它是如何来解析 Pod 命令以及 CocoaPods 的插件机制。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;41cb7c3f&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;open-class&quot;&gt;Open Class&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;开始之前，我们需要了解一个 Ruby 的语言特性：&lt;a href=&quot;http://rubylearning.com/satishtalim/ruby_open_classes.html&quot;&gt;Open Classes&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;在 Ruby 中，类永远是开放的，你总是可以将新的方法加入到已有的类中，除了在你自己的代码中，还可以用在标准库和内置类中，这个特性被称为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Open Classes&lt;/code&gt;。说到这里作为 iOS 工程师，脑中基本能闪现出 Objective-C 的 &lt;a href=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/Category.html&quot;&gt;&lt;strong&gt;Category&lt;/strong&gt;&lt;/a&gt; 或者 Swift 的 &lt;a href=&quot;https://docs.swift.org/swift-book/LanguageGuide/Extensions.html&quot;&gt;&lt;strong&gt;Extensions&lt;/strong&gt;&lt;/a&gt; 特性。不过，这种动态替换方法的功能也称作 Monkeypatch。(🐒  到底招谁惹谁了）&lt;br /&gt;
&lt;br /&gt;下面，我们通过在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Monkey.rb&lt;/code&gt; 文件中添加一个自定义类 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Monkey&lt;/code&gt; 来简单看一下该特性，&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Monkey&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eat&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;i have banana&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;monkey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Monkey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Monkey&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eat&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I have apple&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;monkey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eat&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;直接在 VSCode 中运行，效果如下：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Running] ruby &lt;span class=&quot;s2&quot;&gt;&quot;/Users/edmond/Desktop/Monkey.rb&quot;&lt;/span&gt;
I have apple
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;可以看到，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Monkey&lt;/code&gt; 类的实例输出已经改为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I have apple&lt;/code&gt;。&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;需要注意，即使是已经创建好的实例，方法替换同样是生效的。
另外 ⚠️ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Open Class&lt;/code&gt; 可以跨文件、跨模块进行访问的，甚至对 Ruby 内置方法的也同样适用 (谨慎)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;这强大的功能让我们可以很容易的对三方模块进行扩展，这也是 CocoaPods 的插件体系所依赖的基础。&lt;br /&gt;
&lt;br /&gt;举个例子，在 &lt;em&gt;CocoaPods&lt;/em&gt; 主仓库 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cocoapods/downloader.rb&lt;/code&gt; 中定义了一些 download 方法：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Pod&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Downloader&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;但是在 &lt;em&gt;&lt;a href=&quot;https://github.com/CocoaPods/cocoapods-downloader&quot;&gt;cocoapods-downloader&lt;/a&gt;&lt;/em&gt; 模块中，module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Downloader&lt;/code&gt; 的方法并不能满足全部需求，于是在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cocoapods-downloader/api.rbapi.rb&lt;/code&gt; 中就对齐进行了扩展：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Pod&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Downloader&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;API&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;executable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raise_on_failure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;CLAide&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;claide&quot;&gt;CLAide&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CocoaPods/CLAide&quot;&gt;CLAide&lt;/a&gt; 虽然是一个简单的命令行解释器，但它提供了功能齐全的命令行界面和 API。它不仅负责解析我们使用到的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods&lt;/code&gt; 命令，例如：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod update&lt;/code&gt; 等，还可用于封装常用的一些脚本，将其打包成简单的命令行小工具。&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;备注：所谓命令行解释器就是从标准输入或者文件中读取命令并执行的程序。详见 &lt;a href=&quot;https://www.wikiwand.com/en/Command-line_argument_parsing&quot;&gt;Wiki&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&quot;7db62e5c&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;claide-功能概览&quot;&gt;CLAide 功能概览&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;我们先通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod --help&lt;/code&gt; 来查看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLAide&lt;/code&gt; 的真实输出效果：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;COMMAND&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;CocoaPods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Cocoa&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;               &lt;span class=&quot;no&quot;&gt;Manipulate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CocoaPods&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deintegrate&lt;/span&gt;         &lt;span class=&quot;no&quot;&gt;Deintegrate&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CocoaPods&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;                 &lt;span class=&quot;no&quot;&gt;Display&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;                &lt;span class=&quot;no&quot;&gt;Generate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Podfile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;          &lt;span class=&quot;no&quot;&gt;Allows&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CocoaPods&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;silent&lt;/span&gt;              &lt;span class=&quot;no&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nothing&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;             &lt;span class=&quot;no&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tool&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;👆所展示的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Usage&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Commands&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Options&lt;/code&gt; section 及其内容均是由 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALide&lt;/code&gt; 的输出模版 &lt;strong&gt;Banner&lt;/strong&gt; 来完成的。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALide&lt;/code&gt; 提供了 Command 基类帮助我们快速定义出标准且美观的命令。除了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod&lt;/code&gt; 命令之外，例如：&lt;a href=&quot;https://github.com/CocoaPods/Xcodeproj&quot;&gt;Xcodeproj&lt;/a&gt; 所提供的命令也是由 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALide&lt;/code&gt; 来实现的。&lt;br /&gt;
&lt;br /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALide&lt;/code&gt; 还提供了一套插件加载机制在命令执行前获取所有插件中的命令，例如：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cocoapods-packeger&lt;/code&gt; 提供的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod package NAME [SOURCE]&lt;/code&gt; 就是从其 source code 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/pod/commnad/package.rb&lt;/code&gt; 读取出来的，它令我们仅需一份 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;podspec&lt;/code&gt; 信息，即可完成 Cocoa 依赖库的 📦。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;dd2009ca&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;calide-的目录结构&quot;&gt;CALide 的目录结构&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于 Ruby 的项目结构，在 Rubygems.org 中有 &lt;a href=&quot;https://guides.rubygems.org/make-your-own-gem/&quot;&gt;文件结构手册&lt;/a&gt; 这个标准供大家参考学习。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;首先来看 CALide 项目的文件入口 lib/calide.rb：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CLAide&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1.0.3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'claide/ansi'&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'claide/argument'&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'claide/argv'&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'claide/command'&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'claide/help'&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'claide/informative_error'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;我们接下来分析一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/cladie/&lt;/code&gt; 目录下的相关代码。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;Command&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;command-抽象类&quot;&gt;Command 抽象类&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command&lt;/code&gt; 是用于构建命令行界面的基础抽象类。所有我们添加的命令都需要继承自 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command&lt;/code&gt;，这些子类可以嵌套组合成更加精细的命令。&lt;br /&gt;
&lt;br /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod&lt;/code&gt; 命令正是由多个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pod::Command &amp;lt; CLAide::Command&lt;/code&gt; 的子类组合而成的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abstract command&lt;/code&gt;。当然 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod&lt;/code&gt; 的 subcommand 同样也能声明为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abstact command&lt;/code&gt;，通过这样的方式我们就能达到多级嵌套命令的效果。有抽象命令当然也需要有具体执行任务的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;normal command&lt;/code&gt;。&lt;br /&gt;
&lt;br /&gt;举个例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-basic&quot;&gt;$ pod update --help
Usage:
    $ pod update [POD_NAMES ...]
      Updates the Pods identified by the specified `POD_NAMES`

Options:
    --verbose                              Show more debugging information
    --no-ansi                              Show output without ANSI codes
    --help                                 Show help banner of specified command
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;对应的， &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod update&lt;/code&gt; 这个命令的逻辑在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLAide&lt;/code&gt; 中就是如下描述：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Pod&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Command&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Command&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;CLAide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'POD_NAMES'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
        Updates the Pods identified by the specified `POD_NAMES`.
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;      DESC&lt;/span&gt;
      
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;options&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--sources&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'The sources from which to update dependent pods'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'--exclude-pods'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Pods to exclude during update'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'--clean-install'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ignore the contents of the project cache and force a full pod installation'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;当我们如此描述后，CLAide 会对这个类进行以下方式的解析：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1599005020049-ddaee5cf-5280-4586-b5ab-0a3587f0d245.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;此外，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command&lt;/code&gt; class 提供了大量基础功能，其中最核心的方法为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt;，会在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;normal command&lt;/code&gt; 小节会介绍。对于任何命令类型都可以设置以下几个属性和方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt;: 用于简单描述该命令的作用&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;options&lt;/strong&gt;: 用于返回该命令的可选项及对应的描述，返回的 options 需要通过调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super&lt;/code&gt; 插入到父类的可选项前&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;initialize&lt;/strong&gt;: 如果需要获取命令行传递的实参，需要通过重载 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialize&lt;/code&gt; 方法来获取&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;validate!&lt;/strong&gt;: 用于检查输入实参的有效性，如果校验失败，会通过调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;help!&lt;/code&gt; 方法来输出帮助信息&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;help!&lt;/strong&gt;：用于错误信息的处理和展示&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;注意 ⚠️：这里我们说的 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abstract command&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;normal command&lt;/code&gt; 均是通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command&lt;/code&gt; 来实现的&lt;/strong&gt;，只是它们的配置不同。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;09aadeee&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;abstract-command&quot;&gt;Abstract Command&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abstract command&lt;/code&gt; 为不提供具体命令实现的抽象容器命令类，不过它可以包含一个或多个的 subcommands。我们可以指定 subcommands 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;normal command&lt;/code&gt; 为默认命令，就能将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abstract command&lt;/code&gt; 作为作为普通命令直接执行了。&lt;br /&gt;
&lt;br /&gt;抽象命令的现实比较简单：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;abstract_command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;仅需设置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abstract_command&lt;/code&gt;，然后就可以继承它来实现普通命令或者多级嵌套的抽象命令。&lt;br /&gt;
&lt;br /&gt;以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod&lt;/code&gt; 命令的实现为例：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Pod&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CLAide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Command&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods/command/install'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 1&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods/command/update'&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;abstract_command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pod'&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;上述通过 &lt;strong&gt;require&lt;/strong&gt; 引入的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install&lt;/code&gt; 等子命令都是继承自 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pod::Command&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;normal command&lt;/code&gt;。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1598855030376-84980ad9-7ff0-4c97-bee8-266bc77772e9.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;87eebb65&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;normal-command&quot;&gt;Normal Command&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;相对于抽象命令，普通命令就需要设置传递实参的名称和描述，以及重载 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; 方法。&lt;br /&gt;
&lt;br /&gt;&lt;strong&gt;Arguments&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arguments&lt;/code&gt; 用于配置该命令支持的参数列表的 banner 输出，类型为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array&amp;lt;Argument&amp;gt;]&lt;/code&gt;，它最终会格式化成对应的信息展示在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Usage&lt;/code&gt; banner 中。&lt;br /&gt;
&lt;br /&gt;我们来看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod update&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arguments&lt;/code&gt; 是如何配置的：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;CLAide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'POD_NAMES'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Argument&lt;/code&gt; 的构造方法如下：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CLAide&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Argument&lt;/span&gt;
   
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repeatable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@required&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@repeatable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repeatable&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;这里传入的 names 就是在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Usage&lt;/code&gt; banner 中输出的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[POD_NAMES ...]&lt;/code&gt; 。&lt;br /&gt;
&lt;br /&gt;&lt;strong&gt;require&lt;/strong&gt; 表示该 Argument 是否为必传参数，可选参数会用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ ]&lt;/code&gt; 将其包裹起来。也就是说 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod update&lt;/code&gt; 命令默认是不需要传 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POD_NAMES&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;strong&gt;repeatable&lt;/strong&gt; 表示该 Argument 是否可以重复多次出现。如果设置为可重复，那么会在 names 的输出信息后面会添加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;...&lt;/code&gt; 表示该参数为复数参数。&lt;br /&gt;
&lt;br /&gt;举个例子：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pod update Alamofire, SwiftyJSON
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;我们可以指定 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod update&lt;/code&gt; 仅更新特定的依赖库，如果不传 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POD_NAMES&lt;/code&gt; 将进行全量更新。
&lt;a name=&quot;Run&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;run-方法&quot;&gt;Run 方法&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command&lt;/code&gt; 类中定义了两个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; 方法：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 根据文件前缀来匹配对应的插件&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;plugin_prefixes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin_prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;PluginManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load_plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin_prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;coerce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 解析 argument 生成对应的 command instance&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;no&quot;&gt;ANSI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;disabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ansi_output?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handle_root_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;validate!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;handle_exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'A subclass should override the `CLAide::Command#run` method to '&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'actually perform some work.'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;这里的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.run&lt;/code&gt; 方法是 class method，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; 是 instanced method。对于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ruby&lt;/code&gt; 不太熟悉的同学可以看看这个：&lt;a href=&quot;https://stackoverflow.com/questions/13706373/what-does-def-self-function-name-mean&quot;&gt;What does def self.function name mean?&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;作为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command&lt;/code&gt; 类的核心方法，类方法 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.run&lt;/code&gt; 将终端传入的参数解析成对应的 &lt;strong&gt;command&lt;/strong&gt; 和 &lt;strong&gt;argv&lt;/strong&gt;，并最终调用 command 的实例方法 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; 来触发真正的命令逻辑。因此，子类需要通过重载 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; 方法来完成对应命令的实现。&lt;br /&gt;
&lt;br /&gt;那么问题来了，方法 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command::parse&lt;/code&gt; 是如何将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; 的类方法转换为实例方法的呢？&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 通过解析 argv 获取到与 cmd 名称&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;coerce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 如果 cmd 对应的 Command 类，则更新 argv，继续解析命令&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subcommand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_subcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift_argument&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 如果 cmd 为抽象命令且指定了默认命令，则返回默认命令继续解析参数&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abstract_command?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_subcommand&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;load_default_subcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 初始化真正的 cmd 实例&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以说，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLAide&lt;/code&gt; 的命令解析就是一个&lt;strong&gt;多叉树遍历&lt;/strong&gt;，通过分割参数及遍历 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLAide::Command&lt;/code&gt; 的子类，最终找到用户输入的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;normal command&lt;/code&gt; 并初始化返回。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1598855030365-d6ee55d5-df42-4160-af5d-7e06c0c46b36.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里还有一个知识点就是，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLAide::Command&lt;/code&gt; 是如何知道有哪些子类集成它的呢？&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inherited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;subcommands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subcommand&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;strong&gt;这里利用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ruby&lt;/code&gt; 提供的 &lt;em&gt;Hook Method&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.inherited&lt;/code&gt; 来获取它所继承的子类，并将其保存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subcommands&lt;/code&gt;。&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;另外，这里在真正执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.run&lt;/code&gt; 方法之前会遍历当前项目所引入的 Gems 包中的指定目录下的命令插件文件，并进行插件加载，具体内容将在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PluginManager&lt;/code&gt; 中展开。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;ARGV&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;argv-传入参数&quot;&gt;ARGV 传入参数&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLAide&lt;/code&gt; 提供了专门的类 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARGV&lt;/code&gt; 用于解析命令行传入的参数。主要功能是对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parse&lt;/code&gt; 解析后的 tuple 列表进行各种过滤、CURD 等操作。&lt;br /&gt;
&lt;br /&gt;按照 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALide&lt;/code&gt; 的定义参数分三种类型：&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arg&lt;/code&gt;: 普通的实参，所谓的实参就是直接跟在命令后面的，且不带任何 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt; 修饰的字符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt;: 简单理解 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt; 就是限定为 bool 变量的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option&lt;/code&gt; 类型参数，如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt; 前面添加带 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--no-&lt;/code&gt; 则值为 false，否则为 true&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option&lt;/code&gt;: 可选项参数，以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt; 为前缀且以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt; 作为分割符来区分 key 和 value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;而在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARGV&lt;/code&gt; 内部又提供了私有工具类 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser&lt;/code&gt; 来解析终端的输入，其核心方法为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse&lt;/code&gt;:&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Parser&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;double_dash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;double_dash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double_dash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'--'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double_dash&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:arg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argument_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;parsed_argument&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parsed_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ,,,&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;parse 的返回值为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[Array&amp;lt;Array&amp;lt;Symbol, String, Array&amp;gt;&amp;gt;]&lt;/code&gt; 类型的 tuple，其中 tuple 的第一个变量为实参的类型，第二个才是对应的实参。&lt;br /&gt;
&lt;br /&gt;依旧以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod update&lt;/code&gt; 为例：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod update Alamofire &lt;span class=&quot;nt&quot;&gt;--no-repo-update&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--exclude-pods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;SwiftyJSON
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1598855030381-29d93c99-1c6c-4a40-8bf7-a40eee4140a7.jpeg&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;解析后，输出的 tuple 列表如下：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Alamofire&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;repo-update&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;exclude-pods&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SwiftyJSON&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;Banner&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;banner-与输出格式化&quot;&gt;Banner 与输出格式化&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;接下来，我们再来聊聊 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLAide&lt;/code&gt; 提供的格式化效果的 banner。&lt;br /&gt;
&lt;br /&gt;那什么是 banner 呢？回看第一个例子 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod --help&lt;/code&gt; 所输出的帮助信息，它分为三个 Section：&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Usage&lt;/code&gt;：用于描该述命令的用法&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Commands&lt;/code&gt;：用于描述该命令所包含的子命令，没有则不显示。在子命令前面存在两种类型的标识
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; ：用于强调该 command 是单独添加的子命令&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; ：用于表示指引的意思，表示该 command 是当前命令的默认实现&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Options&lt;/code&gt;：用于描述该命令的可选项&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;strong&gt;这三段帮助信息就是对应的不同的 banner。&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLAide&lt;/code&gt; 对于输出的 banner 信息提供了 &lt;a href=&quot;https://www.wikiwand.com/en/ANSI_escape_code&quot;&gt;ANSI 转义&lt;/a&gt;，用于在不同的终端里显示富文本的效果。banner 的主要格式化效果如下：&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;对于 setcion 标题： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Usage&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Commands&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Options&lt;/code&gt; 添加了下划线且加粗处理&lt;/li&gt;
  &lt;li&gt;Command 配置为绿色&lt;/li&gt;
  &lt;li&gt;Options 配置为蓝色&lt;/li&gt;
  &lt;li&gt;提示警告信息配置为黄色&lt;/li&gt;
  &lt;li&gt;错误信息则是红色&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;对于这些配色方案，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLAide&lt;/code&gt; 提供了 String 的 convince method 来完成 ANSI 转义：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ansi&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;CLAide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ANSI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;StringEscaper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;例如：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;example&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ansi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yellow&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;\e[33mexample\e[39m&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;example&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ansi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_red&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;\e[41mexample\e[49m&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;example&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ansi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bold&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;\e[1mexample\e[21m&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;对于 Banner 的一些高亮效果也提供了 convince method：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prettify_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ansi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;underline&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prettify_subcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chomp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ansi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;green&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prettify_option_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chomp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ansi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blue&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;PluginManager&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;pluginmanager-载入插件&quot;&gt;PluginManager 载入插件&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PluginManager&lt;/code&gt; 是 Command 的管理类，会在第一次运行命令 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.run&lt;/code&gt; 时进行加载，且仅加载命令类中指定前缀标识的文件下的命令。让我们先看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PluginManager.rb&lt;/code&gt; 的核心实现：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load_plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin_prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loaded_plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin_prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plugin_gems_for_prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin_prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;safe_activate_and_require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compact&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;plugin_gems_for_prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;glob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_plugin&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;suffix_pattern&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;latest_specs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;matches_for_glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compact&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;safe_activate_and_require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;activate&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;整体的流程大致是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load_plugins&lt;/code&gt; 并传入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugin_prefix&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugin_gems_for_prefix&lt;/code&gt; 对插件名进行处理，取出我们需要加载的文件&lt;/li&gt;
  &lt;li&gt;调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;safe_activate_and_require&lt;/code&gt; 进行对应的 gem spec 检验并对每个文件进行加载&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;CocoaPods 的插件加载正是依托于 CLAide 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load_plugins&lt;/code&gt;，它会遍历所有的 RubyGem，并搜索这些 Gem 中是否包含名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#{plugin_prefix}_plugin.rb&lt;/code&gt; 的文件。&lt;br /&gt;例如，在 Pod 命令的实现中有如下配置：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;plugin_prefixes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(claide cocoapods)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;也就是说在 Pod 命令执行前，&lt;strong&gt;它会加载所有包含 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;claide_plugin.rb&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cocoapods_plugin.rb&lt;/code&gt; 文件的 Gem&lt;/strong&gt;。通过在运行时的文件检查来加载符合要求的相关命令。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1599006816575-464e442d-5b43-475f-bc5f-4b086c59190c.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;a77fbc1d&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;用-claide-实现一款--贩卖机&quot;&gt;用 CLAide 实现一款 🥤 贩卖机&lt;/h1&gt;
&lt;p&gt;最后一节让我们一起来创建一个 CLAide 命令。需求是希望实现一个自动 🥤 贩卖机，它有如下功能：&lt;br /&gt;主要售卖 ☕️ 和 🍵，这两种 🥤 都可以按需选择是否添加 🥛 和 🍬，对于 🍬 还可以选择不同的甜度。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;☕️：对于咖啡，我们提供了：BlackEye、Affogato、CaPheSuaDa、RedTux 的口味&lt;/li&gt;
  &lt;li&gt;🍵：对于茶，你可以选择不同的品种，有黑茶、绿茶、乌龙茶和白茶，同时茶还提供了加 🧊 的选项&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;5353b1ef&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置模版项目&quot;&gt;配置模版项目&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;基于上述构想，我们最终的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeverageMaker&lt;/code&gt; 目录将由以下文件组成：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── BeverageMaker.gemspec
│   &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
├── exe
│   └── beverage-maker
├── lib
│   ├── beveragemaker
│   │   ├── &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;
│   │   │   ├── coffee.rb &lt;span class=&quot;c&quot;&gt;# 包含 abstract command 以及用于制作不同咖啡的 normal command&lt;/span&gt;
│   │   │   ├── maker.rb  &lt;span class=&quot;c&quot;&gt;# Command 抽象类&lt;/span&gt;
│   │   │   └── tea.rb    &lt;span class=&quot;c&quot;&gt;# normal command, 不同种类的 🍵 通过参数配置来完成&lt;/span&gt;
│   │   ├── command.rb
│   │   └── version.rb
│   └── beveragemaker.rb
└── spec
    ├── BeverageMaker_spec.rb
    └── spec_helper.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;24196b8c&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;0x1-生成模版项目&quot;&gt;0x1 生成模版项目&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;首先，我们使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundler gem GEM_NAME&lt;/code&gt; 命令生成一个模版项目，项目取名为 &lt;strong&gt;BeverageMaker&lt;/strong&gt;。&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BeverageMaker&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Creating&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BeverageMaker'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;MIT&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;License&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conduct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;  &lt;span class=&quot;no&quot;&gt;BeverageMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Gemfile&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;  &lt;span class=&quot;no&quot;&gt;BeverageMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BeverageMaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;  &lt;span class=&quot;no&quot;&gt;BeverageMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BeverageMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;  &lt;span class=&quot;no&quot;&gt;BeverageMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BeverageMaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gemspec&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;  &lt;span class=&quot;no&quot;&gt;BeverageMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rakefile&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Initializing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/$HOME/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Desktop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BeverageMaker&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BeverageMaker'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;was&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;successfully&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;more&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;making&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RubyGem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guides&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;creating_gem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;5b8f4f8b&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;0x2-修改-gemspec-配置&quot;&gt;0x2 修改 gemspec 配置&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;生成的项目中需要将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeverageMaker.gemspec&lt;/code&gt; 文件所包含 &lt;strong&gt;TODO&lt;/strong&gt; 的字段进行替换，作为示例项目相关链接都替换为个人主页了 😂。&lt;br /&gt;
&lt;br /&gt;另外，需要添加我们的依赖 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'claide', '&amp;gt;= 1.0.2', '&amp;lt; 2.0'&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'colored2', '~&amp;gt; 3.1'&lt;/code&gt;。&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;colored2&lt;/strong&gt; 用于 banner 信息的 ANSI 转义并使其能在终端以富文本格式输出。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;最终 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gempsc&lt;/code&gt; 配置如下：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'lib/BeverageMaker/version'&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;BeverageMaker&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BeverageMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;authors&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Edmond&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;email&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;chun574271939@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;summary&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;BeverageMaker&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;description&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;BeverageMaker&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;homepage&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://looseyi.github.io&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;license&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MIT&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;required_ruby_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Requirement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;= 2.3.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;allowed_push_host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://looseyi.github.io&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;homepage_uri&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;homepage&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;source_code_uri&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://looseyi.github.io&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;changelog_uri&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://looseyi.github.io&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;files&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'..'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;sb&quot;&gt;`git ls-files -z`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{^(test|spec|features)/}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bindir&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;exe&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;executables&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;beverage-maker&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require_paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
   
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_runtime_dependency&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'claide'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;s1&quot;&gt;'&amp;gt;= 1.0.2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt; 2.0'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_runtime_dependency&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'colored2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;s1&quot;&gt;'~&amp;gt; 3.1'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;ea906b09&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;0x3-添加命令行入口&quot;&gt;0x3 添加命令行入口&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;通过修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gemspec&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bindir&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;executables&lt;/code&gt; 字段，把最终的 binary 执行文件暴露给用户，使其成为一个真正的 CLI：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bindir&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;exe&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;executables&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;beverage-maker&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;在默认生成的模版中指定的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bindir&lt;/code&gt; 为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin&lt;/code&gt; 目录，这里我们替换为新建的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exe&lt;/code&gt; 目录，并在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exe&lt;/code&gt; 目录下创建一个名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;beverage-maker&lt;/code&gt; 的文件，它将作为 CLI 的入口，其内容如下：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'beveragemaker'&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;BeverageMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;ff7af885&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;添加命令实现&quot;&gt;添加命令实现&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;为了让 Demo 结构清晰，我们将不能类型的饮料制作分到了不同的文件和命令类中。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1598855030357-6c577c34-8687-4aa3-b495-876a2a6e4ecb.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;BeverageMaker&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;beveragemaker&quot;&gt;BeverageMaker&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;先来实现 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;beverage-maker&lt;/code&gt; 命令，它是一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abstract command&lt;/code&gt;，其内容如下：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'claide'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'colored2'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;BeverageMaker&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 引入具体的 coffee &amp;amp; tea maker&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'beveragemaker/command/coffee'&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'beveragemaker/command/tea'&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CLAide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Command&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'beverage-maker'&lt;/span&gt;  
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;abstract_command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;   
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Make delicious beverages from the comfort of your terminal.'&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;options&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'--no-milk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Don’t add milk to the beverage'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'--sweetener=[sugar|honey]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Use one of the available sweeteners'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@add_milk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flag?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'milk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@sweetener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sweetener'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate!&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@sweetener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%w(sugar honey)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@sweetener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;help!&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;`&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@sweetener&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' is not a valid sweetener.&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'* Boiling water…'&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@add_milk&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'* Adding milk…'&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@sweetener&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;* Adding &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@sweetener&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;…&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;正常来说，对于不同口味的咖啡和茶是可以用相同的命令模式来实现的，不过为了更好的展示 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLAide&lt;/code&gt; 的效果，我们将咖啡的生产配置为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abstact command&lt;/code&gt;，对于不同口味的咖啡，需要实现不同的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;normal command&lt;/code&gt;。而茶的生产直接通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;normal command&lt;/code&gt; 实现，不同品种的茶叶会以参数的形式来配置。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;Coffee&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;coffee&quot;&gt;Coffee&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;接着添加 ☕️ 的代码&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Coffee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Command&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;abstract_command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;* Grinding &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; beans…&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'* Brewing coffee…'&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'* Enjoy!'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BlackEye&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Coffee&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'A Black Eye is dripped coffee with a double shot of '&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'espresso'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;Tea&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;tea&quot;&gt;Tea&lt;/h3&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tea&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Command&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;CLAide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'FLAVOR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;options&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'--iced'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'the ice-tea version'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@flavor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift_argument&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@iced&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flag?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'iced'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@flavor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;help!&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'A flavor argument is required.'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(black green oolong white)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@flavor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;help!&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;`&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@flavor&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' is not a valid flavor.&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;789ac0b0&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装--贩卖机&quot;&gt;安装 🥤 贩卖机&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;我们知道，对于正常发布的 gem 包，可以直接通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install GEM_NAME&lt;/code&gt; 安装。&lt;br /&gt;
&lt;br /&gt;而我们的 Demo 程序并未发布，那要如何安装使用呢？幸好 Gem 提供了源码安装的方式：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem build &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.gemspec
gem &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.gem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem build&lt;/code&gt; 可以根据一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gemspec&lt;/code&gt; 生成一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gem&lt;/code&gt; 文件供 gem 安装，所以在拥有源码的情况下，执行上面命令就可以安装了。&lt;br /&gt;
&lt;br /&gt;执行结果如下：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem build &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.gemspec
WARNING:  description and summary are identical
WARNING:  See http://guides.rubygems.org/specification-reference/ &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;help
  &lt;/span&gt;Successfully built RubyGem
  Name: BeverageMaker
  Version: 0.1.0
  File: BeverageMaker-0.1.0.gem
  
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.gem

Successfully installed BeverageMaker-0.1.0
Parsing documentation &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;BeverageMaker-0.1.0
Done installing documentation &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;BeverageMaker after 0 seconds
1 gem installed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;编译通过！&lt;br /&gt;
&lt;br /&gt;现在可以开始我们的 🥤 制作啦！&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beverage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maker&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beverage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maker&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;COMMAND&lt;/span&gt;

      &lt;span class=&quot;no&quot;&gt;Make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delicious&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beverages&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comfort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yourterminal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coffee&lt;/span&gt;                    &lt;span class=&quot;no&quot;&gt;Drink&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;brewed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roasted&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coffee&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beans&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;milk&lt;/span&gt;                   &lt;span class=&quot;no&quot;&gt;Don&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;milk&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beverage&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sweetener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;honey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;no&quot;&gt;Use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;available&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sweeteners&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;                   &lt;span class=&quot;no&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tool&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verbose&lt;/span&gt;                   &lt;span class=&quot;no&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;more&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debugging&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ansi&lt;/span&gt;                   &lt;span class=&quot;no&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;without&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ANSI&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codes&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;                      &lt;span class=&quot;no&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;banner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specified&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;来一杯 black-eye ☕️，休息一下吧!&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beverage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coffee&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eye&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Boiling&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;water&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Adding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;milk&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Grinding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eye&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beans&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Brewing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coffee&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enjoy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;如需本文的 Demo 代码，请访问：&lt;a href=&quot;https://github.com/looseyi/BeverageMaker&quot;&gt;https://github.com/looseyi/BeverageMaker&lt;/a&gt;
&lt;a name=&quot;25f9c7fa&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;本文简单聊了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLAide&lt;/code&gt; 的实现，并手动制作了一款 🥤 贩卖机来展示 CALide 的命令配置。主要感受如下：&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;通过对源码对阅读，终于了解了对  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod&lt;/code&gt; 命令的的正确使用姿势&lt;/li&gt;
  &lt;li&gt;仅需简单配置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command&lt;/code&gt; banner，就能有比较精美的终端输出效果和帮助提示等&lt;/li&gt;
  &lt;li&gt;提供的抽象命令功能，方便的将相关逻辑收口到统一到命令中，方便查阅&lt;/li&gt;
  &lt;li&gt;从侧面简单了解了，如何在终端输出带富文本效果的提示信息&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;c6813027&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;知识点问题梳理&quot;&gt;知识点问题梳理&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;这里罗列了四个问题用来考察你是否已经掌握了这篇文章，如果没有建议你加入**收藏 **再次阅读：&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLAide&lt;/code&gt; 预设的 banner 有哪些，其作用分别是什么 ？&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALide&lt;/code&gt; 中设定的 Argument 有几种类型，区别是什么 ？&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALide&lt;/code&gt; 中抽象命令的和普通命令的区别 ？&lt;/li&gt;
  &lt;li&gt;要实现 CLI 需要修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gemspec&lt;/code&gt; 中的哪些配置 ？&lt;/li&gt;
&lt;/ol&gt;</content><author><name>冬瓜</name><email>gua@desgard.com</email></author><category term="CocoaPods 历险记" /><category term="Ruby" /><summary type="html">引子 在上文 整体把握 CocoaPods 核心组件 中，我们通过对 pod install 的流程的介绍，引出 CocoaPods 的各个核心组件的角色分工和其主要作用，希望通过对这些组件的使用和介绍来帮助大家更好的了解 CocoaPods 的完整工作流以及背后的原理。 今天我们主要聊一聊为 CocoaPods 提供的命令行解析的工具 CLAide，它是如何来解析 Pod 命令以及 CocoaPods 的插件机制。 Open Class 开始之前，我们需要了解一个 Ruby 的语言特性：Open Classes 在 Ruby 中，类永远是开放的，你总是可以将新的方法加入到已有的类中，除了在你自己的代码中，还可以用在标准库和内置类中，这个特性被称为 Open Classes。说到这里作为 iOS 工程师，脑中基本能闪现出 Objective-C 的 Category 或者 Swift 的 Extensions 特性。不过，这种动态替换方法的功能也称作 Monkeypatch。(🐒 到底招谁惹谁了） 下面，我们通过在 Monkey.rb 文件中添加一个自定义类 Monkey 来简单看一下该特性， class Monkey def eat puts &quot;i have banana&quot; end end monkey = Monkey.new class Monkey def eat puts &quot;I have apple&quot; end end monkey.eat 直接在 VSCode 中运行，效果如下： [Running] ruby &quot;/Users/edmond/Desktop/Monkey.rb&quot; I have apple 可以看到，Monkey 类的实例输出已经改为 I have apple。 需要注意，即使是已经创建好的实例，方法替换同样是生效的。 另外 ⚠️ Open Class 可以跨文件、跨模块进行访问的，甚至对 Ruby 内置方法的也同样适用 (谨慎)。 这强大的功能让我们可以很容易的对三方模块进行扩展，这也是 CocoaPods 的插件体系所依赖的基础。 举个例子，在 CocoaPods 主仓库 cocoapods/downloader.rb 中定义了一些 download 方法： module Pod module Downloader # ... end end 但是在 cocoapods-downloader 模块中，module Downloader 的方法并不能满足全部需求，于是在 cocoapods-downloader/api.rbapi.rb 中就对齐进行了扩展： module Pod module Downloader module API def execute_command(executable, command, raise_on_failure = false) # ... end # ... end end CLAide CLAide 虽然是一个简单的命令行解释器，但它提供了功能齐全的命令行界面和 API。它不仅负责解析我们使用到的 Pods 命令，例如：pod install, pod update 等，还可用于封装常用的一些脚本，将其打包成简单的命令行小工具。 备注：所谓命令行解释器就是从标准输入或者文件中读取命令并执行的程序。详见 Wiki。 CLAide 功能概览 我们先通过 pod --help 来查看 CLAide 的真实输出效果： $ pod Usage: $ pod COMMAND CocoaPods, the Cocoa library package manager. Commands: + cache Manipulate the CocoaPods cache + deintegrate Deintegrate CocoaPods from your project + env Display pod environment + init Generate a Podfile for the current directory ... Options: --allow-root Allows CocoaPods to run as root --silent Show nothing --version Show the version of the tool ... 👆所展示的 Usage、Commands、Options section 及其内容均是由 CALide 的输出模版 Banner 来完成的。CALide 提供了 Command 基类帮助我们快速定义出标准且美观的命令。除了 pod 命令之外，例如：Xcodeproj 所提供的命令也是由 CALide 来实现的。 CALide 还提供了一套插件加载机制在命令执行前获取所有插件中的命令，例如：cocoapods-packeger 提供的 pod package NAME [SOURCE] 就是从其 source code 中的 lib/pod/commnad/package.rb 读取出来的，它令我们仅需一份 podspec 信息，即可完成 Cocoa 依赖库的 📦。 CALide 的目录结构 对于 Ruby 的项目结构，在 Rubygems.org 中有 文件结构手册 这个标准供大家参考学习。 首先来看 CALide 项目的文件入口 lib/calide.rb： module CLAide VERSION = '1.0.3'.freeze require 'claide/ansi' require 'claide/argument' require 'claide/argv' require 'claide/command' require 'claide/help' require 'claide/informative_error' end 我们接下来分析一下 lib/cladie/ 目录下的相关代码。 Command 抽象类 Command 是用于构建命令行界面的基础抽象类。所有我们添加的命令都需要继承自 Command，这些子类可以嵌套组合成更加精细的命令。 pod 命令正是由多个 Pod::Command &amp;lt; CLAide::Command 的子类组合而成的 abstract command。当然 pod 的 subcommand 同样也能声明为 abstact command，通过这样的方式我们就能达到多级嵌套命令的效果。有抽象命令当然也需要有具体执行任务的 normal command。 举个例子： $ pod update --help Usage: $ pod update [POD_NAMES ...] Updates the Pods identified by the specified `POD_NAMES` Options: --verbose Show more debugging information --no-ansi Show output without ANSI codes --help Show help banner of specified command 对应的， pod update 这个命令的逻辑在 CLAide 中就是如下描述： module Pod class Command class Update &amp;lt; Command self.arguments = [ CLAide::Argument.new('POD_NAMES', false, true), ] self.description = &amp;lt;&amp;lt;-DESC Updates the Pods identified by the specified `POD_NAMES`. DESC def self.options [ [&quot;--sources&quot;, 'The sources from which to update dependent pods'], ['--exclude-pods', 'Pods to exclude during update'], ['--clean-install', 'Ignore the contents of the project cache and force a full pod installation'] ].concat(super) end end end end 当我们如此描述后，CLAide 会对这个类进行以下方式的解析： 此外，Command class 提供了大量基础功能，其中最核心的方法为 run，会在 normal command 小节会介绍。对于任何命令类型都可以设置以下几个属性和方法： summary: 用于简单描述该命令的作用 options: 用于返回该命令的可选项及对应的描述，返回的 options 需要通过调用 super 插入到父类的可选项前 initialize: 如果需要获取命令行传递的实参，需要通过重载 initialize 方法来获取 validate!: 用于检查输入实参的有效性，如果校验失败，会通过调用 help! 方法来输出帮助信息 help!：用于错误信息的处理和展示 注意 ⚠️：这里我们说的 abstract command 和 normal command 均是通过 Command 来实现的，只是它们的配置不同。 Abstract Command abstract command 为不提供具体命令实现的抽象容器命令类，不过它可以包含一个或多个的 subcommands。我们可以指定 subcommands 中的 normal command 为默认命令，就能将 abstract command 作为作为普通命令直接执行了。 抽象命令的现实比较简单： self.abstract_command = true 仅需设置 abstract_command，然后就可以继承它来实现普通命令或者多级嵌套的抽象命令。 以 pod 命令的实现为例： module Pod class Command &amp;lt; CLAide::Command require 'cocoapods/command/install' # 1 require 'cocoapods/command/update' # ... self.abstract_command = true self.command = 'pod' # ... end 上述通过 require 引入的 update、install 等子命令都是继承自 Pod::Command 的 normal command。 Normal Command 相对于抽象命令，普通命令就需要设置传递实参的名称和描述，以及重载 run 方法。 Arguments arguments 用于配置该命令支持的参数列表的 banner 输出，类型为 Array&amp;lt;Argument&amp;gt;]，它最终会格式化成对应的信息展示在 Usage banner 中。 我们来看 pod update 的 arguments 是如何配置的： self.arguments = [ CLAide::Argument.new('POD_NAMES', false, true), ] 其中 Argument 的构造方法如下： module CLAide class Argument def initialize(names, required, repeatable = false) @names = Array(names) @required = required @repeatable = repeatable end end 这里传入的 names 就是在 Usage banner 中输出的 [POD_NAMES ...] 。 require 表示该 Argument 是否为必传参数，可选参数会用 [ ] 将其包裹起来。也就是说 pod update 命令默认是不需要传 POD_NAMES repeatable 表示该 Argument 是否可以重复多次出现。如果设置为可重复，那么会在 names 的输出信息后面会添加 ... 表示该参数为复数参数。 举个例子： $ pod update Alamofire, SwiftyJSON 我们可以指定 pod update 仅更新特定的依赖库，如果不传 POD_NAMES 将进行全量更新。 Run 方法 在 Command 类中定义了两个 run 方法： def self.run(argv = []) # 根据文件前缀来匹配对应的插件 plugin_prefixes.each do |plugin_prefix| PluginManager.load_plugins(plugin_prefix) end argv = ARGV.coerce(argv) # 解析 argument 生成对应的 command instance command = parse(argv) ANSI.disabled = !command.ansi_output? unless command.handle_root_options(argv) command.validate! command.run end rescue Object =&amp;gt; exception handle_exception(command, exception) end def run raise 'A subclass should override the `CLAide::Command#run` method to ' \ 'actually perform some work.' end 这里的 self.run 方法是 class method，而 run 是 instanced method。对于 Ruby 不太熟悉的同学可以看看这个：What does def self.function name mean? 作为 Command 类的核心方法，类方法 self.run 将终端传入的参数解析成对应的 command 和 argv，并最终调用 command 的实例方法 run 来触发真正的命令逻辑。因此，子类需要通过重载 run 方法来完成对应命令的实现。 那么问题来了，方法 Command::parse 是如何将 run 的类方法转换为实例方法的呢？ def self.parse(argv) # 通过解析 argv 获取到与 cmd 名称 argv = ARGV.coerce(argv) cmd = argv.arguments.first # 如果 cmd 对应的 Command 类，则更新 argv，继续解析命令 if cmd &amp;amp;&amp;amp; subcommand = find_subcommand(cmd) argv.shift_argument subcommand.parse(argv) # 如果 cmd 为抽象命令且指定了默认命令，则返回默认命令继续解析参数 elsif abstract_command? &amp;amp;&amp;amp; default_subcommand load_default_subcommand(argv) else # 初始化真正的 cmd 实例 new(argv) end end 可以说，CLAide 的命令解析就是一个多叉树遍历，通过分割参数及遍历 CLAide::Command 的子类，最终找到用户输入的 normal command 并初始化返回。 这里还有一个知识点就是，CLAide::Command 是如何知道有哪些子类集成它的呢？ def self.inherited(subcommand) subcommands &amp;lt;&amp;lt; subcommand end 这里利用了 Ruby 提供的 Hook Method self.inherited 来获取它所继承的子类，并将其保存在 subcommands。 另外，这里在真正执行 self.run 方法之前会遍历当前项目所引入的 Gems 包中的指定目录下的命令插件文件，并进行插件加载，具体内容将在 PluginManager 中展开。 ARGV 传入参数 CLAide 提供了专门的类 ARGV 用于解析命令行传入的参数。主要功能是对 Parse 解析后的 tuple 列表进行各种过滤、CURD 等操作。 按照 CALide 的定义参数分三种类型： arg: 普通的实参，所谓的实参就是直接跟在命令后面的，且不带任何 -- 修饰的字符 flag: 简单理解 flag 就是限定为 bool 变量的 option 类型参数，如果 flag 前面添加带 --no- 则值为 false，否则为 true option: 可选项参数，以 -- 为前缀且以 = 作为分割符来区分 key 和 value 而在 ARGV 内部又提供了私有工具类 Parser 来解析终端的输入，其核心方法为 parse: module Parser def self.parse(argv) entries = [] copy = argv.map(&amp;amp;:to_s) double_dash = false while argument = copy.shift next if !double_dash &amp;amp;&amp;amp; double_dash = (argument == '--') type = double_dash ? :arg : argument_type(argument) parsed_argument = parse_argument(type, argument) entries &amp;lt;&amp;lt; [type, parsed_argument] end entries end # ,,, end parse 的返回值为 [Array&amp;lt;Array&amp;lt;Symbol, String, Array&amp;gt;&amp;gt;] 类型的 tuple，其中 tuple 的第一个变量为实参的类型，第二个才是对应的实参。 依旧以 pod update 为例： pod update Alamofire --no-repo-update --exclude-pods=SwiftyJSON 解析后，输出的 tuple 列表如下： [ [:arg, &quot;Alamofire&quot;], [:flag, [&quot;repo-update&quot;, false]], [:option, [&quot;exclude-pods&quot;, &quot;SwiftyJSON&quot;]] ] Banner 与输出格式化 接下来，我们再来聊聊 CLAide 提供的格式化效果的 banner。 那什么是 banner 呢？回看第一个例子 pod --help 所输出的帮助信息，它分为三个 Section： Usage：用于描该述命令的用法 Commands：用于描述该命令所包含的子命令，没有则不显示。在子命令前面存在两种类型的标识 + ：用于强调该 command 是单独添加的子命令 &amp;gt; ：用于表示指引的意思，表示该 command 是当前命令的默认实现 Options：用于描述该命令的可选项 这三段帮助信息就是对应的不同的 banner。 CLAide 对于输出的 banner 信息提供了 ANSI 转义，用于在不同的终端里显示富文本的效果。banner 的主要格式化效果如下： 对于 setcion 标题： Usage、Commands、Options 添加了下划线且加粗处理 Command 配置为绿色 Options 配置为蓝色 提示警告信息配置为黄色 错误信息则是红色 对于这些配色方案，CLAide 提供了 String 的 convince method 来完成 ANSI 转义： class String def ansi CLAide::ANSI::StringEscaper.new(self) end end 例如： &quot;example&quot;.ansi.yellow #=&amp;gt; &quot;\e[33mexample\e[39m&quot; &quot;example&quot;.ansi.on_red #=&amp;gt; &quot;\e[41mexample\e[49m&quot; &quot;example&quot;.ansi.bold #=&amp;gt; &quot;\e[1mexample\e[21m&quot; 对于 Banner 的一些高亮效果也提供了 convince method： def prettify_title(title) title.ansi.underline end def prettify_subcommand(name) name.chomp.ansi.green end def prettify_option_name(name) name.chomp.ansi.blue end PluginManager 载入插件 PluginManager 是 Command 的管理类，会在第一次运行命令 self.run 时进行加载，且仅加载命令类中指定前缀标识的文件下的命令。让我们先看 PluginManager.rb 的核心实现： def self.load_plugins(plugin_prefix) loaded_plugins[plugin_prefix] ||= plugin_gems_for_prefix(plugin_prefix).map do |spec, paths| spec if safe_activate_and_require(spec, paths) end.compact end def self.plugin_gems_for_prefix(prefix) glob = &quot;#{prefix}_plugin#{Gem.suffix_pattern}&quot; Gem::Specification.latest_specs(true).map do |spec| matches = spec.matches_for_glob(glob) [spec, matches] unless matches.empty? end.compact end def self.safe_activate_and_require(spec, paths) spec.activate paths.each { |path| require(path) } true rescue Exception =&amp;gt; exception # ... end 整体的流程大致是： 调用 load_plugins 并传入 plugin_prefix plugin_gems_for_prefix 对插件名进行处理，取出我们需要加载的文件 调用 safe_activate_and_require 进行对应的 gem spec 检验并对每个文件进行加载 CocoaPods 的插件加载正是依托于 CLAide 的 load_plugins，它会遍历所有的 RubyGem，并搜索这些 Gem 中是否包含名为 #{plugin_prefix}_plugin.rb 的文件。例如，在 Pod 命令的实现中有如下配置： self.plugin_prefixes = %w(claide cocoapods) 也就是说在 Pod 命令执行前，它会加载所有包含 claide_plugin.rb 或 cocoapods_plugin.rb 文件的 Gem。通过在运行时的文件检查来加载符合要求的相关命令。 用 CLAide 实现一款 🥤 贩卖机 最后一节让我们一起来创建一个 CLAide 命令。需求是希望实现一个自动 🥤 贩卖机，它有如下功能：主要售卖 ☕️ 和 🍵，这两种 🥤 都可以按需选择是否添加 🥛 和 🍬，对于 🍬 还可以选择不同的甜度。 ☕️：对于咖啡，我们提供了：BlackEye、Affogato、CaPheSuaDa、RedTux 的口味 🍵：对于茶，你可以选择不同的品种，有黑茶、绿茶、乌龙茶和白茶，同时茶还提供了加 🧊 的选项 配置模版项目 基于上述构想，我们最终的 BeverageMaker 目录将由以下文件组成： . ├── BeverageMaker.gemspec │ # ... ├── exe │   └── beverage-maker ├── lib │   ├── beveragemaker │   │   ├── command │   │   │   ├── coffee.rb # 包含 abstract command 以及用于制作不同咖啡的 normal command │   │   │   ├── maker.rb # Command 抽象类 │   │   │   └── tea.rb # normal command, 不同种类的 🍵 通过参数配置来完成 │   │   ├── command.rb │   │   └── version.rb │   └── beveragemaker.rb └── spec ├── BeverageMaker_spec.rb └── spec_helper.rb 0x1 生成模版项目 首先，我们使用 bundler gem GEM_NAME 命令生成一个模版项目，项目取名为 BeverageMaker。 $ bundle gem BeverageMaker Creating gem 'BeverageMaker'... MIT License enabled in config Code of conduct enabled in config create BeverageMaker/Gemfile create BeverageMaker/lib/BeverageMaker.rb create BeverageMaker/lib/BeverageMaker/version.rb create BeverageMaker/BeverageMaker.gemspec create BeverageMaker/Rakefile # ... Initializing git repo in ~/$HOME/Desktop/BeverageMaker Gem 'BeverageMaker' was successfully created. For more information on making a RubyGem visit https://bundler.io/guides/creating_gem.html 0x2 修改 gemspec 配置 生成的项目中需要将 BeverageMaker.gemspec 文件所包含 TODO 的字段进行替换，作为示例项目相关链接都替换为个人主页了 😂。 另外，需要添加我们的依赖 'claide', '&amp;gt;= 1.0.2', '&amp;lt; 2.0' 和 'colored2', '~&amp;gt; 3.1'。 colored2 用于 banner 信息的 ANSI 转义并使其能在终端以富文本格式输出。 最终 .gempsc 配置如下： require_relative 'lib/BeverageMaker/version' Gem::Specification.new do |spec| spec.name = &quot;BeverageMaker&quot; spec.version = BeverageMaker::VERSION spec.authors = [&quot;Edmond&quot;] spec.email = [&quot;chun574271939@gmail.com&quot;] spec.summary = &quot;BeverageMaker&quot; spec.description = &quot;BeverageMaker&quot; spec.homepage = &quot;https://looseyi.github.io&quot; spec.license = &quot;MIT&quot; spec.required_ruby_version = Gem::Requirement.new(&quot;&amp;gt;= 2.3.0&quot;) spec.metadata[&quot;allowed_push_host&quot;] = &quot;https://looseyi.github.io&quot; spec.metadata[&quot;homepage_uri&quot;] = spec.homepage spec.metadata[&quot;source_code_uri&quot;] = &quot;https://looseyi.github.io&quot; spec.metadata[&quot;changelog_uri&quot;] = &quot;https://looseyi.github.io&quot; spec.files = Dir.chdir(File.expand_path('..', __FILE__)) do `git ls-files -z`.split(&quot;\x0&quot;).reject { |f| f.match(%r{^(test|spec|features)/}) } end # 1 spec.bindir = &quot;exe&quot; spec.executables = &quot;beverage-maker&quot; spec.require_paths = [&quot;lib&quot;] spec.add_runtime_dependency 'claide', '&amp;gt;= 1.0.2', '&amp;lt; 2.0' spec.add_runtime_dependency 'colored2', '~&amp;gt; 3.1' end 0x3 添加命令行入口 通过修改 .gemspec 的 bindir 和 executables 字段，把最终的 binary 执行文件暴露给用户，使其成为一个真正的 CLI： spec.bindir = &quot;exe&quot; spec.executables = &quot;beverage-maker&quot; 在默认生成的模版中指定的 bindir 为 /bin 目录，这里我们替换为新建的 exe 目录，并在 exe 目录下创建一个名为 beverage-maker 的文件，它将作为 CLI 的入口，其内容如下： #!/usr/bin/env ruby require 'beveragemaker' BeverageMaker::Command.run(ARGV) 添加命令实现 为了让 Demo 结构清晰，我们将不能类型的饮料制作分到了不同的文件和命令类中。 BeverageMaker 先来实现 beverage-maker 命令，它是一个 abstract command，其内容如下： require 'claide' require 'colored2' module BeverageMaker # 引入具体的 coffee &amp;amp; tea maker require 'beveragemaker/command/coffee' require 'beveragemaker/command/tea' class Command &amp;lt; CLAide::Command self.command = 'beverage-maker' self.abstract_command = true self.description = 'Make delicious beverages from the comfort of your terminal.' def self.options [ ['--no-milk', 'Don’t add milk to the beverage'], ['--sweetener=[sugar|honey]', 'Use one of the available sweeteners'], ].concat(super) end def initialize(argv) @add_milk = argv.flag?('milk', true) @sweetener = argv.option('sweetener') super end def validate! super if @sweetener &amp;amp;&amp;amp; !%w(sugar honey).include?(@sweetener) help! &quot;`#{@sweetener}' is not a valid sweetener.&quot; end end def run puts '* Boiling water…' sleep 1 if @add_milk puts '* Adding milk…' sleep 1 end if @sweetener puts &quot;* Adding #{@sweetener}…&quot; sleep 1 end end end end 正常来说，对于不同口味的咖啡和茶是可以用相同的命令模式来实现的，不过为了更好的展示 CLAide 的效果，我们将咖啡的生产配置为 abstact command，对于不同口味的咖啡，需要实现不同的 normal command。而茶的生产直接通过 normal command 实现，不同品种的茶叶会以参数的形式来配置。 Coffee 接着添加 ☕️ 的代码 class Coffee &amp;lt; Command # ... self.abstract_command = true def run super puts &quot;* Grinding #{self.class.command} beans…&quot; sleep 1 puts '* Brewing coffee…' sleep 1 puts '* Enjoy!' end class BlackEye &amp;lt; Coffee self.summary = 'A Black Eye is dripped coffee with a double shot of ' \ 'espresso' end # ... end Tea class Tea &amp;lt; Command # ... self.arguments = [ CLAide::Argument.new('FLAVOR', true), ] def self.options [['--iced', 'the ice-tea version']].concat(super) end def initialize(argv) @flavor = argv.shift_argument @iced = argv.flag?('iced') super end def validate! super if @flavor.nil? help! 'A flavor argument is required.' end unless %w(black green oolong white).include?(@flavor) help! &quot;`#{@flavor}' is not a valid flavor.&quot; end end # ... end 安装 🥤 贩卖机 我们知道，对于正常发布的 gem 包，可以直接通过 gem install GEM_NAME 安装。 而我们的 Demo 程序并未发布，那要如何安装使用呢？幸好 Gem 提供了源码安装的方式： gem build *.gemspec gem install *.gem gem build 可以根据一个 .gemspec 生成一个 .gem 文件供 gem 安装，所以在拥有源码的情况下，执行上面命令就可以安装了。 执行结果如下： $ gem build *.gemspec WARNING: description and summary are identical WARNING: See http://guides.rubygems.org/specification-reference/ for help Successfully built RubyGem Name: BeverageMaker Version: 0.1.0 File: BeverageMaker-0.1.0.gem $ gem install *.gem Successfully installed BeverageMaker-0.1.0 Parsing documentation for BeverageMaker-0.1.0 Done installing documentation for BeverageMaker after 0 seconds 1 gem installed 编译通过！ 现在可以开始我们的 🥤 制作啦！ $ beverage-maker Usage: $ beverage-maker COMMAND Make delicious beverages from the comfort of yourterminal. Commands: + coffee Drink brewed from roasted coffee beans Options: --no-milk Don’t add milk to the beverage --sweetener=[sugar|honey] Use one of the available sweeteners --version Show the version of the tool --verbose Show more debugging information --no-ansi Show output without ANSI codes --help Show help banner of specified command 来一杯 black-eye ☕️，休息一下吧! $ beverage-maker coffee black-eye * Boiling water… * Adding milk… * Grinding black-eye beans… * Brewing coffee… * Enjoy! 如需本文的 Demo 代码，请访问：https://github.com/looseyi/BeverageMaker 总结 本文简单聊了 CLAide 的实现，并手动制作了一款 🥤 贩卖机来展示 CALide 的命令配置。主要感受如下： 通过对源码对阅读，终于了解了对  pod 命令的的正确使用姿势 仅需简单配置 Command banner，就能有比较精美的终端输出效果和帮助提示等 提供的抽象命令功能，方便的将相关逻辑收口到统一到命令中，方便查阅 从侧面简单了解了，如何在终端输出带富文本效果的提示信息 知识点问题梳理 这里罗列了四个问题用来考察你是否已经掌握了这篇文章，如果没有建议你加入**收藏 **再次阅读： CLAide 预设的 banner 有哪些，其作用分别是什么 ？ CALide 中设定的 Argument 有几种类型，区别是什么 ？ CALide 中抽象命令的和普通命令的区别 ？ 要实现 CLI 需要修改 .gemspec 中的哪些配置 ？</summary></entry><entry><title type="html">CocoaPods 中的 Ruby 特性之 Mix-in</title><link href="https://www.desgard.com/2020/08/26/cocoapods-story-ex-1.html" rel="alternate" type="text/html" title="CocoaPods 中的 Ruby 特性之 Mix-in" /><published>2020-08-26T00:00:00-08:00</published><updated>2020-08-26T00:00:00-08:00</updated><id>https://www.desgard.com/2020/08/26/cocoapods-story-ex-1</id><content type="html" xml:base="https://www.desgard.com/2020/08/26/cocoapods-story-ex-1.html">&lt;p&gt;CocoaPods 是使用 Ruby 这门脚本语言实现的工具。Ruby 有很多优质的特性被 CocoaPods 所利用，为了在后续的源码阅读中不会被这些用法阻塞，所以在这个系列中，会给出一些 CocoaPods 的番外篇，来介绍 Ruby 及其当中的一些语言思想。&lt;/p&gt;

&lt;h1 id=&quot;面向对象中的继承&quot;&gt;面向对象中的继承&lt;/h1&gt;

&lt;h2 id=&quot;构造一个动物类&quot;&gt;构造一个动物类&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mix-in&lt;/code&gt; 在有些编程书中也被翻译成「混入模式」。根据字面意思，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mix-in&lt;/code&gt; 就是通过“混入”额外的功能，从而简化多层次的复杂继承关系。&lt;/p&gt;

&lt;p&gt;我们举一个例子来说明。假如我们设计了一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Animal&lt;/code&gt; 类，并且要实现一下四种动物的定义：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dog&lt;/code&gt; - 狗&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bat&lt;/code&gt; - 蝙蝠&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parrot&lt;/code&gt; - 鹦鹉&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ostrich&lt;/code&gt; - 鸵鸟&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果按照哺乳动物和鸟类动物来归类，则可以设计出以下类的层级关系：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia20201008221926.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但如果按照“能跑”和“能飞”来归类，则应该设计以下的类层次：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia20201008221940.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是在我们的代码中又想拥有之前哺乳动物和鸟类动物也增加进来，那么我们就要设计更加复杂的层次：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;动物
    &lt;ul&gt;
      &lt;li&gt;哺乳动物（Mammal）
        &lt;ul&gt;
          &lt;li&gt;能飞（MFly）&lt;/li&gt;
          &lt;li&gt;能跑（MRun）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;鸟类动物（Bird）
        &lt;ul&gt;
          &lt;li&gt;能飞（BFly）&lt;/li&gt;
          &lt;li&gt;能跑（BRun）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia20201008221955.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果继续增加分类手段，例如“宠物类”和“非宠物类”，则类的数量就会以指数级别增长，难以维护且可读性极差。&lt;/p&gt;

&lt;p&gt;那么我们应该用什么方式来解决这个问题呢？&lt;/p&gt;

&lt;h2 id=&quot;使用多继承解决&quot;&gt;使用多继承解决&lt;/h2&gt;

&lt;p&gt;首先，我们可以按照哺乳动物和鸟类动物来进行继承关系的描述。由于 Python 支持多继承语法，所以我们下面用 Python 来描述一下使用多继承来描述上述场景：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 动物大类
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mammal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bird&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在，我们给动物加上加上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Runnable&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flyable&lt;/code&gt; 的功能，当我们定义好这两个描述能力的类，使用多继承来描述每个动物即可：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 描述能力的类
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Running...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Flyable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Flying...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 每个动物
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mammal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mammal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flyable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过多重继承，一个子类可以获得多个父类的所有功能，并且其继承的关系树如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia20201008222008.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;多继承的问题&quot;&gt;多继承的问题&lt;/h2&gt;

&lt;p&gt;Ruby 这门语言是不支持多继承的，取而代之是使用 Mix-in。那么多继承到底有什么样的问题呢？&lt;/p&gt;

&lt;p&gt;在「松本行弘的程序世界」中，作者列举了以下三点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;结构复杂化&lt;/strong&gt; - 如果是单继承，一个类的父类是什么，父类的父类是什么，这些十分明确。因为单一继承关系中，是一棵多叉树结构。但是如果是多重继承，继承关系就十分复杂了。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;优先顺序模糊&lt;/strong&gt; - 假如有 A、C 同时继承了基类，B 继承了 A，然后 D 又同时继承了 B 和 C，所以此时 D 继承父类方法的顺序应该是 D ⇒ B ⇒ A ⇒ C 还是 D ⇒ B ⇒ C ⇒ A？又或者是其他顺序？如此优先顺序十分模糊。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;功能冲突&lt;/strong&gt; - 因为多重继承有多个父类，所以当不同的父类中更有相同的方法时就会产生冲突。如果 B 和 C 同时又有相同的方法时，D 继承的是哪个实现就会产生冲突。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但是单一继承又会有上文提到的缺陷。那么我们要如何平衡这个问题呢？其实方法很简单，&lt;strong&gt;引入“受限制的多重继承”特性即可。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia20201008222026.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;抛开各个编程语言只讨论面向对象思想，继承关系在最终的表现结果上往往只有两种含义：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;类有哪些方法&lt;/strong&gt; - 子类对于父类属性描述的继承；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;类的方法具体的实现是什么样的&lt;/strong&gt; - 子类对于父类方法实现逻辑的继承；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在静态语言中，这两者的区别更加的明显，几乎都是以关键字来做含义的隔离。例如 Java 中用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extend&lt;/code&gt; 实现单一继承，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;implements&lt;/code&gt; 来间接实现多重继承；在 Swift 中，我们也会使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protocol&lt;/code&gt; 来区别两种场景。&lt;/p&gt;

&lt;p&gt;但是仅仅是区分了上述两种继承含义，这并不完美。Java 中用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;implements&lt;/code&gt; 来实现多重继承，虽然避免来功能的冲突性，但是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;implements&lt;/code&gt; 是无法共享的（这里的前提是 Java 8 之前，在 Java 8 之后，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface&lt;/code&gt; 可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; 关键字增加默认实现），&lt;strong&gt;如果想实现共享就要用组合模式来调用别的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt; 从而实现共通功能，十分麻烦&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;在如此背景下我们来介绍 Ruby 中的 Mix-in 模式。&lt;/p&gt;

&lt;h1 id=&quot;mix-in-以及其意义&quot;&gt;Mix-in 以及其意义&lt;/h1&gt;

&lt;p&gt;上面说到，我们需要提供一种“受限制的多重继承”的特殊的继承方式，我们将这种继承简化称呼为&lt;strong&gt;规格继承&lt;/strong&gt;。简单来讲，&lt;strong&gt;规格继承就是指不但会将方法名继承下去，并且可以定义某些继承方法的默认实现。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如果你是 Swift 玩家，那么会立马反应过来，这就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protocol&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extension&lt;/code&gt; 默认实现。&lt;/strong&gt;是的，Mix-in 就是这个含义。在 Ruby 中 Mix-in 的语法是通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt; 方式来实现的，我们来举个例子说明一下。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mammal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bird&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RunMixin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I can run&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;FlyMinxin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I can fly&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mammal&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RunMixin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parrot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bird&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FlyMinxin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# &quot;I can run&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;parrot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Parrot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parrot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# &quot;I can fly&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过这种方式，我们将 Run 和 Fly 的能力抽象成了两个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module&lt;/code&gt; ，当描述对应 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt; 时需要的时候，就使用 Min-in 模式将其 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt; 就可以获得对应能力。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia20201008222041.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么如果我们将 Mammal 哺乳动物和 Bird 鸟类动物封装成 Mix-in ，并将 Fly 和 Run 做成一级 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt; 这样可以吗？&lt;strong&gt;在实现上是可以的，但是并不推荐&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;这里简单说一下原因：因为 Mix-in 期望是一个行为的集合，并且这个行为可以添加到任意的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt; 中。从某种程度上来说，&lt;strong&gt;继承描述的是“它是什么”，而 Mix-in 描述的是“它能做什么”&lt;/strong&gt;。从这一点出发，&lt;strong&gt;Mix-in 的设计是单一职责的&lt;/strong&gt;，并且 &lt;strong&gt;Mix-in 实际上对宿主类一无所知&lt;/strong&gt;，&lt;strong&gt;也有一种情况是只要宿主类有某个属性，就可以加入 Mix-in&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&quot;mix-in-in-cocoapods&quot;&gt;Mix-in in CocoaPods&lt;/h1&gt;

&lt;p&gt;在 CocoaPods 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.rb&lt;/code&gt; 中，其中有很多关于 Pods 的配置字段、CocoaPods 的一些关键目录，并且还持有一些单例的 Manager。&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;/2020/08/17/cocoapods-story-2.html&quot;&gt;「整体把握 CocoaPods 核心组件」&lt;/a&gt;一文中，我们介绍来 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt; 的过程都是在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;installer.rb&lt;/code&gt; 中完成的，而这个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Installer&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt; ，中的定义是这样的：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Pod&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Installer&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Analyzer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                     &lt;span class=&quot;s1&quot;&gt;'cocoapods/installer/analyzer'&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:InstallationOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;s1&quot;&gt;'cocoapods/installer/installation_options'&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:PostInstallHooksContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;s1&quot;&gt;'cocoapods/installer/post_install_hooks_context'&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#...&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Mixin&lt;/span&gt;
  
    &lt;span class=&quot;c1&quot;&gt;#...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Installer&lt;/code&gt; 拿入了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Config::Mixin&lt;/code&gt; 这个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module&lt;/code&gt;。而这个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; 属性其实就是 CocoaPods 中的&lt;strong&gt;一些全局配置变量&lt;/strong&gt;和&lt;strong&gt;一些配置字段&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;例如我们在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write_lockfiles&lt;/code&gt;  方法中来查看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; 的用法：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write_lockfiles&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 获取 lockfile 数据&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@lockfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate_lockfile&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;# 将 lockfile 数据写入 Podfile.lock &lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;- Writing Lockfile in &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lockfile_path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@lockfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write_to_disk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lockfile_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;# 将 lockfile 数据写入 manifest.lock &lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;- Writing Manifest in &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sandbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;manifest_path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@lockfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write_to_disk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sandbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;manifest_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里面的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; 就是通过 Mix-in 方式拿进来的变量，意在更加容易的去访问那些全局变量和配置字段。&lt;/p&gt;

&lt;p&gt;我们在写入文件的位置下一个断点，可以清楚的打印 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lockfile_path&lt;/code&gt; ；当然我也可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; 打印其他的重要信息：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lockfile_path&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# lockfile 的 Path&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;installation_root&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 执行 install 的目录&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;podfile&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;# 解析后的 Podfile 实例&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sandbox&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;# 当前工程的 sandbox 目录&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;具体的属性可以查看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.rb&lt;/code&gt; 中的代码来确定。既然 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Config&lt;/code&gt; 已经变成一个 Mix-in ，在 CocoaPods 中引入的地方自然就会很多了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia20201008222206.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;简单说一句-duck-typing-思想&quot;&gt;简单说一句 Duck Typing 思想&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;下面是一点对于编程思想的思考，可以不看。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最后我们来说一个高级的东西（其实只是名字很高级），那就是 Duck Typing，在很多书中也被称作&lt;strong&gt;鸭子类型&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;Duck Typing 描述的是这么一个思想：&lt;strong&gt;如果一个事物不是鸭子（Duck），如果它走起路来像一只鸭子，叫起来也像一只鸭子，即我们可以说它从表现来看像一只鸭子，那么我们就可以认为它是一只鸭子&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;这种思想应用到编程中是什么样的呢？&lt;strong&gt;简而言之，一个约定要求必须实现某些功能，而某个类实现类这个功能，就可以把这个类当作约定的具体实现来使用&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;我们从这个角度来看，其实 Mix-in 这种模式就更加区别于多继承，而是一种 Duck Typing 思想的语法糖。我们不用将一层层 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface&lt;/code&gt; 全部继承，而是&lt;strong&gt;声明即实现&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;Duck Typing 是一种设计语言的思想，如果你想了解的更多，也可以从 Duck Test 这种测试方式开始了解。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia20201008222222.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;本文从 CocoaPods 中使用到的 Ruby 语法特性说起，讲述了在 Ruby 当中，为了解决多继承中的问题从而引入的 Mix-in 模式，并且 Ruby 也为其定义了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt; 关键字的语法糖。从 Mix-in 模式里，我们可以了解多继承的一些缺点，并且懂得提出了 Mix-in 是为了解决什么问题。最后稍微引入了 Duck Typing 这种程序设计思想，有兴趣的朋友可以自行研究。&lt;/p&gt;

&lt;h1 id=&quot;知识点问题梳理&quot;&gt;知识点问题梳理&lt;/h1&gt;

&lt;p&gt;这里罗列了一些问题用来考察你是否已经掌握了这篇文章，如果没有建议你加入&lt;strong&gt;收藏&lt;/strong&gt;再次阅读：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;什么是 Mix-in，它与多继承是什么关系？&lt;/li&gt;
  &lt;li&gt;Mix-in 在大多数编程语言中是如何落地的？分别说说 Java、Ruby、Swift？&lt;/li&gt;
  &lt;li&gt;多继承的缺点有什么？&lt;/li&gt;
  &lt;li&gt;在 CocoaPods 中是如何使用 Mix-in 特性的？&lt;/li&gt;
&lt;/ol&gt;</content><author><name>冬瓜</name><email>gua@desgard.com</email></author><category term="CocoaPods 历险记" /><category term="Ruby in CocoaPods" /><category term="Ruby" /><summary type="html">CocoaPods 是使用 Ruby 这门脚本语言实现的工具。Ruby 有很多优质的特性被 CocoaPods 所利用，为了在后续的源码阅读中不会被这些用法阻塞，所以在这个系列中，会给出一些 CocoaPods 的番外篇，来介绍 Ruby 及其当中的一些语言思想。 面向对象中的继承 构造一个动物类 Mix-in 在有些编程书中也被翻译成「混入模式」。根据字面意思，Mix-in 就是通过“混入”额外的功能，从而简化多层次的复杂继承关系。 我们举一个例子来说明。假如我们设计了一个 Animal 类，并且要实现一下四种动物的定义： Dog - 狗 Bat - 蝙蝠 Parrot - 鹦鹉 Ostrich - 鸵鸟 如果按照哺乳动物和鸟类动物来归类，则可以设计出以下类的层级关系： 但如果按照“能跑”和“能飞”来归类，则应该设计以下的类层次： 但是在我们的代码中又想拥有之前哺乳动物和鸟类动物也增加进来，那么我们就要设计更加复杂的层次： 动物 哺乳动物（Mammal） 能飞（MFly） 能跑（MRun） 鸟类动物（Bird） 能飞（BFly） 能跑（BRun） 如果继续增加分类手段，例如“宠物类”和“非宠物类”，则类的数量就会以指数级别增长，难以维护且可读性极差。 那么我们应该用什么方式来解决这个问题呢？ 使用多继承解决 首先，我们可以按照哺乳动物和鸟类动物来进行继承关系的描述。由于 Python 支持多继承语法，所以我们下面用 Python 来描述一下使用多继承来描述上述场景： class Animal(object): pass # 动物大类 class Mammal(Animal): pass class Bird(Animal): pass 现在，我们给动物加上加上 Runnable 和 Flyable 的功能，当我们定义好这两个描述能力的类，使用多继承来描述每个动物即可： # 描述能力的类 class Runnable(object): def run(self): print('Running...') class Flyable(object): def fly(self): print('Flying...') # 每个动物 class Dog(Mammal, Runnable): pass class Bat(Mammal, Flyable): pass 通过多重继承，一个子类可以获得多个父类的所有功能，并且其继承的关系树如下： 多继承的问题 Ruby 这门语言是不支持多继承的，取而代之是使用 Mix-in。那么多继承到底有什么样的问题呢？ 在「松本行弘的程序世界」中，作者列举了以下三点： 结构复杂化 - 如果是单继承，一个类的父类是什么，父类的父类是什么，这些十分明确。因为单一继承关系中，是一棵多叉树结构。但是如果是多重继承，继承关系就十分复杂了。 优先顺序模糊 - 假如有 A、C 同时继承了基类，B 继承了 A，然后 D 又同时继承了 B 和 C，所以此时 D 继承父类方法的顺序应该是 D ⇒ B ⇒ A ⇒ C 还是 D ⇒ B ⇒ C ⇒ A？又或者是其他顺序？如此优先顺序十分模糊。 功能冲突 - 因为多重继承有多个父类，所以当不同的父类中更有相同的方法时就会产生冲突。如果 B 和 C 同时又有相同的方法时，D 继承的是哪个实现就会产生冲突。 但是单一继承又会有上文提到的缺陷。那么我们要如何平衡这个问题呢？其实方法很简单，引入“受限制的多重继承”特性即可。 抛开各个编程语言只讨论面向对象思想，继承关系在最终的表现结果上往往只有两种含义： 类有哪些方法 - 子类对于父类属性描述的继承； 类的方法具体的实现是什么样的 - 子类对于父类方法实现逻辑的继承； 在静态语言中，这两者的区别更加的明显，几乎都是以关键字来做含义的隔离。例如 Java 中用 extend 实现单一继承，使用 implements 来间接实现多重继承；在 Swift 中，我们也会使用 class 和 protocol 来区别两种场景。 但是仅仅是区分了上述两种继承含义，这并不完美。Java 中用 implements 来实现多重继承，虽然避免来功能的冲突性，但是 implements 是无法共享的（这里的前提是 Java 8 之前，在 Java 8 之后，interface 可以使用 default 关键字增加默认实现），如果想实现共享就要用组合模式来调用别的 class 从而实现共通功能，十分麻烦。 在如此背景下我们来介绍 Ruby 中的 Mix-in 模式。 Mix-in 以及其意义 上面说到，我们需要提供一种“受限制的多重继承”的特殊的继承方式，我们将这种继承简化称呼为规格继承。简单来讲，规格继承就是指不但会将方法名继承下去，并且可以定义某些继承方法的默认实现。 如果你是 Swift 玩家，那么会立马反应过来，这就是 protocol 的 extension 默认实现。是的，Mix-in 就是这个含义。在 Ruby 中 Mix-in 的语法是通过 module 和 include 方式来实现的，我们来举个例子说明一下。 class Animal end class Mammal &amp;lt; Animal end class Bird &amp;lt; Animal end module RunMixin def run puts &quot;I can run&quot; end end module FlyMinxin def fly puts &quot;I can fly&quot; end end class Dog &amp;lt; Mammal include RunMixin end class Parrot &amp;lt; Bird include FlyMinxin end dog = Dog.new dog.run # &quot;I can run&quot; parrot = Parrot.new parrot.fly # &quot;I can fly&quot; 通过这种方式，我们将 Run 和 Fly 的能力抽象成了两个 module ，当描述对应 class 时需要的时候，就使用 Min-in 模式将其 include 就可以获得对应能力。 那么如果我们将 Mammal 哺乳动物和 Bird 鸟类动物封装成 Mix-in ，并将 Fly 和 Run 做成一级 class 这样可以吗？在实现上是可以的，但是并不推荐。 这里简单说一下原因：因为 Mix-in 期望是一个行为的集合，并且这个行为可以添加到任意的 class 中。从某种程度上来说，继承描述的是“它是什么”，而 Mix-in 描述的是“它能做什么”。从这一点出发，Mix-in 的设计是单一职责的，并且 Mix-in 实际上对宿主类一无所知，也有一种情况是只要宿主类有某个属性，就可以加入 Mix-in。 Mix-in in CocoaPods 在 CocoaPods 的 config.rb 中，其中有很多关于 Pods 的配置字段、CocoaPods 的一些关键目录，并且还持有一些单例的 Manager。 在「整体把握 CocoaPods 核心组件」一文中，我们介绍来 pod install 的过程都是在 installer.rb 中完成的，而这个 Installer 的 class ，中的定义是这样的： module Pod class Installer autoload :Analyzer, 'cocoapods/installer/analyzer' autoload :InstallationOptions, 'cocoapods/installer/installation_options' autoload :PostInstallHooksContext, 'cocoapods/installer/post_install_hooks_context' #... include Config::Mixin #... end end 我们可以看到 Installer 拿入了 Config::Mixin 这个 module。而这个 config 属性其实就是 CocoaPods 中的一些全局配置变量和一些配置字段。 例如我们在 write_lockfiles 方法中来查看 config 的用法： def write_lockfiles # 获取 lockfile 数据 @lockfile = generate_lockfile # 将 lockfile 数据写入 Podfile.lock UI.message &quot;- Writing Lockfile in #{UI.path config.lockfile_path}&quot; do @lockfile.write_to_disk(config.lockfile_path) end # 将 lockfile 数据写入 manifest.lock UI.message &quot;- Writing Manifest in #{UI.path sandbox.manifest_path}&quot; do @lockfile.write_to_disk(sandbox.manifest_path) end end 这里面的 config 就是通过 Mix-in 方式拿进来的变量，意在更加容易的去访问那些全局变量和配置字段。 我们在写入文件的位置下一个断点，可以清楚的打印 lockfile_path ；当然我也可以使用 config 打印其他的重要信息： config.lockfile_path # lockfile 的 Path config.installation_root # 执行 install 的目录 config.podfile # 解析后的 Podfile 实例 config.sandbox # 当前工程的 sandbox 目录 # ... 具体的属性可以查看 config.rb 中的代码来确定。既然 Config 已经变成一个 Mix-in ，在 CocoaPods 中引入的地方自然就会很多了： 简单说一句 Duck Typing 思想 下面是一点对于编程思想的思考，可以不看。 最后我们来说一个高级的东西（其实只是名字很高级），那就是 Duck Typing，在很多书中也被称作鸭子类型。 Duck Typing 描述的是这么一个思想：如果一个事物不是鸭子（Duck），如果它走起路来像一只鸭子，叫起来也像一只鸭子，即我们可以说它从表现来看像一只鸭子，那么我们就可以认为它是一只鸭子。 这种思想应用到编程中是什么样的呢？简而言之，一个约定要求必须实现某些功能，而某个类实现类这个功能，就可以把这个类当作约定的具体实现来使用。 我们从这个角度来看，其实 Mix-in 这种模式就更加区别于多继承，而是一种 Duck Typing 思想的语法糖。我们不用将一层层 interface 全部继承，而是声明即实现。 Duck Typing 是一种设计语言的思想，如果你想了解的更多，也可以从 Duck Test 这种测试方式开始了解。 总结 本文从 CocoaPods 中使用到的 Ruby 语法特性说起，讲述了在 Ruby 当中，为了解决多继承中的问题从而引入的 Mix-in 模式，并且 Ruby 也为其定义了 module 和 include 关键字的语法糖。从 Mix-in 模式里，我们可以了解多继承的一些缺点，并且懂得提出了 Mix-in 是为了解决什么问题。最后稍微引入了 Duck Typing 这种程序设计思想，有兴趣的朋友可以自行研究。 知识点问题梳理 这里罗列了一些问题用来考察你是否已经掌握了这篇文章，如果没有建议你加入收藏再次阅读： 什么是 Mix-in，它与多继承是什么关系？ Mix-in 在大多数编程语言中是如何落地的？分别说说 Java、Ruby、Swift？ 多继承的缺点有什么？ 在 CocoaPods 中是如何使用 Mix-in 特性的？</summary></entry><entry><title type="html">整体把握 CocoaPods 核心组件</title><link href="https://www.desgard.com/2020/08/17/cocoapods-story-2.html" rel="alternate" type="text/html" title="整体把握 CocoaPods 核心组件" /><published>2020-08-17T00:00:00-08:00</published><updated>2020-08-17T00:00:00-08:00</updated><id>https://www.desgard.com/2020/08/17/cocoapods-story-2</id><content type="html" xml:base="https://www.desgard.com/2020/08/17/cocoapods-story-2.html">&lt;h1 id=&quot;引子&quot;&gt;引子&lt;/h1&gt;

&lt;p&gt;在上文 &lt;a href=&quot;/2020/06/11/cocoapods-story-1.html&quot;&gt;版本管理工具及 Ruby 工具链环境&lt;/a&gt; 中，我们聊到如何统一管理团队小伙伴的 CocoaPods 生产环境及使用到的 Ruby 工具链。今天让我们将目光转到 CocoaPods 身上，一起来聊聊它的主要构成，以及各个组件在整个 Pods 工作流的关系。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;为了整体把握 &lt;em&gt;CocoaPods&lt;/em&gt; 这个项目，建议大家去入门一下 Ruby 这门脚本语言。另外本文基于 CocoaPods 1.9.2 版本。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;cocoapods-的核心组件&quot;&gt;CocoaPods 的核心组件&lt;/h1&gt;

&lt;p&gt;作为包管理工具，CocoaPods 随着 Apple 生态的蓬勃发展也在不断迭代和进化，并且各部分核心功能也都演化出相对独立的组件。这些功能独立的组件，均拆分出一个个独立的 Gem 包，而 CocoaPods 则是这些组件的“集大成者”。&lt;/p&gt;

&lt;h2 id=&quot;cocoapods-依赖总览&quot;&gt;CocoaPods 依赖总览&lt;/h2&gt;

&lt;p&gt;我们知道在 Pod 管理的项目中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 文件里描述了它所依赖的 dependencies，类似的 Gem 的依赖可以在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; 中查看。那 CocoaPods 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; 有哪些依赖呢？&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;SKIP_UNRELEASED_VERSIONS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://rubygems.org'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gemspec&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://github.com/segiddins/json.git'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'seg-1.7.7-ruby-2.2'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:development&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cp_gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'claide'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                &lt;span class=&quot;s1&quot;&gt;'CLAide'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cp_gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-core'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'Core'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1-9-stable'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cp_gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-deintegrate'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-deintegrate'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cp_gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-downloader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;'cocoapods-downloader'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cp_gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-plugins'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;s1&quot;&gt;'cocoapods-plugins'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cp_gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-search'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;s1&quot;&gt;'cocoapods-search'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cp_gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-stats'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;s1&quot;&gt;'cocoapods-stats'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cp_gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-trunk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;s1&quot;&gt;'cocoapods-trunk'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cp_gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-try'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;s1&quot;&gt;'cocoapods-try'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cp_gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'molinillo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;             &lt;span class=&quot;s1&quot;&gt;'Molinillo'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cp_gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'nanaimo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;               &lt;span class=&quot;s1&quot;&gt;'Nanaimo'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cp_gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'xcodeproj'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;             &lt;span class=&quot;s1&quot;&gt;'Xcodeproj'&lt;/span&gt;
   
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods-dependencies'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'~&amp;gt; 1.0.beta.1'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Integration tests&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'diffy'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'clintegracon'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Code Quality&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'inch_by_inch'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rubocop'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'danger'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:debugging&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods_debug'&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rb-fsevent'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'kicker'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'awesome_print'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ruby-prof'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:platforms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; 中我们看到很多通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cp_gem&lt;/code&gt; 装载的 Gem 库，其方法如下：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cp_gem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repo_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'master'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;path: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SKIP_UNRELEASED_VERSIONS&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repo_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/CocoaPods/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repo_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.git&quot;&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;它是用于方便开发和调试，当 &lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;**SKIP_UNRELEASED_VERSIONS**&lt;/code&gt;&lt;/em&gt; 为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false &amp;amp;&amp;amp; path&lt;/code&gt; 为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; 时会使用与本地的 &lt;em&gt;CocoaPods&lt;/em&gt; 项目同级目录下的 git 仓库，否则会使用对应的项目直接通过 Gem 加载。&lt;/p&gt;

&lt;p&gt;通过简单的目录分割和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; 管理，就实现了最基本又最直观的&lt;strong&gt;热插拔&lt;/strong&gt;，对组件开发十分友好。所以你只要将多个仓库如下图方式排列，即可实现跨仓库组件开发：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gua&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;staff&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Jul&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CocoaPods&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gua&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;staff&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Jul&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Core&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;lrwxr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gua&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;staff&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Jul&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Molinillo&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;lrwxr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gua&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;staff&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Aug&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Xcodeproj&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;lrwxr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gua&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;staff&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Jul&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cocoapods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downloader&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;组件构成和对应职责&quot;&gt;组件构成和对应职责&lt;/h2&gt;

&lt;p&gt;通过上面对于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; 的简单分析，可以看出 &lt;em&gt;CocoaPods&lt;/em&gt; 不仅仅是一个仓库那么简单，它作为一个三方库版本管理工具，对自身组件的管理和组件化也是十分讲究的。我们继续来看这份 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; 中的核心开发组件：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1597548346444-64c7e854-dc0c-4c68-b4d4-5d96724dacc0.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;claide&quot;&gt;CLAide&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;The CLAide gem is a simple command line parser, which provides an API that allows you to quickly create a full featured command-line interface.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/CocoaPods/CLAide&quot;&gt;CLAide&lt;/a&gt; 虽然是一个简单的命令行解释器，但它提供了功能齐全的命令行界面和 API。它不仅负责解析我们使用到的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods&lt;/code&gt; 命令，如：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod update&lt;/code&gt; 等，还可用于封装常用的一些脚本，将其打包成简单的命令行小工具。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ps. 所谓命令行解释器就是从标准输入或者文件中读取命令并执行的程序。详见 &lt;a href=&quot;https://www.wikiwand.com/en/Command-line_argument_parsing&quot;&gt;Wiki&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;cocoapods-core&quot;&gt;cocoapods-core&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;The CocoaPods-Core gem provides support to work with the models of CocoaPods, for example the Podspecs or the Podfile.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/CocoaPods/Core&quot;&gt;CocoaPods-Core&lt;/a&gt; 用于 CocoaPods 中模板文件的解析，包括 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.podspec&lt;/code&gt;，以及所有的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.lock&lt;/code&gt; 文件中特殊的 YAML 文件。&lt;/p&gt;

&lt;h3 id=&quot;cocoapods-downloader&quot;&gt;cocoapods-downloader&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Cocoapods-downloader gem is a small library that provides downloaders for various source control types (HTTP/SVN/Git/Mercurial). It can deal with tags, commits, revisions, branches, extracting files from zips and almost anything these source control system would use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/CocoaPods/cocoapods-downloader&quot;&gt;Cocoapods-Downloader&lt;/a&gt; 是用于下载源码的小工具，它支持各种类型的版本管理工具，包括 HTTP / SVN / Git / Mercurial。它可以提供 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tags&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commites&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;revisions&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;branches&lt;/code&gt; 以及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zips&lt;/code&gt; 文件的下载和解压缩操作。&lt;/p&gt;

&lt;h3 id=&quot;molinillo&quot;&gt;Molinillo&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Molinillo gem is a generic dependency resolution algorithm, used in CocoaPods, Bundler and RubyGems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/CocoaPods/Molinillo/blob/master/ARCHITECTURE.md&quot;&gt;Molinillo&lt;/a&gt; 是 CocoaPods 对于依赖仲裁算法的封装，它是一个具有前向检察的回溯算法。不仅在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods&lt;/code&gt; 中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bundler&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RubyGems&lt;/code&gt; 也是使用的这一套仲裁算法。&lt;/p&gt;

&lt;h3 id=&quot;xcodeproj&quot;&gt;Xcodeproj&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Xcodeproj gem lets you create and modify Xcode projects from Ruby. Script boring management tasks or build Xcode-friendly libraries. Also includes support for Xcode workspaces (.xcworkspace) and configuration files (.xcconfig).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/CocoaPods/Xcodeproj&quot;&gt;Xcodeproj&lt;/a&gt; 可通过 Ruby 来操作 Xcode 项目的创建和编辑等。可友好的支持 Xcode 项目的脚本管理和 libraries 构建，以及 Xcode 工作空间 (.xcworkspace)  和配置文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xcconfig&lt;/code&gt; 的管理。&lt;/p&gt;

&lt;h3 id=&quot;cocoapods-plugins&quot;&gt;cocoapods-plugins&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;CocoaPods plugin which shows info about available CocoaPods plugins or helps you get started developing a new plugin. Yeah, it’s very meta.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cocoapods-plugins&lt;/code&gt; 插件管理功能，其中有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod plugin&lt;/code&gt; 全套命令，支持对于 CocoaPods 插件的列表一览（list）、搜索（search）、创建（create）功能。
当然，上面还有很多组件这里就不一一介绍了。通过查看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; 可以看出 Pod 对于组件的拆分粒度是比较细微的，通过对各种组件的组合达到现在的完整版本。这些组件中，笔者的了解也十分有限，不过我们会在之后的一系列文章来逐一介绍学习。&lt;/p&gt;

&lt;h1 id=&quot;cocoapods-初探&quot;&gt;CocoaPods 初探&lt;/h1&gt;

&lt;p&gt;接下来，结合 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt; 安装流程来展示各个组件在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods&lt;/code&gt; 工作流中的上下游关系。&lt;/p&gt;

&lt;h2 id=&quot;命令入口&quot;&gt;命令入口&lt;/h2&gt;

&lt;p&gt;每当我们输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod xxx&lt;/code&gt; 命令时，系统会首先调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod&lt;/code&gt; 命令。所有的命令都是在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin&lt;/code&gt; 目录下存放的脚本，当然 Ruby 环境的也不例外。我们可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;which pod&lt;/code&gt; 来查看命令所在位置：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;which pod
/Users/edmond/.rvm/gems/ruby-2.6.1/bin/pod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里的显示路径不是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local/bin/pod&lt;/code&gt; 的原因是因为使用 &lt;em&gt;RVM&lt;/em&gt; 进行版本控制的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; 命令来查看一下这个入口脚本执行了什么。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /Users/edmond/.rvm/gems/ruby-2.6.1/bin/pod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出如下：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby_executable_hooks&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rubygems'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;= 0.a&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\A_(.*)_\z/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;correct?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:activate_bin_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;activate_bin_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cocoapods'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pod'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cocoapods&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bin_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cocoapods&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;pod&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;程序 CocoaPods 是作为 Gem 被安装的，此脚本用于唤起 CocoaPods。逻辑比较简单，就是一个单纯的命令转发。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem.activate_bin_path&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem.bin_path&lt;/code&gt; 用于找到 CocoaPods 的安装目录 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cocoapods/bin&lt;/code&gt;，最终加载该目录下的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/pod&lt;/code&gt; 文件&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ... 忽略一些对于编码处理的代码&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 这里手动输出一下调用栈，来关注一下&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;caller&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 如果环境配置中指定了 ruby-prof 配置文件，会对执行命令过程进行性能监控&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile_filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'COCOAPODS_PROFILE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ruby-prof'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 依据配置文件类型加载不同的 reporter 解析器&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile_filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RubyProf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;profile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Pod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一起来查看一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod&lt;/code&gt; 命令的输出结果：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pod
/Users/edmond/.rvm/gems/ruby-2.6.1/bin/pod:24:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;load&lt;span class=&quot;s1&quot;&gt;'
/Users/edmond/.rvm/gems/ruby-2.6.1/bin/pod:24:in `&amp;lt;main&amp;gt;'&lt;/span&gt;
/Users/edmond/.rvm/gems/ruby-2.6.1/bin/ruby_executable_hooks:24:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
/Users/edmond/.rvm/gems/ruby-2.6.1/bin/ruby_executable_hooks:24:in `&amp;lt;main&amp;gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ruby_executable_hooks 通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin&lt;/code&gt; 目录下的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod&lt;/code&gt; 入口唤醒，再通过 &lt;a href=&quot;https://www.infoq.com/articles/eval-options-in-ruby/&quot;&gt;eval&lt;/a&gt; 的手段调起我们需要的 CocoaPods 工程。这是 RVM 的自身行为，它利用了 &lt;a href=&quot;https://github.com/rvm/executable-hooks&quot;&gt;executable-hook&lt;/a&gt; 来注入 Gems 插件来定制扩展。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ps. 大多数动态语言都支持 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt; 这一神奇的函数。打  Lisp 开始就支持了，它通过接受一个字符串类型作为参数，将其解析成语句并混合在当前作用域内运行。详细可以参考这篇 &lt;a href=&quot;https://ruby-china.org/topics/31465&quot;&gt;文章&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在入口的最后部分，通过调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pod::Command.run(ARGV)&lt;/code&gt;，实例化了一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLAide::Command&lt;/code&gt; 对象，开始我们的 &lt;strong&gt;CLAide 命令解析阶段&lt;/strong&gt;。这里不对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLAide&lt;/code&gt; 这个命令解析工具做过多的分析，这个是后面系列文章的内容。这里我们仅仅需要知道：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;每个 CLAide  命令的执行，最终都会对应到具体 Command Class 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; 方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;Pod 命令对应的 run 方法实现如下：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Pod&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Command&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Command&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# ... &lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 判断是否存在 Podfile 文件&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify_podfile_exists!&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 从 Config 中获取一个 Instraller 实例&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;installer_for_config&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 默认是不执行 update&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;repo_update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repo_update?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deployment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@deployment&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# install 的真正过程&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install!&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述所见的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command::Install&lt;/code&gt; 类对应的命令为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt;。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt; 过程是依赖于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 文件的，所以在入口处会做检测，如果不存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 则直接抛出 &lt;strong&gt;No ‘Podfile’ found in the project directory&lt;/strong&gt; 的异常 警告并结束命令。&lt;/p&gt;

&lt;h2 id=&quot;执行功能主体&quot;&gt;执行功能主体&lt;/h2&gt;

&lt;p&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;installer&lt;/code&gt; 实例组装完成之后，调用其 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install!&lt;/code&gt; 方法，这时候才进入了我们 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt; 命令的主体部分，流程如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1597548346455-524a8937-0a85-4875-ac07-c195a7208b4c.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对应的实现如下：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;install!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prepare&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resolve_dependencies&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;download_dependencies&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;validate_targets&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;installation_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;skip_pods_project_generation?&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;show_skip_pods_project_generation_message&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;integrate&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;write_lockfiles&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;perform_post_install_actions&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;integrate&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;generate_pods_project&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;installation_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;integrate_targets?&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;integrate_user_project&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Skipping User Project Integration'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;1-install-环境准备prepare&quot;&gt;1. Install 环境准备（prepare）&lt;/h3&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepare&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 如果检测出当前目录是 Pods，直接 raise 终止&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sandbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Command should be run from a directory outside Pods directory.'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Current directory is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Informative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Preparing'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 如果 lock 文件的 CocoaPods 主版本和当前版本不同，将以新版本的配置对 xcodeproj 工程文件进行更新&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;deintegrate_if_different_major_version&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 对 sandbox(Pods) 目录建立子目录结构&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sandbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepare&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 检测 PluginManager 是否有 pre-install 的 plugin&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ensure_plugins_are_installed!&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 执行插件中 pre-install 的所有 hooks 方法&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;run_plugins_pre_install_hooks&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prepare&lt;/code&gt; 阶段会将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt; 的环境准备完成，包括&lt;strong&gt;版本一致性&lt;/strong&gt;、&lt;strong&gt;目录结构&lt;/strong&gt;以及将 &lt;em&gt;pre-install&lt;/em&gt; 的装载插件脚本全部取出，并执行对应的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_install&lt;/code&gt; hook。&lt;/p&gt;

&lt;h3 id=&quot;2-解决依赖冲突resolve_dependencies&quot;&gt;2. 解决依赖冲突（resolve_dependencies）&lt;/h3&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolve_dependencies&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 获取 Sources&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plugin_sources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_source_provider_hooks&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 创建一个 Analyzer&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;analyzer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_analyzer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin_sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 如果带有 repo_update 标记&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Updating local specs repositories'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 执行 Analyzer 的更新 Repo 操作&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;analyzer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update_repositories&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repo_update?&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Analyzing dependencies'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 从 analyzer 取出最新的分析结果，@analysis_result，@aggregate_targets，@pod_targets&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;analyze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;analyzer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 拼写错误降级识别，白名单过滤&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;validate_build_configurations&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 如果 deployment? 为 true，会验证 podfile &amp;amp; lockfile 是否需要更新&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Verifying no changes'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify_no_podfile_changes!&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify_no_lockfile_changes!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deployment?&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;analyzer&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;依赖解析过程就是通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile.lock&lt;/code&gt; 以及沙盒中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest&lt;/code&gt; 生成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Analyzer&lt;/code&gt; 对象。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Analyzer&lt;/code&gt; 内部会使用 &lt;em&gt;Molinillo&lt;/em&gt; （具体的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Molinillo::DependencyGraph&lt;/code&gt; 图算法）解析得到一张依赖关系表。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ps. 通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Analyzer&lt;/code&gt; 能获取到很多依赖信息，例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 文件的依赖分析结果，也可以从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;specs_by_target&lt;/code&gt; 来查看各个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target&lt;/code&gt; 相关的 specs。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;另外，需要注意的是 analyze 的过程中有一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_download&lt;/code&gt; 的阶段，即在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--verbose&lt;/code&gt; 下看到的 &lt;strong&gt;Fetching external sources&lt;/strong&gt; 过程。这个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_download&lt;/code&gt; 阶段&lt;strong&gt;不属于依赖下载&lt;/strong&gt;过程，而是在当前的&lt;strong&gt;依赖分析&lt;/strong&gt;阶段。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ps. 该过程主要是解决当我们在通过 Git 地址引入的 Pod 仓库的情况下，系统无法从默认的 Source 拿到对应的 Spec，需要直接访问我们的 Git 地址下载仓库的 zip 包，并取出对应的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;podspec&lt;/code&gt; 文件，从而进行对比分析。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;3-下载依赖文件download_dependencies&quot;&gt;3. 下载依赖文件（download_dependencies）&lt;/h3&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;download_dependencies&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Downloading dependencies'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 初始化 sandbox 文件访问器&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_file_accessors&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 构造 Pod Source Installer&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;install_pod_sources&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 执行 podfile 定义的 pre install 的 hooks&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;run_podfile_pre_install_hooks&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 根据配置清理 pod sources 信息，主要是清理无用 platform 相关内容&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;clean_pod_sources&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_file_accessors&lt;/code&gt; 中会创建沙盒目录的文件访问器，通过构造 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileAccessor&lt;/code&gt; 实例来解析沙盒中的各种文件。接着是最重要的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install_pod_sources&lt;/code&gt; 过程，它会调用对应 Pod 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install!&lt;/code&gt; 方法进行资源下载。&lt;br /&gt;
&lt;br /&gt;先来看看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install_pod_sources&lt;/code&gt; 方法的实现：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;install_pod_sources&lt;/span&gt;
 &lt;span class=&quot;vi&quot;&gt;@installed_specs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;# install 的 Pod 只需要这两种状态，added 和 changed 状态的并集&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;pods_to_install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sandbox_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;added&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sandbox_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;changed&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;title_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verbose_prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-&amp;gt; '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;green&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;root_specs&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;root_specs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;# 将 Podfile 解析后排序处理&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;root_specs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;# 如果是 added 或 changed 状态的 Pod&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pods_to_install&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;# 如果是 changed 状态并且 manifest 已经有记录&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sandbox_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sandbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;manifest&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;# 版本更新&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;current_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;# 被更新版本记录&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;previous_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sandbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;manifest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;# 变动记录&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;has_changed_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous_version&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;# 找到第一个包含 spec.name 的 Pod，获取对应的 Repo，其实就是 find 方法&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;current_repo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;analysis_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;specs_by_source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;detect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;# 获取当前仓库&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;current_repo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;# 获取之前该仓库的信息&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;previous_spec_repo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sandbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;manifest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;spec_repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;# 是否仓库有变动&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;has_changed_repo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;previous_spec_repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_repo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_repo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous_spec_repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

       &lt;span class=&quot;c1&quot;&gt;# 通过 title 输出上面的详细变更信息&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;# 非 changed 状态，展示 Installing 这个是经常见的 log&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Installing &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
     &lt;span class=&quot;no&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;titled_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;# 通过 name 拿到对应的 installer，记录到 @pod_installers 中&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;install_source_of_pod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;# 如果没有 changed 情况，直接展示 Using，也是经常见到的 log&lt;/span&gt;
     &lt;span class=&quot;no&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;titled_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Using &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;# # 通过 sandbox, specs 的 platform 信息生成 Installer 实例，记录到 @pod_installers 中&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;create_pod_installer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 通过缓存返回 PodSourceInstaller 实例&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_pod_installer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pod_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;specs_by_platform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs_for_pod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pod_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;# 当通过 pod_name 无法找到对应的 pod_target 或 platform 配置，主动抛出错误信息&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs_by_platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;requiring_targets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod_targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recursive_dependent_targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;any?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pod_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# message = &quot;...&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StandardError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 通过 sandbox, specs 的 platform 信息生成 Installer 实例&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pod_installer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PodSourceInstaller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sandbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;podfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specs_by_platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:can_cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;installation_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clean?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pod_installers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod_installer&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pod_installer&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 如果 resolver 声明一个 Pod 已经安装或者已经存在，将会将其删除并重新安装。如果不存在则直接安装。&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;install_source_of_pod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pod_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pod_installer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_pod_installer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pod_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pod_installer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install!&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@installed_specs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pod_installer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;specs_by_platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在方法的开始，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root_specs&lt;/code&gt; 方法是通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;analysis_result&lt;/code&gt; 拿出所有根 spec。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;root_specs&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;analysis_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;specifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uniq&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;下面再来看看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod_installer&lt;/code&gt; 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install!&lt;/code&gt; 方法，主要是通过调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cocoapods-downloader&lt;/code&gt; 组件，将 Pod 对应的 Source 下载到本地。实现如下：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;install!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;download_source&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predownloaded?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local?&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;PodSourcePreparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root_spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepare!&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sandbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remove_local_podspec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predownloaded?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;external?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-验证-targets-validate_targets&quot;&gt;4. 验证 targets (validate_targets)&lt;/h3&gt;

&lt;p&gt;用来验证之前流程中的产物 (pod 所生成的 Targets) 的合法性。主要作用就是构造 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TargetValidator&lt;/code&gt;，并执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validate!&lt;/code&gt; 方法：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate_targets&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Xcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TargetValidator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aggregate_targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod_targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;installation_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;validate!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;verify_no_duplicate_framework_and_library_names&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;verify_no_static_framework_transitive_dependencies&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;verify_swift_pods_swift_version&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;verify_swift_pods_have_module_dependencies&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;verify_no_multiple_project_names&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;installation_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate_multiple_pod_projects?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;验证环节在整个 Install 过程中仅占很小的一部分。因为只是验证部分，是完全解耦的。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;verify_no_duplicate_framework_and_library_names&lt;/strong&gt;&lt;br /&gt;验证是否有重名的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;framework&lt;/code&gt;，如果有冲突会直接抛出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frameworks with conflicting names&lt;/code&gt; 异常。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;verify_no_static_framework_transitive_dependencies&lt;/strong&gt;&lt;br /&gt;验证动态库中是否有静态链接库 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.a&lt;/code&gt; 或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.framework&lt;/code&gt;) 依赖，如果存在则会触发 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transitive dependencies that include static binaries...&lt;/code&gt; 错误。假设存在以下场景：
    &lt;ol&gt;
      &lt;li&gt;组件 A 和组件 B 同时依赖了组件 C，C 为静态库，如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Weibo_SDK&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;组件 A 依赖组件 B，而组件 B 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.podspec&lt;/code&gt; 文件中存在以下设置时，组件 B 将被判定为存在静态库依赖：
        &lt;ol&gt;
          &lt;li&gt;podspec 设置了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s.static_framework = true&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;podspec 以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s.dependency 'xxx_SDK&lt;/code&gt; 依赖了静态库 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xxx_SDK&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;podspec 以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s.vendored_libraries = 'libxxx.a'&lt;/code&gt; 方式内嵌了静态库 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libxxx&lt;/code&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;此时如果项目的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 设置了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use_framework!&lt;/code&gt; 以动态链接方式打包的时，则会触发该错误。
&lt;strong&gt;问题原因&lt;/strong&gt;
Podfile 中不使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use_frameworks!&lt;/code&gt; 时，每个 pod 是会生成相应的 .a（静态链接库）文件，然后通过 static libraries 来管理 pod 代码，在 Linked 时会包含该 pod 引用的其他的 pod 的 .a 文件。
Podfile 中使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use_frameworks!&lt;/code&gt; 时是会生成相应的 .framework 文件，然后通过 dynamic frameworks 的方式来管理 pod 代码，在 Linked 时会包含该 pod 引用的其他的 pod 的 .framework 文件。
上述场景中虽然以 framework 的方式引用了 B 组件，然而 B 组件实际上是一个静态库，需要拷贝并链接到该 pod 中，然而 dynamic frameworks 方式并不会这么做，所以就报错了。
&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;修改 pod 库中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;podspec&lt;/code&gt;，增加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod_target_xcconfig&lt;/code&gt;，定义好 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMEWORK_SEARCH_PATHS&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OTHER_LDFLAGS&lt;/code&gt; 两个环境变量；&lt;/li&gt;
    &lt;li&gt;hook &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verify_no_static_framework_transitive_dependencies&lt;/code&gt; 的方法，将其干掉！&lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/issues/3289&quot;&gt;对应 issue&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;修改 pod 库中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;podspec&lt;/code&gt;，开启 static_framework 配置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s.static_framework = true&lt;/code&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;verify_swift_pods_swift_version&lt;/strong&gt;&lt;br /&gt;确保 Swift Pod 的 Swift 版本正确配置且互相兼容的。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;verify_swift_pods_have_module_dependencies&lt;/strong&gt;&lt;br /&gt;检测 Swift 库的依赖库是否支持了 module，这里的 module 主要是针对 Objective-C 库而言。&lt;br /&gt;首先，Swift 是天然支持 module 系统来管理代码的，Swift Module 是构建在 &lt;a href=&quot;http://clang.llvm.org/docs/Modules.html&quot;&gt;LLVM Module&lt;/a&gt; 之上的模块系统。Swift 库在解析后会生成对应的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modulemap&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;umbrella.h&lt;/code&gt; 文件，这是 LLVM Module 的标配，同样 Objective-C 也是支持 LLVM Module。&lt;strong&gt;当我们以 Dynamic Framework 的方式引入 Objective-C 库时，Xcode 支持配置并生成 header，而静态库 .a 需要自己编写对应的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;umbrella.h&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modulemap&lt;/code&gt;&lt;/strong&gt;。&lt;br /&gt;其次，如果你的 Swift Pod 依赖了 Objective-C 库，又希望以静态链接的方式来打包 Swift Pod 时，就需要保证 Objective-C 库启用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modular_headers&lt;/code&gt;，这样 CocoaPods 会为我们生成对应 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modulemap&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;umbrella.h&lt;/code&gt; 来支持 LLVM Module。你可以从这个地址 - &lt;a href=&quot;http://blog.cocoapods.org/CocoaPods-1.5.0/&quot;&gt;http://blog.cocoapods.org/CocoaPods-1.5.0/&lt;/a&gt; 查看到更多细节。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;verify_no_pods_used_with_multiple_swift_versions&lt;/strong&gt;&lt;br /&gt;检测是否所有的 &lt;em&gt;Pod Target&lt;/em&gt; 中版本一致性问题。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;用一个流程图来概括这一验证环节：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1597632866989-c759882d-e061-49e5-974e-abaa9d429746.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5生成工程-integrate&quot;&gt;5.生成工程 (Integrate)&lt;/h3&gt;

&lt;p&gt;工程文件的生成是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt; 的最后一步，他会将之前版本仲裁后的所有组件通过 Project 文件的形式组织起来，并且会对 Project 中做一些用户指定的配置。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;integrate&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;generate_pods_project&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;installation_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;integrate_targets?&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 集成用户配置，读取依赖项，使用 xcconfig 来配置&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;integrate_user_project&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Skipping User Project Integration'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate_pods_project&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 创建 stage sanbox 用于保存安装前的沙盒状态，以支持增量编译的对比&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stage_sandbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sandbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod_targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 检查是否支持增量编译，如果支持将返回 cache result&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cache_analysis_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;analyze_project_cache&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 需要重新生成的 target&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pod_targets_to_generate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache_analysis_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pod_targets_to_generate&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 需要重新生成的 aggregate target&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;aggregate_targets_to_generate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache_analysis_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aggregate_targets_to_generate&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 清理需要重新生成 target 的 header 和 pod folders&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;clean_sandbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pod_targets_to_generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 生成 Pod Project，组装 sandbox 中所有 Pod 的 path、build setting、源文件引用、静态库文件、资源文件等&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_and_save_projects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pod_targets_to_generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aggregate_targets_to_generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;cache_analysis_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build_configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache_analysis_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;project_object_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# SandboxDirCleaner 用于清理增量 pod 安装中的无用 headers、target support files 目录&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;SandboxDirCleaner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sandbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod_targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aggregate_targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clean!&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 更新安装后的 cache 结果到目录 `Pods/.project_cache` 下&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;update_project_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache_analysis_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_installation_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install&lt;/code&gt; 过程中，除去依赖仲裁部分和下载部分的时间消耗，在工程文件生成也会有相对较大的时间开销。这里往往也是速度优化核心位置。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;ed8d8f7d&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;0x6-写入依赖-write_lockfiles&quot;&gt;0x6 写入依赖 (write_lockfiles)&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;将依赖更新写入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile.lock&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Manifest.lock&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;7a0ee745&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;0x7-结束回调perform_post_install_action&quot;&gt;0x7 结束回调（perform_post_install_action）&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;最后一步收尾工作，为所有插件提供 post-installation 操作以及 hook。&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform_post_install_actions&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 调用 HooksManager 执行每个插件的 post_install 方法 &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;run_plugins_post_install_hooks&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 打印过期 pod target 警告&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;warn_for_deprecations&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 如果 pod 配置了 script phases 脚本，会主动输出一条提示消息&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;warn_for_installed_script_phases&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 输出结束信息 `Pod installation complete!`&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print_post_install_message&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;核心组件在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt; 各阶段的作用如下：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1597548346418-0d77991c-01f8-4615-b17c-1feecb5187c5.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;当我们知道 CocoaPods 在 install 的大致过程后，我们可以对其做一些修改和控制。例如知道了插件的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_install&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post_install&lt;/code&gt; 的具体时机，我们就可以在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 中执行对应的 Ruby 脚本，达到我们的预期。同时了解 install 过程也有助于我们进行每个阶段的性能分析，以优化和提高 Install 效率。&lt;br /&gt;
&lt;br /&gt;后续，将学习 CocoaPods 中每一个组件的实现，将所有的问题在代码中找到答案。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;c6813027&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;知识点问题梳理&quot;&gt;知识点问题梳理&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;这里罗列了四个问题用来考察你是否已经掌握了这篇文章，如果没有建议你加入&lt;strong&gt;收藏&lt;/strong&gt;再次阅读：&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;简单概述 CocoaPods 的核心模块？&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod&lt;/code&gt; 命令是如何找到并启动 CocoaPods 程序的？&lt;/li&gt;
  &lt;li&gt;简述 pod install 流程？&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolve_dependencies&lt;/code&gt; 阶段中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_download&lt;/code&gt; 是为了解决什么问题？&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validate_targets&lt;/code&gt; 都做了哪些校验工作？&lt;/li&gt;
&lt;/ol&gt;</content><author><name>冬瓜</name><email>gua@desgard.com</email></author><category term="CocoaPods 历险记" /><category term="Ruby" /><summary type="html">引子 在上文 版本管理工具及 Ruby 工具链环境 中，我们聊到如何统一管理团队小伙伴的 CocoaPods 生产环境及使用到的 Ruby 工具链。今天让我们将目光转到 CocoaPods 身上，一起来聊聊它的主要构成，以及各个组件在整个 Pods 工作流的关系。 为了整体把握 CocoaPods 这个项目，建议大家去入门一下 Ruby 这门脚本语言。另外本文基于 CocoaPods 1.9.2 版本。 CocoaPods 的核心组件 作为包管理工具，CocoaPods 随着 Apple 生态的蓬勃发展也在不断迭代和进化，并且各部分核心功能也都演化出相对独立的组件。这些功能独立的组件，均拆分出一个个独立的 Gem 包，而 CocoaPods 则是这些组件的“集大成者”。 CocoaPods 依赖总览 我们知道在 Pod 管理的项目中，Podfile 文件里描述了它所依赖的 dependencies，类似的 Gem 的依赖可以在 Gemfile 中查看。那 CocoaPods 的 Gemfile 有哪些依赖呢？ SKIP_UNRELEASED_VERSIONS = false # ... source 'https://rubygems.org' gemspec gem 'json', :git =&amp;gt; 'https://github.com/segiddins/json.git', :branch =&amp;gt; 'seg-1.7.7-ruby-2.2' group :development do cp_gem 'claide', 'CLAide' cp_gem 'cocoapods-core', 'Core', '1-9-stable' cp_gem 'cocoapods-deintegrate', 'cocoapods-deintegrate' cp_gem 'cocoapods-downloader', 'cocoapods-downloader' cp_gem 'cocoapods-plugins', 'cocoapods-plugins' cp_gem 'cocoapods-search', 'cocoapods-search' cp_gem 'cocoapods-stats', 'cocoapods-stats' cp_gem 'cocoapods-trunk', 'cocoapods-trunk' cp_gem 'cocoapods-try', 'cocoapods-try' cp_gem 'molinillo', 'Molinillo' cp_gem 'nanaimo', 'Nanaimo' cp_gem 'xcodeproj', 'Xcodeproj' gem 'cocoapods-dependencies', '~&amp;gt; 1.0.beta.1' # ... # Integration tests gem 'diffy' gem 'clintegracon' # Code Quality gem 'inch_by_inch' gem 'rubocop' gem 'danger' end group :debugging do gem 'cocoapods_debug' gem 'rb-fsevent' gem 'kicker' gem 'awesome_print' gem 'ruby-prof', :platforms =&amp;gt; [:ruby] end 上面的 Gemfile 中我们看到很多通过 cp_gem 装载的 Gem 库，其方法如下： def cp_gem(name, repo_name, branch = 'master', path: false) return gem name if SKIP_UNRELEASED_VERSIONS opts = if path { :path =&amp;gt; &quot;../#{repo_name}&quot; } else url = &quot;https://github.com/CocoaPods/#{repo_name}.git&quot; { :git =&amp;gt; url, :branch =&amp;gt; branch } end gem name, opts end 它是用于方便开发和调试，当 **SKIP_UNRELEASED_VERSIONS** 为 false &amp;amp;&amp;amp; path 为 true 时会使用与本地的 CocoaPods 项目同级目录下的 git 仓库，否则会使用对应的项目直接通过 Gem 加载。 通过简单的目录分割和 Gemfile 管理，就实现了最基本又最直观的热插拔，对组件开发十分友好。所以你只要将多个仓库如下图方式排列，即可实现跨仓库组件开发： $ ls -l lrwxr-xr-x 1 gua staff 31 Jul 30 21:34 CocoaPods lrwxr-xr-x 1 gua staff 26 Jul 31 13:27 Core lrwxr-xr-x 1 gua staff 31 Jul 31 10:14 Molinillo lrwxr-xr-x 1 gua staff 31 Aug 15 11:32 Xcodeproj lrwxr-xr-x 1 gua staff 42 Jul 31 10:14 cocoapods-downloader 组件构成和对应职责 通过上面对于 Gemfile 的简单分析，可以看出 CocoaPods 不仅仅是一个仓库那么简单，它作为一个三方库版本管理工具，对自身组件的管理和组件化也是十分讲究的。我们继续来看这份 Gemfile 中的核心开发组件： CLAide The CLAide gem is a simple command line parser, which provides an API that allows you to quickly create a full featured command-line interface. CLAide 虽然是一个简单的命令行解释器，但它提供了功能齐全的命令行界面和 API。它不仅负责解析我们使用到的 Pods 命令，如：pod install, pod update 等，还可用于封装常用的一些脚本，将其打包成简单的命令行小工具。 ps. 所谓命令行解释器就是从标准输入或者文件中读取命令并执行的程序。详见 Wiki。 cocoapods-core The CocoaPods-Core gem provides support to work with the models of CocoaPods, for example the Podspecs or the Podfile. CocoaPods-Core 用于 CocoaPods 中模板文件的解析，包括 Podfile、.podspec，以及所有的 .lock 文件中特殊的 YAML 文件。 cocoapods-downloader The Cocoapods-downloader gem is a small library that provides downloaders for various source control types (HTTP/SVN/Git/Mercurial). It can deal with tags, commits, revisions, branches, extracting files from zips and almost anything these source control system would use. Cocoapods-Downloader 是用于下载源码的小工具，它支持各种类型的版本管理工具，包括 HTTP / SVN / Git / Mercurial。它可以提供 tags、commites，revisions，branches 以及 zips 文件的下载和解压缩操作。 Molinillo The Molinillo gem is a generic dependency resolution algorithm, used in CocoaPods, Bundler and RubyGems. Molinillo 是 CocoaPods 对于依赖仲裁算法的封装，它是一个具有前向检察的回溯算法。不仅在 Pods 中，Bundler 和 RubyGems 也是使用的这一套仲裁算法。 Xcodeproj The Xcodeproj gem lets you create and modify Xcode projects from Ruby. Script boring management tasks or build Xcode-friendly libraries. Also includes support for Xcode workspaces (.xcworkspace) and configuration files (.xcconfig). Xcodeproj 可通过 Ruby 来操作 Xcode 项目的创建和编辑等。可友好的支持 Xcode 项目的脚本管理和 libraries 构建，以及 Xcode 工作空间 (.xcworkspace)  和配置文件 .xcconfig 的管理。 cocoapods-plugins CocoaPods plugin which shows info about available CocoaPods plugins or helps you get started developing a new plugin. Yeah, it’s very meta. cocoapods-plugins 插件管理功能，其中有 pod plugin 全套命令，支持对于 CocoaPods 插件的列表一览（list）、搜索（search）、创建（create）功能。 当然，上面还有很多组件这里就不一一介绍了。通过查看 Gemfile 可以看出 Pod 对于组件的拆分粒度是比较细微的，通过对各种组件的组合达到现在的完整版本。这些组件中，笔者的了解也十分有限，不过我们会在之后的一系列文章来逐一介绍学习。 CocoaPods 初探 接下来，结合 pod install 安装流程来展示各个组件在 Pods 工作流中的上下游关系。 命令入口 每当我们输入 pod xxx 命令时，系统会首先调用 pod 命令。所有的命令都是在 /bin 目录下存放的脚本，当然 Ruby 环境的也不例外。我们可以通过 which pod 来查看命令所在位置： $ which pod /Users/edmond/.rvm/gems/ruby-2.6.1/bin/pod 这里的显示路径不是 /usr/local/bin/pod 的原因是因为使用 RVM 进行版本控制的。 我们通过 cat 命令来查看一下这个入口脚本执行了什么。 $ cat /Users/edmond/.rvm/gems/ruby-2.6.1/bin/pod 输出如下： #!/usr/bin/env ruby_executable_hooks require 'rubygems' version = &quot;&amp;gt;= 0.a&quot; str = ARGV.first if str str = str.b[/\A_(.*)_\z/, 1] if str and Gem::Version.correct?(str) version = str ARGV.shift end end if Gem.respond_to?(:activate_bin_path) load Gem.activate_bin_path('cocoapods', 'pod', version) else gem &quot;cocoapods&quot;, version load Gem.bin_path(&quot;cocoapods&quot;, &quot;pod&quot;, version) end 程序 CocoaPods 是作为 Gem 被安装的，此脚本用于唤起 CocoaPods。逻辑比较简单，就是一个单纯的命令转发。Gem.activate_bin_path 和 Gem.bin_path 用于找到 CocoaPods 的安装目录 cocoapods/bin，最终加载该目录下的 /pod 文件 #!/usr/bin/env ruby # ... 忽略一些对于编码处理的代码 require 'cocoapods' # 这里手动输出一下调用栈，来关注一下 puts caller # 如果环境配置中指定了 ruby-prof 配置文件，会对执行命令过程进行性能监控 if profile_filename = ENV['COCOAPODS_PROFILE'] require 'ruby-prof' # 依据配置文件类型加载不同的 reporter 解析器 # ... File.open(profile_filename, 'w') do |io| reporter.new(RubyProf.profile { Pod::Command.run(ARGV) }).print(io) end else Pod::Command.run(ARGV) end 一起来查看一下 pod 命令的输出结果： $ pod /Users/edmond/.rvm/gems/ruby-2.6.1/bin/pod:24:in `load' /Users/edmond/.rvm/gems/ruby-2.6.1/bin/pod:24:in `&amp;lt;main&amp;gt;' /Users/edmond/.rvm/gems/ruby-2.6.1/bin/ruby_executable_hooks:24:in `eval' /Users/edmond/.rvm/gems/ruby-2.6.1/bin/ruby_executable_hooks:24:in `&amp;lt;main&amp;gt;' ruby_executable_hooks 通过 bin 目录下的 pod 入口唤醒，再通过 eval 的手段调起我们需要的 CocoaPods 工程。这是 RVM 的自身行为，它利用了 executable-hook 来注入 Gems 插件来定制扩展。 ps. 大多数动态语言都支持 eval 这一神奇的函数。打  Lisp 开始就支持了，它通过接受一个字符串类型作为参数，将其解析成语句并混合在当前作用域内运行。详细可以参考这篇 文章。 在入口的最后部分，通过调用 Pod::Command.run(ARGV)，实例化了一个 CLAide::Command 对象，开始我们的 CLAide 命令解析阶段。这里不对 CLAide 这个命令解析工具做过多的分析，这个是后面系列文章的内容。这里我们仅仅需要知道： 每个 CLAide  命令的执行，最终都会对应到具体 Command Class 的 run 方法。 Pod 命令对应的 run 方法实现如下： module Pod class Command class Install &amp;lt; Command # ... def run # 判断是否存在 Podfile 文件 verify_podfile_exists! # 从 Config 中获取一个 Instraller 实例 installer = installer_for_config # 默认是不执行 update installer.repo_update = repo_update?(:default =&amp;gt; false) installer.update = false installer.deployment = @deployment # install 的真正过程 installer.install! end end end end 上述所见的 Command::Install 类对应的命令为 pod install。pod install 过程是依赖于 Podfile 文件的，所以在入口处会做检测，如果不存在 Podfile 则直接抛出 No ‘Podfile’ found in the project directory 的异常 警告并结束命令。 执行功能主体 在 installer 实例组装完成之后，调用其 install! 方法，这时候才进入了我们 pod install 命令的主体部分，流程如下图： 对应的实现如下： def install! prepare resolve_dependencies download_dependencies validate_targets if installation_options.skip_pods_project_generation? show_skip_pods_project_generation_message else integrate end write_lockfiles perform_post_install_actions end def integrate generate_pods_project if installation_options.integrate_targets? integrate_user_project else UI.section 'Skipping User Project Integration' end end 1. Install 环境准备（prepare） def prepare # 如果检测出当前目录是 Pods，直接 raise 终止 if Dir.pwd.start_with?(sandbox.root.to_path) message = 'Command should be run from a directory outside Pods directory.' message &amp;lt;&amp;lt; &quot;\n\n\tCurrent directory is #{UI.path(Pathname.pwd)}\n&quot; raise Informative, message end UI.message 'Preparing' do # 如果 lock 文件的 CocoaPods 主版本和当前版本不同，将以新版本的配置对 xcodeproj 工程文件进行更新 deintegrate_if_different_major_version # 对 sandbox(Pods) 目录建立子目录结构 sandbox.prepare # 检测 PluginManager 是否有 pre-install 的 plugin ensure_plugins_are_installed! # 执行插件中 pre-install 的所有 hooks 方法 run_plugins_pre_install_hooks end end 在 prepare 阶段会将 pod install 的环境准备完成，包括版本一致性、目录结构以及将 pre-install 的装载插件脚本全部取出，并执行对应的 pre_install hook。 2. 解决依赖冲突（resolve_dependencies） def resolve_dependencies # 获取 Sources plugin_sources = run_source_provider_hooks # 创建一个 Analyzer analyzer = create_analyzer(plugin_sources) # 如果带有 repo_update 标记 UI.section 'Updating local specs repositories' do # 执行 Analyzer 的更新 Repo 操作 analyzer.update_repositories end if repo_update? UI.section 'Analyzing dependencies' do # 从 analyzer 取出最新的分析结果，@analysis_result，@aggregate_targets，@pod_targets analyze(analyzer) # 拼写错误降级识别，白名单过滤 validate_build_configurations end # 如果 deployment? 为 true，会验证 podfile &amp;amp; lockfile 是否需要更新 UI.section 'Verifying no changes' do verify_no_podfile_changes! verify_no_lockfile_changes! end if deployment? analyzer end 依赖解析过程就是通过 Podfile、Podfile.lock 以及沙盒中的 manifest 生成 Analyzer 对象。Analyzer 内部会使用 Molinillo （具体的是 Molinillo::DependencyGraph 图算法）解析得到一张依赖关系表。 ps. 通过 Analyzer 能获取到很多依赖信息，例如 Podfile 文件的依赖分析结果，也可以从 specs_by_target 来查看各个 target 相关的 specs。 另外，需要注意的是 analyze 的过程中有一个 pre_download 的阶段，即在 --verbose 下看到的 Fetching external sources 过程。这个 pre_download 阶段不属于依赖下载过程，而是在当前的依赖分析阶段。 ps. 该过程主要是解决当我们在通过 Git 地址引入的 Pod 仓库的情况下，系统无法从默认的 Source 拿到对应的 Spec，需要直接访问我们的 Git 地址下载仓库的 zip 包，并取出对应的 podspec 文件，从而进行对比分析。 3. 下载依赖文件（download_dependencies） def download_dependencies UI.section 'Downloading dependencies' do # 初始化 sandbox 文件访问器 create_file_accessors # 构造 Pod Source Installer install_pod_sources # 执行 podfile 定义的 pre install 的 hooks run_podfile_pre_install_hooks # 根据配置清理 pod sources 信息，主要是清理无用 platform 相关内容 clean_pod_sources end end 在 create_file_accessors 中会创建沙盒目录的文件访问器，通过构造 FileAccessor 实例来解析沙盒中的各种文件。接着是最重要的 install_pod_sources 过程，它会调用对应 Pod 的 install! 方法进行资源下载。 先来看看 install_pod_sources 方法的实现： def install_pod_sources @installed_specs = [] # install 的 Pod 只需要这两种状态，added 和 changed 状态的并集 pods_to_install = sandbox_state.added | sandbox_state.changed title_options = { :verbose_prefix =&amp;gt; '-&amp;gt; '.green } puts &quot;root_specs&quot; root_specs.each do |item| puts item end # 将 Podfile 解析后排序处理 root_specs.sort_by(&amp;amp;:name).each do |spec| # 如果是 added 或 changed 状态的 Pod if pods_to_install.include?(spec.name) # 如果是 changed 状态并且 manifest 已经有记录 if sandbox_state.changed.include?(spec.name) &amp;amp;&amp;amp; sandbox.manifest # 版本更新 current_version = spec.version # 被更新版本记录 previous_version = sandbox.manifest.version(spec.name) # 变动记录 has_changed_version = current_version != previous_version # 找到第一个包含 spec.name 的 Pod，获取对应的 Repo，其实就是 find 方法 current_repo = analysis_result.specs_by_source.detect { |key, values| break key if values.map(&amp;amp;:name).include?(spec.name) } # 获取当前仓库 current_repo &amp;amp;&amp;amp;= current_repo.url || current_repo.name # 获取之前该仓库的信息 previous_spec_repo = sandbox.manifest.spec_repo(spec.name) # 是否仓库有变动 has_changed_repo = !previous_spec_repo.nil? &amp;amp;&amp;amp; current_repo &amp;amp;&amp;amp; (current_repo != previous_spec_repo) # 通过 title 输出上面的详细变更信息 title = ... else # 非 changed 状态，展示 Installing 这个是经常见的 log title = &quot;Installing #{spec}&quot; end UI.titled_section(title.green, title_options) do # 通过 name 拿到对应的 installer，记录到 @pod_installers 中 install_source_of_pod(spec.name) end else # 如果没有 changed 情况，直接展示 Using，也是经常见到的 log UI.titled_section(&quot;Using #{spec}&quot;, title_options) do # # 通过 sandbox, specs 的 platform 信息生成 Installer 实例，记录到 @pod_installers 中 create_pod_installer(spec.name) end end end end # 通过缓存返回 PodSourceInstaller 实例 def create_pod_installer(pod_name) specs_by_platform = specs_for_pod(pod_name) # 当通过 pod_name 无法找到对应的 pod_target 或 platform 配置，主动抛出错误信息 if specs_by_platform.empty? requiring_targets = pod_targets.select { |pt| pt.recursive_dependent_targets.any? { |dt| dt.pod_name == pod_name } } # message = &quot;...&quot; raise StandardError, message end # 通过 sandbox, specs 的 platform 信息生成 Installer 实例 pod_installer = PodSourceInstaller.new(sandbox, podfile, specs_by_platform, :can_cache =&amp;gt; installation_options.clean?) pod_installers &amp;lt;&amp;lt; pod_installer pod_installer end # 如果 resolver 声明一个 Pod 已经安装或者已经存在，将会将其删除并重新安装。如果不存在则直接安装。 def install_source_of_pod(pod_name) pod_installer = create_pod_installer(pod_name) pod_installer.install! @installed_specs.concat(pod_installer.specs_by_platform.values.flatten.uniq) end 在方法的开始，root_specs 方法是通过 analysis_result 拿出所有根 spec。 def root_specs analysis_result.specifications.map(&amp;amp;:root).uniq end 下面再来看看 pod_installer 中的 install! 方法，主要是通过调用 cocoapods-downloader 组件，将 Pod 对应的 Source 下载到本地。实现如下： def install! download_source unless predownloaded? || local? PodSourcePreparer.new(root_spec, root).prepare! if local? sandbox.remove_local_podspec(name) unless predownloaded? || local? || external? end 4. 验证 targets (validate_targets) 用来验证之前流程中的产物 (pod 所生成的 Targets) 的合法性。主要作用就是构造 TargetValidator，并执行 validate! 方法： def validate_targets validator = Xcode::TargetValidator.new(aggregate_targets, pod_targets, installation_options) validator.validate! end def validate! verify_no_duplicate_framework_and_library_names verify_no_static_framework_transitive_dependencies verify_swift_pods_swift_version verify_swift_pods_have_module_dependencies verify_no_multiple_project_names if installation_options.generate_multiple_pod_projects? end 验证环节在整个 Install 过程中仅占很小的一部分。因为只是验证部分，是完全解耦的。 verify_no_duplicate_framework_and_library_names验证是否有重名的 framework，如果有冲突会直接抛出 frameworks with conflicting names 异常。 verify_no_static_framework_transitive_dependencies验证动态库中是否有静态链接库 (.a 或者 .framework) 依赖，如果存在则会触发 transitive dependencies that include static binaries... 错误。假设存在以下场景： 组件 A 和组件 B 同时依赖了组件 C，C 为静态库，如 Weibo_SDK 组件 A 依赖组件 B，而组件 B 的 .podspec 文件中存在以下设置时，组件 B 将被判定为存在静态库依赖： podspec 设置了 s.static_framework = true podspec 以 s.dependency 'xxx_SDK 依赖了静态库 xxx_SDK podspec 以 s.vendored_libraries = 'libxxx.a' 方式内嵌了静态库 libxxx 此时如果项目的 Podfile 设置了 use_framework! 以动态链接方式打包的时，则会触发该错误。 问题原因 Podfile 中不使用 use_frameworks! 时，每个 pod 是会生成相应的 .a（静态链接库）文件，然后通过 static libraries 来管理 pod 代码，在 Linked 时会包含该 pod 引用的其他的 pod 的 .a 文件。 Podfile 中使用 use_frameworks! 时是会生成相应的 .framework 文件，然后通过 dynamic frameworks 的方式来管理 pod 代码，在 Linked 时会包含该 pod 引用的其他的 pod 的 .framework 文件。 上述场景中虽然以 framework 的方式引用了 B 组件，然而 B 组件实际上是一个静态库，需要拷贝并链接到该 pod 中，然而 dynamic frameworks 方式并不会这么做，所以就报错了。 解决方案 修改 pod 库中 podspec，增加 pod_target_xcconfig，定义好 FRAMEWORK_SEARCH_PATHS 和 OTHER_LDFLAGS 两个环境变量； hook verify_no_static_framework_transitive_dependencies 的方法，将其干掉！对应 issue 修改 pod 库中 podspec，开启 static_framework 配置 s.static_framework = true verify_swift_pods_swift_version确保 Swift Pod 的 Swift 版本正确配置且互相兼容的。 verify_swift_pods_have_module_dependencies检测 Swift 库的依赖库是否支持了 module，这里的 module 主要是针对 Objective-C 库而言。首先，Swift 是天然支持 module 系统来管理代码的，Swift Module 是构建在 LLVM Module 之上的模块系统。Swift 库在解析后会生成对应的 modulemap 和 umbrella.h 文件，这是 LLVM Module 的标配，同样 Objective-C 也是支持 LLVM Module。当我们以 Dynamic Framework 的方式引入 Objective-C 库时，Xcode 支持配置并生成 header，而静态库 .a 需要自己编写对应的 umbrella.h 和 modulemap。其次，如果你的 Swift Pod 依赖了 Objective-C 库，又希望以静态链接的方式来打包 Swift Pod 时，就需要保证 Objective-C 库启用了 modular_headers，这样 CocoaPods 会为我们生成对应 modulemap 和 umbrella.h 来支持 LLVM Module。你可以从这个地址 - http://blog.cocoapods.org/CocoaPods-1.5.0/ 查看到更多细节。 verify_no_pods_used_with_multiple_swift_versions检测是否所有的 Pod Target 中版本一致性问题。 用一个流程图来概括这一验证环节： 5.生成工程 (Integrate) 工程文件的生成是 pod install 的最后一步，他会将之前版本仲裁后的所有组件通过 Project 文件的形式组织起来，并且会对 Project 中做一些用户指定的配置。 def integrate generate_pods_project if installation_options.integrate_targets? # 集成用户配置，读取依赖项，使用 xcconfig 来配置 integrate_user_project else UI.section 'Skipping User Project Integration' end end def generate_pods_project # 创建 stage sanbox 用于保存安装前的沙盒状态，以支持增量编译的对比 stage_sandbox(sandbox, pod_targets) # 检查是否支持增量编译，如果支持将返回 cache result cache_analysis_result = analyze_project_cache # 需要重新生成的 target pod_targets_to_generate = cache_analysis_result.pod_targets_to_generate # 需要重新生成的 aggregate target aggregate_targets_to_generate = cache_analysis_result.aggregate_targets_to_generate # 清理需要重新生成 target 的 header 和 pod folders clean_sandbox(pod_targets_to_generate) # 生成 Pod Project，组装 sandbox 中所有 Pod 的 path、build setting、源文件引用、静态库文件、资源文件等 create_and_save_projects(pod_targets_to_generate, aggregate_targets_to_generate, cache_analysis_result.build_configurations, cache_analysis_result.project_object_version) # SandboxDirCleaner 用于清理增量 pod 安装中的无用 headers、target support files 目录 SandboxDirCleaner.new(sandbox, pod_targets, aggregate_targets).clean! # 更新安装后的 cache 结果到目录 `Pods/.project_cache` 下 update_project_cache(cache_analysis_result, target_installation_results) end 在 install 过程中，除去依赖仲裁部分和下载部分的时间消耗，在工程文件生成也会有相对较大的时间开销。这里往往也是速度优化核心位置。 0x6 写入依赖 (write_lockfiles) 将依赖更新写入 Podfile.lock 和 Manifest.lock 0x7 结束回调（perform_post_install_action） 最后一步收尾工作，为所有插件提供 post-installation 操作以及 hook。 def perform_post_install_actions # 调用 HooksManager 执行每个插件的 post_install 方法 run_plugins_post_install_hooks # 打印过期 pod target 警告 warn_for_deprecations # 如果 pod 配置了 script phases 脚本，会主动输出一条提示消息 warn_for_installed_script_phases # 输出结束信息 `Pod installation complete!` print_post_install_message end 核心组件在 pod install 各阶段的作用如下： 总结 当我们知道 CocoaPods 在 install 的大致过程后，我们可以对其做一些修改和控制。例如知道了插件的 pre_install 和 post_install 的具体时机，我们就可以在 Podfile 中执行对应的 Ruby 脚本，达到我们的预期。同时了解 install 过程也有助于我们进行每个阶段的性能分析，以优化和提高 Install 效率。 后续，将学习 CocoaPods 中每一个组件的实现，将所有的问题在代码中找到答案。 知识点问题梳理 这里罗列了四个问题用来考察你是否已经掌握了这篇文章，如果没有建议你加入收藏再次阅读： 简单概述 CocoaPods 的核心模块？ pod 命令是如何找到并启动 CocoaPods 程序的？ 简述 pod install 流程？ resolve_dependencies 阶段中的 pre_download 是为了解决什么问题？ validate_targets 都做了哪些校验工作？</summary></entry><entry><title type="html">为什么使用汇编可以 Hook objc_msgSend（下）- 实现与分析</title><link href="https://www.desgard.com/2020/08/05/why-hook-msg_objc-can-use-asm-2.html" rel="alternate" type="text/html" title="为什么使用汇编可以 Hook objc_msgSend（下）- 实现与分析" /><published>2020-08-05T00:00:00-08:00</published><updated>2020-08-05T00:00:00-08:00</updated><id>https://www.desgard.com/2020/08/05/why-hook-msg_objc-can-use-asm-2</id><content type="html" xml:base="https://www.desgard.com/2020/08/05/why-hook-msg_objc-can-use-asm-2.html">&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;

&lt;p&gt;在上一篇文章中，我们介绍了 ARM64 中的汇编基础，并且知道了在汇编当中，调用一个方法的前后在栈空间是怎样表现的，以及内存中的几个特殊寄存器是如何操作的。&lt;/p&gt;

&lt;p&gt;今天这篇文章，我们来详细详细分析一下使用汇编来 Hook &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt; 方法的全部流程。&lt;/p&gt;

&lt;h1 id=&quot;hook-思路梳理&quot;&gt;Hook 思路梳理&lt;/h1&gt;

&lt;p&gt;对于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt; 这个我们要 Hook 的方法，我们首先要搞清楚，这是一个什么样的方法？我需要用什么方案才能 Hook 到它的入口。首先我们来整理以下我们拥有的 Hook 方案：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;基于 Objective-C Runtime 的 Method Swizzling&lt;/strong&gt;：也就是我们经常使用的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class_replaceMethod&lt;/code&gt; 方法；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;基于 fishhook 的 Hook&lt;/strong&gt;：由于在 Mach-O 当中，有 Bind 和 Lazy Bind 的两个概念，所以 Facebook 通过修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__la_symbol&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__nl_symbol&lt;/code&gt; 两个表的指针，在二次调用的时候，直接通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__la_symbol_ptr&lt;/code&gt; 找到函数地址直接调用，从而不用多次繁琐的进行函数寻址；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;基于 Dobby 的 Inline Hook&lt;/strong&gt;：&lt;strong&gt;Dobby 是通过插入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__zDATA&lt;/code&gt; 段和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__zTEXT&lt;/code&gt; 段到 Mach-O 中&lt;/strong&gt;。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__zDATA&lt;/code&gt; 用来记录 Hook 信息（Hook 数量、每个 Hook 方法的地址）、每个 Hook 方法的信息（函数地址、跳转指令地址、写 Hook 函数的接口地址）、每个 Hook 的接口（指针）。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__zText&lt;/code&gt; 用来记录每个 Hook 函数的跳转指令。Dobby 通过 mmap 把整个 Mach-O 文件映射到用户的内存空间，写入完成保存本地。&lt;strong&gt;所以 Dobby 并不是在原 Mach-O 上进行操作，而是重新生成并替换。&lt;/strong&gt;关于 Dobby 中的奇技淫巧还有很多，如果有可能后续会出一个分析文章（插旗子）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然，成熟的 Hook 方案还有很多，并且这些经常出现在逆向工程中，我这里只是列举了最常用的三个。&lt;/p&gt;

&lt;h2 id=&quot;什么是-inline-hook&quot;&gt;什么是 Inline Hook&lt;/h2&gt;

&lt;p&gt;首先给个定义：&lt;strong&gt;Inline Hook 就是在运行的流程中插入跳转指令来抢夺运行流程的一个方法&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardiaInline_Hook_.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图展示了 Inline Hook 大致的思路：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将原函数的前  N 个字节搬运到 Hook 函数的前 N 个字节；&lt;/li&gt;
  &lt;li&gt;然后将原函数的前 N 个字节填充跳转到 Hook 函数的跳转指令；&lt;/li&gt;
  &lt;li&gt;在 Hook 函数末尾几个字节填充跳转回原函数 +N 的跳转指令；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上的 N 有多大，取决于你的跳转指令写得有多大（占用了多少指令）。&lt;/p&gt;

&lt;p&gt;相较与 Inline Hook， fishhook 使用的是很 Trick 的方式，&lt;strong&gt;通过劫持 stub 从而达到替换的目的&lt;/strong&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在罗巍的「iOS 应用逆向与安全之道」中将 fishhook 归类成 Inline Hook。从广义的定义上来说，只要完成重定向到我们自己的方法，并在远方法前后可定制处理就可以算作 Inline Hook。但是我和页面仔讨论的结果是，&lt;strong&gt;这里的 Inline 应该要理解为 Inline Modification&lt;/strong&gt;，这种技术通常如上图所示，覆盖方法开头指令中的前几个字节，完成 Hook 方法的重定向工作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;fishhook-完成跳转&quot;&gt;fishhook 完成跳转&lt;/h1&gt;

&lt;h3 id=&quot;汇编实现的-objc_msgsend-为什么可以当作-c-方法&quot;&gt;汇编实现的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt; 为什么可以当作 C 方法？&lt;/h3&gt;

&lt;p&gt;通过查看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt; ，我们知道 Runtime 的 Method Swizzling 并不适用，因为它并不是 Objective-C 方法，调用时并不会有我们经常说的“消息转发”；通过查看 Runtime 源码，我们发现 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt; 是使用纯汇编实现函数，通过&lt;a href=&quot;https://github.com/RetVal/objc-runtime/blob/57c4bc7b95efb6ef5b903ab7844c859a9faef3ad/runtime/Messengers.subproj/objc-msg-arm64.s#L334-L573&quot;&gt;汇编文件&lt;/a&gt;我们可以看到以下定义：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-wasm&quot;&gt;ENTRY _objc_msgSend
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENTRY&lt;/code&gt; 是什么意思呢？在文件中继续搜索 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENTRY&lt;/code&gt; 我们找到了这么一个宏：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;macro&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENTRY&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* name */&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;align&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;globl&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endmacro&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里定义了一个汇编宏，表示在 text 段定义一个 global 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_objc_msgSend&lt;/code&gt; ，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$0&lt;/code&gt; 其实就是这个宏传入的参数，也就是一个方法入口。我们可以手动将这个宏来展开：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;align&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;globl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_objc_msgSend&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里我们发现，&lt;strong&gt;在第三行的位置通过 C 的 name mangling 命名规则，将符号 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_objc_msgSend&lt;/code&gt; 映射为 C 的全局方法符号&lt;/strong&gt;。也就是说，这段汇编可以通过头文件声明，&lt;strong&gt;便已完成了 C 的函数定义。我们在后续处理的时候可以将其视为 C 方法。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当然我们也可以使用 MachOView 来验证这个符号名。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardiaUntitled.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里如果不太明白如何使用纯汇编实现 C 方法，可以看高级页面仔的这篇文章「在Xcode工程中嵌入汇编代码」。&lt;/p&gt;

&lt;h2 id=&quot;fishhook-实现的基础&quot;&gt;fishhook 实现的基础&lt;/h2&gt;

&lt;p&gt;既然我们将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt; 已经视作 C 方法，那么我就可以使用 fishhook 来完成 &lt;strong&gt;Inline Hook 的第一步：跳到 Hook 方法&lt;/strong&gt;。fishhook 是如何做的呢？它是在什么阶段完成这个动作的？来看下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardiaApp_.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们知道，Apple 自身的共享缓存库其实不会编译进我们自己的 Mach-O 中的，而是在 App 启动后的动态链接才会去做重绑定操作。这里我们要如何去验证呢？首先我们写一个 fishhook 的 demo：&lt;/p&gt;

&lt;div class=&quot;language-objectivec highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &quot;ViewController.h&quot;
#import &quot;fishhook.h&quot;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewController&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ori_nslog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new_nslog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//自定义的替换函数&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringByAppendingFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot; Gua &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ori_nslog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rebinding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nslog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;nslog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NSLog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nslog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replacement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_nslog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nslog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replaced&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ori_nslog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rebind_symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rebinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nslog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;touchesBegan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UITouch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;touches&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;编译运行之后发现输出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello world&lt;/code&gt; ，点击屏幕后，成功 Hook &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSLog&lt;/code&gt; 方法，输出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello world Gua&lt;/code&gt; 。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;02&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;846939&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0800&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13516&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;519138&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;02&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;681944&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0800&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13516&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;519138&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gua&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为什么可以 Hook？函数地址不是在编译之后就确定了吗？&lt;/p&gt;

&lt;p&gt;其实并不是，我们可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nm -n&lt;/code&gt; 命令来查看一下所有的方法符合及其对应地址：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestHook&lt;/span&gt;
								 &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_NSLog&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_NSStringFromClass&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_OBJC_CLASS_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_UIResponder&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_OBJC_CLASS_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_UISceneConfiguration&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_OBJC_CLASS_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_UIViewController&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
								 &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_objc_msgSend&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_objc_msgSendSuper2&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_objc_opt_class&lt;/span&gt;
								 &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;mo&quot;&gt;00000001000066&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ori_nslog&lt;/span&gt;
&lt;span class=&quot;mo&quot;&gt;00000001000066&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;98&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__rebindings_head&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这里我们就可以发现，其实 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSLog&lt;/code&gt;  方法其实并没有地址，这些系统库函数并不会打入到我们的 App 包中；当我们使用它们时，&lt;strong&gt;dyld 就要从共享的动态库中查找对应方法，然后将具体的函数地址绑定到之前声明的地方&lt;/strong&gt;，从而实现系统库方法的调用。&lt;/p&gt;

&lt;p&gt;另外说句题外话作为了解，&lt;strong&gt;对于这种可在主存中任意位置正确地执行，并且不受其绝对地址影响的技术&lt;/strong&gt;，在计算机领域称之为 &lt;strong&gt;PIC（Position Independent Code）技术&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;fishhook-对于-mach-o-利用&quot;&gt;fishhook 对于 Mach-O 利用&lt;/h2&gt;

&lt;p&gt;首先我们要知道 Mach-O 中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__DATA&lt;/code&gt; 段有两个 Section 与动态符号绑定有关系：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__nl_symbol_ptr&lt;/code&gt; ：存储了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;non-lazily&lt;/code&gt; 绑定的符号，这些符号在 Mach-O 加载的时候绑定完成；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__la_symbol_ptr&lt;/code&gt; ：存储了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lazy&lt;/code&gt; 绑定的方法，这些方法在第一次调用时，由 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dyld_stub_binder&lt;/code&gt; 进行绑定；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;既然 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__la_symbol_ptr&lt;/code&gt; 存储了所有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lazy&lt;/code&gt; 绑定的方法，&lt;strong&gt;那也就是说在这些位置应该存储了对应方法的地址。&lt;/strong&gt;我们通过 lldb 来验证一下。&lt;/p&gt;

&lt;p&gt;我们在第一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello world&lt;/code&gt; 的位置增加断点，并使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;image list&lt;/code&gt; 命令来获取 App 的基地址：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardiaUntitled%201.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这个例子中，我们的 App 基地址为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00000001063b6000&lt;/code&gt; 。当然你做实验的时候可能基地址会有所改变，因为 ASLR（Address Spce Layout Randomizatio） 的缘故。&lt;/p&gt;

&lt;p&gt;然后我们使用 MachOView 来查看在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__la_symbol_str&lt;/code&gt; 中的偏移量。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia20200830151333.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;发现是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x5000&lt;/code&gt; ，所以我们在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lldb&lt;/code&gt; 中使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; 命令来查看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00000001063b6000 + 0x5000&lt;/code&gt; 的数据是什么：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lldb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00000001063b6000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x5000&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x1063bb000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;83&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;06&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;69&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;98&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;93&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ff&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;..;.....&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x1063bb010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ff&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;84&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;06&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S2I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.;.....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;发现在此位置的数据是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x01063b83f0&lt;/code&gt; 。使用反汇编 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dis&lt;/code&gt; 命令， 来看对应地址所指向的代码段：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lldb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x01063b83f0&lt;/span&gt;
    &lt;span class=&quot;mh&quot;&gt;0x1063b83f0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pushq&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;
    &lt;span class=&quot;mh&quot;&gt;0x1063b83f5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jmp&lt;/span&gt;    &lt;span class=&quot;mh&quot;&gt;0x1063b83e0&lt;/span&gt;
    &lt;span class=&quot;mh&quot;&gt;0x1063b83fa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pushq&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xd&lt;/span&gt;
    &lt;span class=&quot;mh&quot;&gt;0x1063b83ff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jmp&lt;/span&gt;    &lt;span class=&quot;mh&quot;&gt;0x1063b83e0&lt;/span&gt;
    &lt;span class=&quot;mh&quot;&gt;0x1063b8404&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pushq&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x127&lt;/span&gt;                    &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x127&lt;/span&gt; 
    &lt;span class=&quot;mh&quot;&gt;0x1063b8409&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jmp&lt;/span&gt;    &lt;span class=&quot;mh&quot;&gt;0x1063b83e0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么这段代码到底是我们的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSLog&lt;/code&gt; 的代码吗？我们可以直接对当前断点对栈顶进行一次反汇编来确定一下结果。在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lldb&lt;/code&gt; 中直接输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dis&lt;/code&gt; 命令：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia20200830151401.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到汇编中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;callq&lt;/code&gt;  命令对应对地址是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1063b8354&lt;/code&gt; 。对这个地址再次进行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dis -s&lt;/code&gt; 反汇编来查看：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia20200830151426.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们发现其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00000001063b83f0&lt;/code&gt; 这个待跳转的地址，就是上面 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00000001063b6000 + 0x5000&lt;/code&gt; 这个位置存储的地址。&lt;/p&gt;

&lt;p&gt;再这之后，我们再对点击事件中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSLog&lt;/code&gt; 方法下一个断点，并且点击一下模拟器屏幕来触发一下。我们再使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dis -s&lt;/code&gt; 两个命令来查看一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00000001063b6000 + 0x5000&lt;/code&gt; 中的新数据：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia20200830151447.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们发现，其指向地址已经变成了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x01063b7380&lt;/code&gt; ，使用反汇编 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dis&lt;/code&gt; 命令来查看的时候，也给出了相应的函数符号 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new_nslog&lt;/code&gt; 。至此，fishhook Hook C 方法已经完成。&lt;/p&gt;

&lt;h2 id=&quot;fishhook-思路总结&quot;&gt;fishhook 思路总结&lt;/h2&gt;

&lt;p&gt;其实 fishhook 的 Hook 思路，也就是我们上述所描述的，当第一次调用系统动态库中 C 方法时，去替换掉 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__la_symbol_str&lt;/code&gt; 的指针。但是它的逻辑要比这个思路还是要复杂一些，比如 fishhook 要解决以下问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用数据结构来描述所有 Hook 方法？&lt;/li&gt;
  &lt;li&gt;如何通过方法名来找到对应的 Lazy 指针？&lt;/li&gt;
  &lt;li&gt;如何计算对应方法的地址？&lt;/li&gt;
  &lt;li&gt;如果是非 Lazy 表中要如何处理？&lt;/li&gt;
  &lt;li&gt;如何查找到对应符号名称？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;诸如此类的问题还有很多。如果想看具体的实现，推荐去阅读源码。当然我们归纳 fishhook 来修改 C 方法的本质，那就是：&lt;strong&gt;dyld 更新 Mach-O 二进制的 __DATA segment 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__la_symbol_str&lt;/code&gt; 中的指针，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rebind_symbol&lt;/code&gt; 方法更新两个符号位置来进行符号的重新绑定。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardiaAug-05-2020_08-52-49.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;内联汇编实现-hook&quot;&gt;内联汇编实现 Hook&lt;/h1&gt;

&lt;p&gt;上文讲述了使用 fishhook 来 Hook 系统库中的 C 方法，那么我们已经完成了以下这两个阶段（绿色位置）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia20200830151609.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;换句话说也就是我们通过 fishhook 已经完成了入口的重定向。但是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt; 这个原方法我们又是不能不去调用的，&lt;strong&gt;因为我们只是希望在 Hook 的前后，增加自定义的事件，并不想去完整替换原先的消息转发逻辑。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;所以，&lt;strong&gt;我们只要在 Hook 方法中调用原函数就可以解决问题了。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;但是新的问题又出现了！&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt; 到底应该如何传参呢？&lt;/p&gt;

&lt;h2 id=&quot;objc_msgsend-方法定义&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt; 方法定义&lt;/h2&gt;

&lt;p&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message.h&lt;/code&gt; 文件中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt; 有如下定义：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;objc_msgSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Nonnull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;OBJC_AVAILABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看了函数定义，难点其实就是不定参数。既然是不定参数，其实我们可以根据不定参数的原理，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;va_list&lt;/code&gt; 来解析数组，就可以获取到所有参数了。虽然使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;va_list&lt;/code&gt; 是行的通的，但是我们需要考虑 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;va_list&lt;/code&gt; 在不同平台上的数据结构差异。这一点可以参看前辈 &lt;em&gt;bang&lt;/em&gt; 在开发 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSPatch&lt;/code&gt; 的时候所做的笔记&lt;a href=&quot;https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3&quot;&gt;「JSPatch 实现原理详解」&lt;/a&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这个其实我也和页面仔讨论了一番。页面仔说其实使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;va_list&lt;/code&gt; 可变参数应该会有很大的坑，因为在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt; 方法中不是传统意义上的可变参数。可以参考这篇文章「Apple 为什么要修改 objc_msgSend 的原型」。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但既然都已经对不同平台做差异化处理了，&lt;strong&gt;那么干脆就直接使用内联汇编来实现传参逻辑就可以了&lt;/strong&gt;？在目前的 Hook 方案中，也就是直接使用 ARM 汇编来处理的。&lt;/p&gt;

&lt;h2 id=&quot;记录上下文&quot;&gt;记录上下文&lt;/h2&gt;

&lt;p&gt;通过上一篇文章「为什么使用汇编可以 Hook objc_msgSend（上）- 汇编基础」，我们了解到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X0 - X7&lt;/code&gt; 用来存储传递参数，我们仅从一个方法体的角度上来讲，可能参数已经是上下文的全部内容了。但是，我们从寄存器的角度上来看问题，上下文内容还有其他的东西，比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Q0 - Q7&lt;/code&gt; 这八个浮点数寄存器。&lt;/p&gt;

&lt;p&gt;所以为了保存方法的上下文，我们&lt;strong&gt;通过将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X0 - X9&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Q0 - Q7&lt;/code&gt; 这些寄存器的值压栈，从而记录下调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt; 方法的所有上下文&lt;/strong&gt;，其压栈方法直接模仿上文中调用函数时的压栈方法即可：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;指向栈顶&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;保存&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;，偏移地址到&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;寄存器&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;保存&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;stp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为什么这里处理参数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X0-X7&lt;/code&gt; 要记录，还需要记录 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X8&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X9&lt;/code&gt; 两个寄存器呢？因为我们在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_objc_msgSend&lt;/code&gt; 会对其改变。为了还原之前所有寄存器的状态，最保险的方式就是全部记录。&lt;/p&gt;

&lt;h2 id=&quot;调用-pre_objc_msgsend-方法&quot;&gt;调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_objc_msgSend&lt;/code&gt; 方法&lt;/h2&gt;

&lt;p&gt;在保存完上下文之后，定义一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_objc_msgSend&lt;/code&gt; 的方法，其作用是用来自己定制 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt; 之前发生的事情。&lt;/p&gt;

&lt;p&gt;往往我们 Hook &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt; 的目的，就是想记录方法的上下文信息。例如我们想度量慢函数的时间，则我们需要其&lt;strong&gt;方法名&lt;/strong&gt;、&lt;strong&gt;所在的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Class&lt;/code&gt;&lt;/strong&gt; 以及&lt;strong&gt;其上层调用方法和历史堆栈&lt;/strong&gt;等。那么在定义 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_objc_msgSend&lt;/code&gt; 方法的如参时，我们可以将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id self&lt;/code&gt; （&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt; 实例指针），&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SEL _cmd&lt;/code&gt; （方法 ID），&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uintptr_t lr&lt;/code&gt; （&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LR&lt;/code&gt; 寄存器，函数调用后的返回地址）传入即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这里的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LR&lt;/code&gt; 记录其实并不是为我们业务而服务的，而是需要为堆栈记录，这样在 Hook 的最后可以跳转回上一层方法&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;对应的，我们定义一个带有这三个参数的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_objc_msgSend&lt;/code&gt; 方法：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pre_objc_msgSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uintptr_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// pre action...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了将对应的参数传入，我们利用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X0-X2&lt;/code&gt; 寄存器来传参。因为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X0&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X1&lt;/code&gt; 对应的就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_cmd&lt;/code&gt; ，所以我们只需要将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LR&lt;/code&gt; 传递到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X2&lt;/code&gt; 中即可：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;将&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;传入&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来我们来实现调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_objc_msgSend&lt;/code&gt; 方法。&lt;/p&gt;

&lt;p&gt;我先给出汇编，然后我们来解析它的意思：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;__asm&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stp x8, x9, [sp, #-16]!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;__asm&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mov x12, %0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre_objc_msgSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;__asm&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ldp x8, x9, [sp], #16&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;__asm&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blr x12&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第一行和第三行是用来记录和恢复 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X8&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X9&lt;/code&gt; 两个寄存器，其原因是因为使用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%0&lt;/code&gt; 这个&lt;strong&gt;指令操作数&lt;/strong&gt;，这是个什么东西呢？&lt;/p&gt;

&lt;p&gt;为了讲解方便，举一个其他的例子。假如我想使用内联汇编写一个加法函数，我可以写出以下代码：&lt;/p&gt;

&lt;div class=&quot;language-objectivec highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;arm_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;add %0, %1, %2&quot;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;=r&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arm_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;sum = %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// sum = 5&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;这一行称作&lt;strong&gt;汇编语句模版&lt;/strong&gt;。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%0&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%1&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%2&lt;/code&gt; 代表指令操作数，也可以代表通用寄存器（&lt;strong&gt;需要注意的是，这不是 ARM 汇编，而是基于汇编的上层语言&lt;/strong&gt;）。分别代表 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sum&lt;/code&gt; 、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;（为什么是这个顺序？可以看下面的 2 和 3）。这种操作数在汇编语句模版中只能有 10 个，即 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%0 - %9&lt;/code&gt; 。当然这里的代码在 Xcode 可能会有 warning，Xcode 建议我们修改成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%w0&lt;/code&gt; ，这个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w&lt;/code&gt; 代表这个&lt;strong&gt;变量的宽度，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w&lt;/code&gt; 是 32 位，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; 是 64 位。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;第一个冒号 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt; 分割的位置是&lt;strong&gt;输出参数&lt;/strong&gt;。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=r&lt;/code&gt; 其实是两个操作符，我们可以分开来看。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;**=&lt;/code&gt; 代表 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sum&lt;/code&gt; 变量是输出操作符，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r&lt;/code&gt; 代表按照顺序与某个通用寄存器相关联，由于它是第一个关联的，自然就进入了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%0&lt;/code&gt;**。&lt;/li&gt;
  &lt;li&gt;第二个冒号 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt; 分割的位置是&lt;strong&gt;输入参数&lt;/strong&gt;。继续使用操作符 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r&lt;/code&gt; 将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; 以此放入通用寄存器 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%1&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%2&lt;/code&gt; 中。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;搞懂了这个你应该就可以明白上面那个：&lt;/p&gt;

&lt;div class=&quot;language-objectivec highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;__asm&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mov x12, %0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre_objc_msgSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;是什么意思。对的，其实就是把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_objc_msgSend&lt;/code&gt; 的地址取出，然后放到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X12&lt;/code&gt; 寄存器。&lt;/p&gt;

&lt;p&gt;那么为什么要记录和恢复 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X8&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X9&lt;/code&gt; 两个寄存器呢？我们在这里先记住一个结论：&lt;strong&gt;当使用汇编语句模版时，就会用到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X8&lt;/code&gt; 、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X9&lt;/code&gt; 寄存器，因为它的下层实现是通过这些通用寄存器来做的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;所以为了恢复之前的上下文，我们就再一次的利用栈来保存一下这两个通用寄存器，在正式调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_objc_msgSend&lt;/code&gt; 方法之前将其复原即可。&lt;/p&gt;

&lt;p&gt;最后一行使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blr x12&lt;/code&gt; ，正式调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_objc_msgSend&lt;/code&gt; 方法。&lt;/p&gt;

&lt;h2 id=&quot;恢复上下文并调用原函数&quot;&gt;恢复上下文并调用原函数&lt;/h2&gt;

&lt;p&gt;恢复上下文和之前的记录上下文是逆操作，所以不做过多分析：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ldp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ldp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ldp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ldp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ldp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ldp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ldp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ldp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ldp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;继续使用我们上述方法进行调用的内联汇编代码来调用远方法 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt; 。在这里假设我们已经使用 fishhook 将其实现 Hook 到我们新的内联汇编方法体 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hook_objc_msgSend&lt;/code&gt; ，原方法放到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin_objc_msgSend&lt;/code&gt; 上。所以对应的内联汇编代码：&lt;/p&gt;

&lt;div class=&quot;language-objectivec highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;__asm&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stp x8, x9, [sp, #-16]!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;__asm&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mov x12, %0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin_objc_msgSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;__asm&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ldp x8, x9, [sp], #16&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;__asm&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blr x12&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;调用-post_objc_msgsend-并恢复-lr&quot;&gt;调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post_objc_msgSend&lt;/code&gt; 并恢复 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LR&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;在上一篇文章我们讲述过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LR&lt;/code&gt; 寄存器是用来记录&lt;strong&gt;函数调用完成时的返回地址&lt;/strong&gt;的。但是经历了咱们多次其他方法的调用，我们没有办法确定 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LR&lt;/code&gt; 的值是正确的。&lt;strong&gt;所以在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hook_objc_msgSend&lt;/code&gt; 方法的最后，我们需要将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LR&lt;/code&gt; 值进行恢复。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;那么我们用什么方法来恢复 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LR&lt;/code&gt; 寄存器值呢？&lt;strong&gt;这里有一种比较 trick 的方法，就是用一个全局数组来记录 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LR&lt;/code&gt; 寄存器的值&lt;/strong&gt;。我们用数组来模拟一个栈结构，其实就可以对应的找到其  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LR&lt;/code&gt; （也许你会说这里&lt;strong&gt;会有线程安全的问题&lt;/strong&gt;。是的，我在这里只是做一个示例，如果你有更加健壮的方法，也可以去扩写）。&lt;/p&gt;

&lt;p&gt;我们改写一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_objc_msgSend&lt;/code&gt; 方法来记录 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LR&lt;/code&gt; 的值：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 假设方法调用最多有 10000 层&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uintptr_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_ptr_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// LR 栈的游标&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pre_objc_msgSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uintptr_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;before objc msgSend&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 记录 lr，且游标 +1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;l_ptr_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据之前的知识，我们知道方法的返回值在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ret&lt;/code&gt; 之后，会被存入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X0&lt;/code&gt; 寄存器。所以我们在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post_objc_msgSend&lt;/code&gt; 中将上文记录的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LR&lt;/code&gt; 值返回，然后在使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X0&lt;/code&gt; 寄存器来恢复 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LR&lt;/code&gt; 寄存器。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 返回记录的 lr 值&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uintptr_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_objc_msgSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_ptr_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// hook_objc_msgSend 内部&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 省略 保存上下文过程&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;__asm&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stp x8, x9, [sp, #-16]!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;__asm&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mov x12, %0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_objc_msgSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;__asm&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ldp x8, x9, [sp], #16&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;__asm&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blr x12&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 恢复 lr&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;__asm&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mov lr, x0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 省略 恢复上下文过程&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// return&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;__asm&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ret&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如此，我们完成了使用内联汇编来 Hook &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt; 方法的全部实现代码。&lt;/p&gt;

&lt;h1 id=&quot;简单封装&quot;&gt;简单封装&lt;/h1&gt;

&lt;p&gt;在上面的全流程中，我们已经全部解析了 Hook &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt; 的全部实现细节，但是我们发现，其实主要的子操作就分成 3 个：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;记录上下文；&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;恢复上下文；&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;调用方法；&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以我们可以使用&lt;strong&gt;宏&lt;/strong&gt;来对这三个子操作进行抽象封装。&lt;/p&gt;

&lt;p&gt;在下面代码中，我们将三个操作分别封装成了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;save()&lt;/code&gt; 、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load()&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call(value)&lt;/code&gt; 三个宏，这样在 Hook 流程上就一目了然了。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &quot;objc_msgSend_hook.h&quot;
#import &quot;fishhook.h&quot;
#include &amp;lt;dispatch/dispatch.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define call(value) \
__asm volatile (&quot;stp x8, x9, [sp, #-16]!\n&quot;); \
__asm volatile (&quot;mov x12, %0\n&quot; :: &quot;r&quot;(value)); \
__asm volatile (&quot;ldp x8, x9, [sp], #16\n&quot;); \
__asm volatile (&quot;blr x12\n&quot;);
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define save() \
__asm volatile ( \
&quot;stp x8, x9, [sp, #-16]!\n&quot; \
&quot;stp x6, x7, [sp, #-16]!\n&quot; \
&quot;stp x4, x5, [sp, #-16]!\n&quot; \
&quot;stp x2, x3, [sp, #-16]!\n&quot; \
&quot;stp x0, x1, [sp, #-16]!\n&quot;);
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define load() \
__asm volatile ( \
&quot;ldp x0, x1, [sp], #16\n&quot; \
&quot;ldp x2, x3, [sp], #16\n&quot; \
&quot;ldp x4, x5, [sp], #16\n&quot; \
&quot;ldp x6, x7, [sp], #16\n&quot; \
&quot;ldp x8, x9, [sp], #16\n&quot; );
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;__unused&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orig_objc_msgSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;uintptr_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_ptr_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pre_objc_msgSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uintptr_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pre action...&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 做一个简单对测试，输出 ObjC 方法名&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object_getClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;l_ptr_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;uintptr_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_objc_msgSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post action...&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_ptr_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__naked__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hook_Objc_msgSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 记录上下文&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 将 lr 传入 x2 用于 pre_objc_msgSend 传参&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;__asm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mov x2, lr&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 调用 pre_objc_msgSend&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre_objc_msgSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 还原上下文&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 调用 objc_msgSend 原方法&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orig_objc_msgSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 记录上下文&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 调用 post_objc_msgSend&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_objc_msgSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 还原 lr&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;__asm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mov lr, x0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 还原上下文&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// return&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;__asm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ret&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#pragma mark public
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 启动Hook 入口&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hookStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_once_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onceToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;dispatch_once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onceToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rebind_symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;rebinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
                &lt;span class=&quot;s&quot;&gt;&quot;objc_msgSend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hook_Objc_msgSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orig_objc_msgSend&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为什么我在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load()&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;save()&lt;/code&gt; 方法中没有记录和复原 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Q0 - Q7&lt;/code&gt; 寄存器情况？&lt;strong&gt;因为我们在整个的流程中并没有用到浮点数&lt;/strong&gt;。所以这些寄存器是不会被修改的，因此我们可以简化这个写法。&lt;/p&gt;

&lt;p&gt;从这个点可以引出，&lt;strong&gt;其实 Hook 方法和内联汇编是具有耦合的（通用寄存器就那么几个，大家公用），你需要为 Hook 方法中的实现来定制内联汇编的实现，才能够满足整体的需求实现&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;我在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_objc_msgSend&lt;/code&gt; 中增加了打印方法名和类名的测试方法，运行后可以看到效果如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia20200830151645.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看到这个输出，聪明的你一定已经想到了线程安全的问题了😄。&lt;/p&gt;

&lt;p&gt;这是留给你后面的延伸作业，希望你可以继续这个问题的探究和思考。&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;本文探究了使用 &lt;strong&gt;fishhook + 内联汇编&lt;/strong&gt;实现 Hook &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt; 的全部实现及其内在原理。其中知识包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;什么是 Inline Hook 技术？&lt;/li&gt;
  &lt;li&gt;fishhook 的实现原理是什么？&lt;/li&gt;
  &lt;li&gt;为什么 fishhook 可以 Hook &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt; 方法？&lt;/li&gt;
  &lt;li&gt;如何使用内联汇编来进行记录上下文和还原上下文操作？&lt;/li&gt;
  &lt;li&gt;如何使用内联汇编通过方法地址调用方法？&lt;/li&gt;
  &lt;li&gt;汇编语句模版的简单使用。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上问题也用于考察你是否对这篇文章完全掌握，如果没有建议&lt;strong&gt;添加收藏&lt;/strong&gt;再次阅读。&lt;/p&gt;

&lt;p&gt;当然这个实现只是一个工具，你可以用它来做很多你需要的事情。&lt;/p&gt;

&lt;p&gt;另外，搞懂了这篇文章之后，我推荐你去再去看一看戴铭老师的「iOS 开发高手课 - 01 ｜ App 启动速度怎么做优化与监控」（并无利益，单纯推荐。这一章节可免费试读），我相信很多难点地方都会迎刃而解了。&lt;/p&gt;

&lt;h1 id=&quot;文章书籍引用与鸣谢&quot;&gt;文章书籍引用与鸣谢&lt;/h1&gt;

&lt;p&gt;特别感谢好友 @高级页面仔、@Boyang、@Jadyn、@酸菜鱼、@linxi 对于文章的斧正。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「在Xcode工程中嵌入汇编代码 · 高级页面仔」&lt;/li&gt;
  &lt;li&gt;「iOS 应用逆向与安全之道 · 罗巍」&lt;/li&gt;
  &lt;li&gt;「跟戴铭学 iOS 编程 - 理顺核心知识点 · 戴铭」&lt;/li&gt;
&lt;/ul&gt;</content><author><name>冬瓜</name><email>gua@desgard.com</email></author><category term="iOS 方案之本" /><summary type="html">背景 在上一篇文章中，我们介绍了 ARM64 中的汇编基础，并且知道了在汇编当中，调用一个方法的前后在栈空间是怎样表现的，以及内存中的几个特殊寄存器是如何操作的。 今天这篇文章，我们来详细详细分析一下使用汇编来 Hook objc_msgSend 方法的全部流程。 Hook 思路梳理 对于 objc_msgSend 这个我们要 Hook 的方法，我们首先要搞清楚，这是一个什么样的方法？我需要用什么方案才能 Hook 到它的入口。首先我们来整理以下我们拥有的 Hook 方案： 基于 Objective-C Runtime 的 Method Swizzling：也就是我们经常使用的 class_replaceMethod 方法； 基于 fishhook 的 Hook：由于在 Mach-O 当中，有 Bind 和 Lazy Bind 的两个概念，所以 Facebook 通过修改 __la_symbol 和 __nl_symbol 两个表的指针，在二次调用的时候，直接通过 __la_symbol_ptr 找到函数地址直接调用，从而不用多次繁琐的进行函数寻址； 基于 Dobby 的 Inline Hook：Dobby 是通过插入 __zDATA 段和 __zTEXT 段到 Mach-O 中。__zDATA 用来记录 Hook 信息（Hook 数量、每个 Hook 方法的地址）、每个 Hook 方法的信息（函数地址、跳转指令地址、写 Hook 函数的接口地址）、每个 Hook 的接口（指针）。__zText 用来记录每个 Hook 函数的跳转指令。Dobby 通过 mmap 把整个 Mach-O 文件映射到用户的内存空间，写入完成保存本地。所以 Dobby 并不是在原 Mach-O 上进行操作，而是重新生成并替换。关于 Dobby 中的奇技淫巧还有很多，如果有可能后续会出一个分析文章（插旗子）。 当然，成熟的 Hook 方案还有很多，并且这些经常出现在逆向工程中，我这里只是列举了最常用的三个。 什么是 Inline Hook 首先给个定义：Inline Hook 就是在运行的流程中插入跳转指令来抢夺运行流程的一个方法。 上图展示了 Inline Hook 大致的思路： 将原函数的前 N 个字节搬运到 Hook 函数的前 N 个字节； 然后将原函数的前 N 个字节填充跳转到 Hook 函数的跳转指令； 在 Hook 函数末尾几个字节填充跳转回原函数 +N 的跳转指令； 以上的 N 有多大，取决于你的跳转指令写得有多大（占用了多少指令）。 相较与 Inline Hook， fishhook 使用的是很 Trick 的方式，通过劫持 stub 从而达到替换的目的。 在罗巍的「iOS 应用逆向与安全之道」中将 fishhook 归类成 Inline Hook。从广义的定义上来说，只要完成重定向到我们自己的方法，并在远方法前后可定制处理就可以算作 Inline Hook。但是我和页面仔讨论的结果是，这里的 Inline 应该要理解为 Inline Modification，这种技术通常如上图所示，覆盖方法开头指令中的前几个字节，完成 Hook 方法的重定向工作。 fishhook 完成跳转 汇编实现的 objc_msgSend 为什么可以当作 C 方法？ 通过查看 objc_msgSend ，我们知道 Runtime 的 Method Swizzling 并不适用，因为它并不是 Objective-C 方法，调用时并不会有我们经常说的“消息转发”；通过查看 Runtime 源码，我们发现 objc_msgSend 是使用纯汇编实现函数，通过汇编文件我们可以看到以下定义： ENTRY _objc_msgSend 这里的 ENTRY 是什么意思呢？在文件中继续搜索 ENTRY 我们找到了这么一个宏： .macro ENTRY /* name */ .text .align 5 .globl $0 $0: .endmacro 这里定义了一个汇编宏，表示在 text 段定义一个 global 的 _objc_msgSend ，$0 其实就是这个宏传入的参数，也就是一个方法入口。我们可以手动将这个宏来展开： .text .align 5 .globl _objc_msgSend ; ... 这里我们发现，在第三行的位置通过 C 的 name mangling 命名规则，将符号 _objc_msgSend 映射为 C 的全局方法符号。也就是说，这段汇编可以通过头文件声明，便已完成了 C 的函数定义。我们在后续处理的时候可以将其视为 C 方法。 当然我们也可以使用 MachOView 来验证这个符号名。 这里如果不太明白如何使用纯汇编实现 C 方法，可以看高级页面仔的这篇文章「在Xcode工程中嵌入汇编代码」。 fishhook 实现的基础 既然我们将 objc_msgSend 已经视作 C 方法，那么我就可以使用 fishhook 来完成 Inline Hook 的第一步：跳到 Hook 方法。fishhook 是如何做的呢？它是在什么阶段完成这个动作的？来看下图： 我们知道，Apple 自身的共享缓存库其实不会编译进我们自己的 Mach-O 中的，而是在 App 启动后的动态链接才会去做重绑定操作。这里我们要如何去验证呢？首先我们写一个 fishhook 的 demo： #import &quot;ViewController.h&quot; #import &quot;fishhook.h&quot; @implementation ViewController static void (*ori_nslog)(NSString * format, ...); void new_nslog(NSString * format, ...) { //自定义的替换函数 format = [format stringByAppendingFormat:@&quot; Gua &quot;]; ori_nslog(format); } - (void)viewDidLoad { [super viewDidLoad]; NSLog(@&quot;hello world&quot;); struct rebinding nslog; nslog.name = &quot;NSLog&quot;; nslog.replacement = new_nslog; nslog.replaced = (void *)&amp;amp;ori_nslog; rebind_symbols((struct rebinding[1]){nslog}, 1); } - (void)touchesBegan:(NSSet&amp;lt;UITouch *&amp;gt; *)touches withEvent:(UIEvent *)event { NSLog(@&quot;hello world&quot;); } @end 编译运行之后发现输出 hello world ，点击屏幕后，成功 Hook NSLog 方法，输出 hello world Gua 。 2020-08-02 23:41:50.846939+0800 TestHook[13516:519138] hello world 2020-08-02 23:41:53.681944+0800 TestHook[13516:519138] hello world Gua 为什么可以 Hook？函数地址不是在编译之后就确定了吗？ 其实并不是，我们可以使用 nm -n 命令来查看一下所有的方法符合及其对应地址： $ nm -n TestHook.app/TestHook U _NSLog U _NSStringFromClass U _OBJC_CLASS_$_UIResponder U _OBJC_CLASS_$_UISceneConfiguration U _OBJC_CLASS_$_UIViewController ... U _objc_msgSend U _objc_msgSendSuper2 U _objc_opt_class ... 0000000100006690 b _ori_nslog 0000000100006698 b __rebindings_head 在这里我们就可以发现，其实 NSLog 方法其实并没有地址，这些系统库函数并不会打入到我们的 App 包中；当我们使用它们时，dyld 就要从共享的动态库中查找对应方法，然后将具体的函数地址绑定到之前声明的地方，从而实现系统库方法的调用。 另外说句题外话作为了解，对于这种可在主存中任意位置正确地执行，并且不受其绝对地址影响的技术，在计算机领域称之为 PIC（Position Independent Code）技术。 fishhook 对于 Mach-O 利用 首先我们要知道 Mach-O 中 __DATA 段有两个 Section 与动态符号绑定有关系： __nl_symbol_ptr ：存储了 non-lazily 绑定的符号，这些符号在 Mach-O 加载的时候绑定完成； __la_symbol_ptr ：存储了 lazy 绑定的方法，这些方法在第一次调用时，由 dyld_stub_binder 进行绑定； 既然 __la_symbol_ptr 存储了所有 lazy 绑定的方法，那也就是说在这些位置应该存储了对应方法的地址。我们通过 lldb 来验证一下。 我们在第一个 hello world 的位置增加断点，并使用 image list 命令来获取 App 的基地址： 在这个例子中，我们的 App 基地址为 0x00000001063b6000 。当然你做实验的时候可能基地址会有所改变，因为 ASLR（Address Spce Layout Randomizatio） 的缘故。 然后我们使用 MachOView 来查看在 __la_symbol_str 中的偏移量。 发现是 0x5000 ，所以我们在 lldb 中使用 x 命令来查看 0x00000001063b6000 + 0x5000 的数据是什么： (lldb) x 0x00000001063b6000+0x5000 0x1063bb000: f0 83 3b 06 01 00 00 00 69 98 93 25 ff 7f 00 00 ..;.....i..%.... 0x1063bb010: 23 53 32 49 ff 7f 00 00 54 84 3b 06 01 00 00 00 #S2I....T.;..... 发现在此位置的数据是 0x01063b83f0 。使用反汇编 dis 命令， 来看对应地址所指向的代码段： (lldb) dis -s 0x01063b83f0 0x1063b83f0: pushq $0x0 0x1063b83f5: jmp 0x1063b83e0 0x1063b83fa: pushq $0xd 0x1063b83ff: jmp 0x1063b83e0 0x1063b8404: pushq $0x127 ; imm = 0x127 0x1063b8409: jmp 0x1063b83e0 那么这段代码到底是我们的 NSLog 的代码吗？我们可以直接对当前断点对栈顶进行一次反汇编来确定一下结果。在 lldb 中直接输入 dis 命令： 可以看到汇编中 callq 命令对应对地址是 0x1063b8354 。对这个地址再次进行 dis -s 反汇编来查看： 我们发现其中 0x00000001063b83f0 这个待跳转的地址，就是上面 0x00000001063b6000 + 0x5000 这个位置存储的地址。 再这之后，我们再对点击事件中的 NSLog 方法下一个断点，并且点击一下模拟器屏幕来触发一下。我们再使用 x 和 dis -s 两个命令来查看一下 0x00000001063b6000 + 0x5000 中的新数据： 我们发现，其指向地址已经变成了 0x01063b7380 ，使用反汇编 dis 命令来查看的时候，也给出了相应的函数符号 new_nslog 。至此，fishhook Hook C 方法已经完成。 fishhook 思路总结 其实 fishhook 的 Hook 思路，也就是我们上述所描述的，当第一次调用系统动态库中 C 方法时，去替换掉 __la_symbol_str 的指针。但是它的逻辑要比这个思路还是要复杂一些，比如 fishhook 要解决以下问题： 使用数据结构来描述所有 Hook 方法？ 如何通过方法名来找到对应的 Lazy 指针？ 如何计算对应方法的地址？ 如果是非 Lazy 表中要如何处理？ 如何查找到对应符号名称？ 诸如此类的问题还有很多。如果想看具体的实现，推荐去阅读源码。当然我们归纳 fishhook 来修改 C 方法的本质，那就是：dyld 更新 Mach-O 二进制的 __DATA segment 的 __la_symbol_str 中的指针，使用 rebind_symbol 方法更新两个符号位置来进行符号的重新绑定。 内联汇编实现 Hook 上文讲述了使用 fishhook 来 Hook 系统库中的 C 方法，那么我们已经完成了以下这两个阶段（绿色位置）： 换句话说也就是我们通过 fishhook 已经完成了入口的重定向。但是 objc_msgSend 这个原方法我们又是不能不去调用的，因为我们只是希望在 Hook 的前后，增加自定义的事件，并不想去完整替换原先的消息转发逻辑。 所以，我们只要在 Hook 方法中调用原函数就可以解决问题了。 但是新的问题又出现了！objc_msgSend 到底应该如何传参呢？ objc_msgSend 方法定义 在 message.h 文件中，objc_msgSend 有如下定义： objc_msgSend(id _Nullable self, SEL _Nonnull op, ...) OBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0, 2.0); 看了函数定义，难点其实就是不定参数。既然是不定参数，其实我们可以根据不定参数的原理，在 va_list 来解析数组，就可以获取到所有参数了。虽然使用 va_list 是行的通的，但是我们需要考虑 va_list 在不同平台上的数据结构差异。这一点可以参看前辈 bang 在开发 JSPatch 的时候所做的笔记「JSPatch 实现原理详解」。 这个其实我也和页面仔讨论了一番。页面仔说其实使用 va_list 可变参数应该会有很大的坑，因为在 objc_msgSend 方法中不是传统意义上的可变参数。可以参考这篇文章「Apple 为什么要修改 objc_msgSend 的原型」。 但既然都已经对不同平台做差异化处理了，那么干脆就直接使用内联汇编来实现传参逻辑就可以了？在目前的 Hook 方案中，也就是直接使用 ARM 汇编来处理的。 记录上下文 通过上一篇文章「为什么使用汇编可以 Hook objc_msgSend（上）- 汇编基础」，我们了解到 X0 - X7 用来存储传递参数，我们仅从一个方法体的角度上来讲，可能参数已经是上下文的全部内容了。但是，我们从寄存器的角度上来看问题，上下文内容还有其他的东西，比如 Q0 - Q7 这八个浮点数寄存器。 所以为了保存方法的上下文，我们通过将 X0 - X9、Q0 - Q7 这些寄存器的值压栈，从而记录下调用 objc_msgSend 方法的所有上下文，其压栈方法直接模仿上文中调用函数时的压栈方法即可： ; sp 指向栈顶 ; 保存 {q0 - q7} ，偏移地址到 sp 寄存器 stp q6, q7, [sp, #-32]! stp q4, q5, [sp, #-32]! stp q2, q3, [sp, #-32]! stp q0, q1, [sp, #-32]! ; 保存 {x0 - x8, lr} stp x8, x9, [sp, #-16]! stp x6, x7, [sp, #-16]! stp x4, x5, [sp, #-16]! stp x2, x3, [sp, #-16]! stp x0, x1, [sp, #-16]! 为什么这里处理参数 X0-X7 要记录，还需要记录 X8 和 X9 两个寄存器呢？因为我们在 pre_objc_msgSend 会对其改变。为了还原之前所有寄存器的状态，最保险的方式就是全部记录。 调用 pre_objc_msgSend 方法 在保存完上下文之后，定义一个 pre_objc_msgSend 的方法，其作用是用来自己定制 objc_msgSend 之前发生的事情。 往往我们 Hook objc_msgSend 的目的，就是想记录方法的上下文信息。例如我们想度量慢函数的时间，则我们需要其方法名、所在的 Class 以及其上层调用方法和历史堆栈等。那么在定义 pre_objc_msgSend 方法的如参时，我们可以将 id self （self 实例指针），SEL _cmd （方法 ID），uintptr_t lr （LR 寄存器，函数调用后的返回地址）传入即可。 这里的 LR 记录其实并不是为我们业务而服务的，而是需要为堆栈记录，这样在 Hook 的最后可以跳转回上一层方法。 对应的，我们定义一个带有这三个参数的 pre_objc_msgSend 方法： void pre_objc_msgSend(id self, SEL _cmd, uintptr_t lr) { // pre action... } 为了将对应的参数传入，我们利用 X0-X2 寄存器来传参。因为 X0 和 X1 对应的就是 self 和 _cmd ，所以我们只需要将 LR 传递到 X2 中即可： ; 将 lr 传入 x2 mov x2, lr 接下来我们来实现调用 pre_objc_msgSend 方法。 我先给出汇编，然后我们来解析它的意思： __asm volatile (&quot;stp x8, x9, [sp, #-16]!\n&quot;); __asm volatile (&quot;mov x12, %0\n&quot; : : &quot;r&quot;(&amp;amp;pre_objc_msgSend)); __asm volatile (&quot;ldp x8, x9, [sp], #16\n&quot;); __asm volatile (&quot;blr x12\n&quot;); 第一行和第三行是用来记录和恢复 X8 和 X9 两个寄存器，其原因是因为使用了 %0 这个指令操作数，这是个什么东西呢？ 为了讲解方便，举一个其他的例子。假如我想使用内联汇编写一个加法函数，我可以写出以下代码： int arm_sum(int a, int b) { int sum = 0; asm volatile(&quot;add %0, %1, %2&quot; // 1 : &quot;=r&quot; (sum) // 2 : &quot;r&quot; (a), &quot;r&quot; (b) // 3 :); return sum; } - (void)viewDidLoad { [super viewDidLoad]; int a = arm_sum(2, 3); NSLog(@&quot;sum = %d&quot;, a); // sum = 5 } 这一行称作汇编语句模版。%0、%1、%2 代表指令操作数，也可以代表通用寄存器（需要注意的是，这不是 ARM 汇编，而是基于汇编的上层语言）。分别代表 sum 、a 和 b（为什么是这个顺序？可以看下面的 2 和 3）。这种操作数在汇编语句模版中只能有 10 个，即 %0 - %9 。当然这里的代码在 Xcode 可能会有 warning，Xcode 建议我们修改成 %w0 ，这个 w 代表这个变量的宽度，w 是 32 位，x 是 64 位。 第一个冒号 : 分割的位置是输出参数。=r 其实是两个操作符，我们可以分开来看。**= 代表 sum 变量是输出操作符，r 代表按照顺序与某个通用寄存器相关联，由于它是第一个关联的，自然就进入了 %0**。 第二个冒号 : 分割的位置是输入参数。继续使用操作符 r 将 a 和 b 以此放入通用寄存器 %1 和 %2 中。 搞懂了这个你应该就可以明白上面那个： __asm volatile (&quot;mov x12, %0\n&quot; : : &quot;r&quot;(&amp;amp;pre_objc_msgSend)); 是什么意思。对的，其实就是把 pre_objc_msgSend 的地址取出，然后放到 X12 寄存器。 那么为什么要记录和恢复 X8 和 X9 两个寄存器呢？我们在这里先记住一个结论：当使用汇编语句模版时，就会用到 X8 、X9 寄存器，因为它的下层实现是通过这些通用寄存器来做的。 所以为了恢复之前的上下文，我们就再一次的利用栈来保存一下这两个通用寄存器，在正式调用pre_objc_msgSend 方法之前将其复原即可。 最后一行使用 blr x12 ，正式调用 pre_objc_msgSend 方法。 恢复上下文并调用原函数 恢复上下文和之前的记录上下文是逆操作，所以不做过多分析： ldp x0, x1, [sp], #16 ldp x2, x3, [sp], #16 ldp x4, x5, [sp], #16 ldp x6, x7, [sp], #16 ldp x8, x9, [sp], #16 ldp q0, q1, [sp], #32 ldp q2, q3, [sp], #32 ldp q4, q5, [sp], #32 ldp q6, q7, [sp], #32 继续使用我们上述方法进行调用的内联汇编代码来调用远方法 objc_msgSend 。在这里假设我们已经使用 fishhook 将其实现 Hook 到我们新的内联汇编方法体 hook_objc_msgSend ，原方法放到 origin_objc_msgSend 上。所以对应的内联汇编代码： __asm volatile (&quot;stp x8, x9, [sp, #-16]!\n&quot;); __asm volatile (&quot;mov x12, %0\n&quot; : : &quot;r&quot;(&amp;amp;origin_objc_msgSend)); __asm volatile (&quot;ldp x8, x9, [sp], #16\n&quot;); __asm volatile (&quot;blr x12\n&quot;); 调用 post_objc_msgSend 并恢复 LR 在上一篇文章我们讲述过 LR 寄存器是用来记录函数调用完成时的返回地址的。但是经历了咱们多次其他方法的调用，我们没有办法确定 LR 的值是正确的。所以在 hook_objc_msgSend 方法的最后，我们需要将 LR 值进行恢复。 那么我们用什么方法来恢复 LR 寄存器值呢？这里有一种比较 trick 的方法，就是用一个全局数组来记录 LR 寄存器的值。我们用数组来模拟一个栈结构，其实就可以对应的找到其 LR （也许你会说这里会有线程安全的问题。是的，我在这里只是做一个示例，如果你有更加健壮的方法，也可以去扩写）。 我们改写一下 pre_objc_msgSend 方法来记录 LR 的值： // 假设方法调用最多有 10000 层 uintptr_t l_ptr_t[10000]; // LR 栈的游标 int cur = 0; void pre_objc_msgSend(id self, SEL _cmd, uintptr_t lr) { printf(&quot;before objc msgSend\n&quot;); // 记录 lr，且游标 +1 l_ptr_t[cur ++] = lr; } 根据之前的知识，我们知道方法的返回值在 ret 之后，会被存入 X0 寄存器。所以我们在 post_objc_msgSend 中将上文记录的 LR 值返回，然后在使用 X0 寄存器来恢复 LR 寄存器。 // 返回记录的 lr 值 uintptr_t post_objc_msgSend() { if (cur != 0) { cur --; } return l_ptr_t[cur]; } // hook_objc_msgSend 内部 ... // 省略 保存上下文过程 ... __asm volatile (&quot;stp x8, x9, [sp, #-16]!\n&quot;); __asm volatile (&quot;mov x12, %0\n&quot; : : &quot;r&quot;(&amp;amp;post_objc_msgSend)); __asm volatile (&quot;ldp x8, x9, [sp], #16\n&quot;); __asm volatile (&quot;blr x12\n&quot;); // 恢复 lr __asm volatile (&quot;mov lr, x0\n&quot;); // 省略 恢复上下文过程 ... // return __asm volatile (&quot;ret\n&quot;); 如此，我们完成了使用内联汇编来 Hook objc_msgSend 方法的全部实现代码。 简单封装 在上面的全流程中，我们已经全部解析了 Hook objc_msgSend 的全部实现细节，但是我们发现，其实主要的子操作就分成 3 个： 记录上下文； 恢复上下文； 调用方法； 所以我们可以使用宏来对这三个子操作进行抽象封装。 在下面代码中，我们将三个操作分别封装成了 save() 、load() 和 call(value) 三个宏，这样在 Hook 流程上就一目了然了。 #import &quot;objc_msgSend_hook.h&quot; #import &quot;fishhook.h&quot; #include &amp;lt;dispatch/dispatch.h&amp;gt; #define call(value) \ __asm volatile (&quot;stp x8, x9, [sp, #-16]!\n&quot;); \ __asm volatile (&quot;mov x12, %0\n&quot; :: &quot;r&quot;(value)); \ __asm volatile (&quot;ldp x8, x9, [sp], #16\n&quot;); \ __asm volatile (&quot;blr x12\n&quot;); #define save() \ __asm volatile ( \ &quot;stp x8, x9, [sp, #-16]!\n&quot; \ &quot;stp x6, x7, [sp, #-16]!\n&quot; \ &quot;stp x4, x5, [sp, #-16]!\n&quot; \ &quot;stp x2, x3, [sp, #-16]!\n&quot; \ &quot;stp x0, x1, [sp, #-16]!\n&quot;); #define load() \ __asm volatile ( \ &quot;ldp x0, x1, [sp], #16\n&quot; \ &quot;ldp x2, x3, [sp], #16\n&quot; \ &quot;ldp x4, x5, [sp], #16\n&quot; \ &quot;ldp x6, x7, [sp], #16\n&quot; \ &quot;ldp x8, x9, [sp], #16\n&quot; ); __unused static id (*orig_objc_msgSend)(id, SEL, ...); uintptr_t l_ptr_t[10000]; int cur = 0; void pre_objc_msgSend(id self, SEL _cmd, uintptr_t lr) { printf(&quot;pre action...\n&quot;); // 做一个简单对测试，输出 ObjC 方法名 printf(&quot;\t%s\n&quot;, object_getClassName(self)); printf(&quot;\t%s\n&quot;, _cmd); l_ptr_t[cur ++] = lr; } uintptr_t post_objc_msgSend() { printf(&quot;post action...\n&quot;); if (cur != 0) { cur --; } return l_ptr_t[cur]; } __attribute__((__naked__)) static void hook_Objc_msgSend() { // 记录上下文 save() // 将 lr 传入 x2 用于 pre_objc_msgSend 传参 __asm volatile (&quot;mov x2, lr\n&quot;); // 调用 pre_objc_msgSend call(&amp;amp;pre_objc_msgSend) // 还原上下文 load() // 调用 objc_msgSend 原方法 call(orig_objc_msgSend) // 记录上下文 save() // 调用 post_objc_msgSend call(&amp;amp;post_objc_msgSend) // 还原 lr __asm volatile (&quot;mov lr, x0\n&quot;); // 还原上下文 load() // return __asm volatile (&quot;ret\n&quot;); } #pragma mark public // 启动Hook 入口 void hookStart() { static dispatch_once_t onceToken; dispatch_once(&amp;amp;onceToken, ^{ rebind_symbols((struct rebinding[6]){ { &quot;objc_msgSend&quot;, (void *)hook_Objc_msgSend, (void **)&amp;amp;orig_objc_msgSend }, }, 1); }); } 为什么我在 load() 和 save() 方法中没有记录和复原 Q0 - Q7 寄存器情况？因为我们在整个的流程中并没有用到浮点数。所以这些寄存器是不会被修改的，因此我们可以简化这个写法。 从这个点可以引出，其实 Hook 方法和内联汇编是具有耦合的（通用寄存器就那么几个，大家公用），你需要为 Hook 方法中的实现来定制内联汇编的实现，才能够满足整体的需求实现。 我在 pre_objc_msgSend 中增加了打印方法名和类名的测试方法，运行后可以看到效果如下图： 看到这个输出，聪明的你一定已经想到了线程安全的问题了😄。 这是留给你后面的延伸作业，希望你可以继续这个问题的探究和思考。 总结 本文探究了使用 fishhook + 内联汇编实现 Hook objc_msgSend 的全部实现及其内在原理。其中知识包括： 什么是 Inline Hook 技术？ fishhook 的实现原理是什么？ 为什么 fishhook 可以 Hook objc_msgSend 方法？ 如何使用内联汇编来进行记录上下文和还原上下文操作？ 如何使用内联汇编通过方法地址调用方法？ 汇编语句模版的简单使用。 以上问题也用于考察你是否对这篇文章完全掌握，如果没有建议添加收藏再次阅读。 当然这个实现只是一个工具，你可以用它来做很多你需要的事情。 另外，搞懂了这篇文章之后，我推荐你去再去看一看戴铭老师的「iOS 开发高手课 - 01 ｜ App 启动速度怎么做优化与监控」（并无利益，单纯推荐。这一章节可免费试读），我相信很多难点地方都会迎刃而解了。 文章书籍引用与鸣谢 特别感谢好友 @高级页面仔、@Boyang、@Jadyn、@酸菜鱼、@linxi 对于文章的斧正。 「在Xcode工程中嵌入汇编代码 · 高级页面仔」 「iOS 应用逆向与安全之道 · 罗巍」 「跟戴铭学 iOS 编程 - 理顺核心知识点 · 戴铭」</summary></entry><entry><title type="html">版本管理工具及 Ruby 工具链环境</title><link href="https://www.desgard.com/2020/06/11/cocoapods-story-1.html" rel="alternate" type="text/html" title="版本管理工具及 Ruby 工具链环境" /><published>2020-06-11T00:00:00-08:00</published><updated>2020-06-11T00:00:00-08:00</updated><id>https://www.desgard.com/2020/06/11/cocoapods-story-1</id><content type="html" xml:base="https://www.desgard.com/2020/06/11/cocoapods-story-1.html">&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 作为业界标准，各位 iOS 开发同学应该都不陌生。不过很多同学对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 的使用基本停留在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod update&lt;/code&gt; 上。一旦项目组件化，各业务线逻辑拆分到独立的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 中后，光了解几个简单 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 命令是无法满足需求的，同时还面临开发环境的一致性，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 命令执行中的各种异常错误，都要求我们对其有更深层的认知和 🤔。&lt;/p&gt;

&lt;p&gt;关于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 深入的文章有很多，推荐 ObjC China 的这篇，&lt;a href=&quot;https://objccn.io/issue-6-4/&quot;&gt;深入理解 CocoaPods&lt;/a&gt;，而本文希望从依赖管理工具的角度来谈谈 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 的管理理念。&lt;/p&gt;

&lt;h1 id=&quot;version-control-system-vcs&quot;&gt;Version Control System (VCS)&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Version control systems are a category of software tools that help a software team manage changes to source code over time. Version control software keeps track of every modification to the code in a special kind of database.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;软件工程中，版本控制系统是敏捷开发的重要一环，为后续的持续集成提供了保障。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Source Code Manager&lt;/code&gt; (SCM) 源码管理就属于 VCS 的范围之中，熟知的工具有如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Git&lt;/code&gt; 。而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 这种针对各种语言所提供的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Package Manger (PM) &lt;/code&gt;也可以看作是 SCM 的一种。&lt;/p&gt;

&lt;p&gt;而像 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Git&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SVN&lt;/code&gt; 是针对项目的单个文件的进行版本控制，而 PM 则是以每个独立的 Package 作为最小的管理单元。包管理工具都是结合 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCM&lt;/code&gt; 来完成管理工作，对于被 PM 接管的依赖库的文件，通常会在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Git&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ignore&lt;/code&gt; 文件中选择忽略它们。&lt;/p&gt;

&lt;p&gt;例如：在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node&lt;/code&gt; 项目中一般会把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; 目录下的文件 ignore 掉，在 iOS/macOS 项目则是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;git-submodule&quot;&gt;Git Submodule&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1591500594410-f99fd015-3566-49c7-a11f-09f49b1ef142.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Git submodules allow you to keep a git repository as a subdirectory of another git repository. Git submodules are simply a reference to another repository at a particular snapshot in time. Git submodules enable a Git repository to incorporate and track version history of external code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Git Submodules&lt;/code&gt; 可以算是 PM 的“青春版”，它将单独的 Git 仓库以子目录的形式嵌入在工作目录中。它不具备 PM 工具所特有的&lt;a href=&quot;https://semver.org/&quot;&gt;语义化版本&lt;/a&gt;管理、无法处理依赖共享与冲突等。只能保存每个依赖仓库的文件状态。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Git&lt;/code&gt; 在提交更新时，会对所有文件制作一个快照并将其存在数据库中。Git 管理的文件存在 3 种状态：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;working director：&lt;/strong&gt; 工作目录，即我们肉眼可见的文件&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;stage area：&lt;/strong&gt; 暂存区 (或称 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index area&lt;/code&gt; )，存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git/index&lt;/code&gt; 目录下，保存的是执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add&lt;/code&gt; 相关命令后从工作目录添加的文件。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;commit history：&lt;/strong&gt; 提交历史，存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git/&lt;/code&gt; 目录下，到这个状态的文件改动算是入库成功，基本不会丢失了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1591356928689-4afddee3-9ca8-4392-8ccc-00ac114e4fe9.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Git submodule 是依赖 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitmodules&lt;/code&gt; 文件来记录子模块的。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;submodule&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ReactNative&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ReactNative&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;facebook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ReactNative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitmodules&lt;/code&gt; 仅记录了 path 和 url 以及模块名称的基本信息， 但是我们还需要记录每个 Submodule Repo 的 commit 信息，而这 commit 信息是记录在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git/modules&lt;/code&gt; 目录下。同时被添加到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitmodules&lt;/code&gt; 中的 path 也会被 git 直接 ignore 掉。&lt;/p&gt;

&lt;h2 id=&quot;package-manger&quot;&gt;Package Manger&lt;/h2&gt;

&lt;p&gt;作为 Git Submodule 的强化版，PM 基本都具备了语义化的版本检查能力，依赖递归查找，依赖冲突解决，以及针对具体依赖的构建能力和二进制包等。简单对比如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Key File&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Git submodule&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;CocoaPods&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;SPM&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;npm&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;描述文件&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;.gitmodules&lt;/td&gt;
      &lt;td&gt;Podfile&lt;/td&gt;
      &lt;td&gt;Package.swift&lt;/td&gt;
      &lt;td&gt;Package.json&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;锁存文件&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;.git/modules&lt;/td&gt;
      &lt;td&gt;Podfile.lock&lt;/td&gt;
      &lt;td&gt;Package.resolved&lt;/td&gt;
      &lt;td&gt;package-lock.json&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;从 👆 可见，PM 工具基本围绕这个两个文件来现实包管理：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;描述文件&lt;/strong&gt;：声明了项目中存在哪些依赖，版本限制；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;锁存文件（Lock 文件）&lt;/strong&gt;：记录了依赖包最后一次更新时的全版本列表。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了这两个文件之外，中心化的 PM 一般会提供依赖包的托管服务，比如 npm 提供的 &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npmjs.com&lt;/a&gt; 可以集中查找和下载 npm 包。如果是去中心化的 PM 比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iOS&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Carthage&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SPM&lt;/code&gt; 就只能通过 Git 仓库的地址了。&lt;/p&gt;

&lt;h2 id=&quot;cocoapods&quot;&gt;CocoaPods&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1591610249202-498640a5-1265-4cbd-ad45-a23644b393e8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 是开发 iOS/macOS 应用程序的一个第三方库的依赖管理工具。 利用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt;，可以定义自己的依赖关系（简称 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods&lt;/code&gt;），以及在整个开发环境中对第三方库的版本管理非常方便。&lt;/p&gt;

&lt;p&gt;下面我们以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 为例。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1591356928500-57c852dd-59f0-4983-8665-e2bd5d3eab88.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;podfile&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 是一个文件，以 DSL（其实直接用了 Ruby 的语法）来描述依赖关系，用于定义项目所需要使用的第三方库。该文件支持高度定制，你可以根据个人喜好对其做出定制。更多相关信息，请查阅 &lt;a href=&quot;http://guides.cocoapods.org/syntax/podfile.html&quot;&gt;Podfile 指南&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;podfilelock&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile.lock&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;这是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 创建的最重要的文件之一。它记录了需要被安装的 Pod 的每个已安装的版本。如果你想知道已安装的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 是哪个版本，可以查看这个文件。推荐将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile.lock&lt;/code&gt; 文件加入到版本控制中，这有助于整个团队的一致性。&lt;/p&gt;

&lt;h3 id=&quot;manifestlock&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Manifest.lock&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;这是每次运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt; 命令时创建的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile.lock&lt;/code&gt; 文件的副本。如果你遇见过这样的错误 &lt;strong&gt;沙盒文件与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile.lock&lt;/code&gt; 文件不同步 (The sandbox is not in sync with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile.lock&lt;/code&gt;)&lt;/strong&gt;，这是因为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Manifest.lock&lt;/code&gt; 文件和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile.lock&lt;/code&gt; 文件不一致所引起。由于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods&lt;/code&gt; 所在的目录并不总在版本控制之下，这样可以保证开发者运行 App 之前都能更新他们的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pods&lt;/code&gt;，否则 App 可能会 crash，或者在一些不太明显的地方编译失败。&lt;/p&gt;

&lt;h3 id=&quot;master-specs-repo&quot;&gt;Master Specs Repo&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ultimately, the goal is to improve discoverability of, and engagement in, third party open-source libraries, by creating a more centralized ecosystem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;作为包管理工具，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 的目标是为我们提供一个更加集中的生态系统，来提高依赖库的可发现性和参与度。本质上是为了提供更好的检索和查询功能，可惜成为了它的问题之一。因为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 通过官方的 Spec 仓库来管理这些注册的依赖库。随着不断新增的依赖库导致 Spec 的更新和维护成为了使用者的包袱。&lt;/p&gt;

&lt;p&gt;好在这个问题在 1.7.2 版本中已经解决了，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 提供了 &lt;a href=&quot;http://blog.cocoapods.org/CocoaPods-1.7.2/&quot;&gt;Mater Repo CDN&lt;/a&gt; ，可以直接 CDN 到对应的 Pod 地址而无需在通过本地的 Spec 仓库了。同时在 1.8 版本中，官方默认的 Spec 仓库已替换为 CDN，其地址为  &lt;a href=&quot;https://cdn.cocoapods.org&quot;&gt;https://cdn.cocoapods.org&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1591356928577-dbe39320-0571-46f1-af74-9215de67e9e8.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;ruby-生态及工具链&quot;&gt;Ruby 生态及工具链&lt;/h1&gt;

&lt;p&gt;对于一部分仅接触过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 的同学，其 PM 可能并不熟悉。其实 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 的思想借鉴了其他语言的 PM 工具，例：&lt;a href=&quot;https://rubygems.org/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RubyGems&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://bundler.io/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bundler&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt;&lt;/a&gt; 和 &lt;a href=&quot;https://gradle.org/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gradle&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;我们知道 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 是通过 Ruby 语言实现的。它本身就是一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem&lt;/code&gt; 包。理解了 Ruby 的依赖管理有助于我们更好的管理不同版本的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 和其他 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem&lt;/code&gt;。同时能够保证团队中的所有同事的工具是在同一个版本，这也算是敏捷开发的保证吧。&lt;/p&gt;

&lt;h2 id=&quot;rvm--rbenv&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVM&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1591692379182-19a05f9c-2e20-4f53-9e73-eda10d2969ae.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://rvm.io/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVM&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;a href=&quot;https://github.com/rbenv/rbenv&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; 都是管理多个 Ruby 环境的工具，它们都能提供不同版本的 Ruby 环境管理和切换。&lt;/p&gt;

&lt;p&gt;个人目前使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt;，至于 &lt;a href=&quot;https://github.com/rbenv/rbenv/wiki/Why-rbenv%3F&quot;&gt;Why rbenv&lt;/a&gt; 感兴趣的同学可以看看，最终还是看个人。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1591356928575-cdb4c8e7-c5ea-4654-8b2c-89751b9dab21.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rubygems&quot;&gt;RubyGems&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1591610289342-050f57ac-98c2-4cba-b766-a914977ce7c6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The RubyGems software allows you to easily download, install, and use ruby software packages on your system. The software package is called a “gem” which contains a packaged Ruby application or library.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://rubygems.org/&quot;&gt;RubyGems&lt;/a&gt; 是 Ruby 的一个包管理工具，这里面管理着用 Ruby 编写的工具或依赖我们称之为 Gem。&lt;/p&gt;

&lt;p&gt;并且 RubyGems 还提供了 Ruby 组件的托管服务，可以集中式的查找和安装 library 和 apps。当我们使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install xxx&lt;/code&gt; 时，会通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rubygems.org&lt;/code&gt; 来查询对应的 Gem Package。而 iOS 日常中的很多工具都是 Gem 提供的，例：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bundler&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fastlane&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jazzy&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 等。&lt;/p&gt;

&lt;p&gt;在默认情况下 Gems 总是下载 library 的最新版本，这无法确保所安装的 library 版本符合我们预期。因此我们还缺一个工具。&lt;/p&gt;

&lt;h2 id=&quot;bundler&quot;&gt;Bundler&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1591610297193-96c92d15-aa48-4136-abf3-fd8dcb5f2835.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bundler.io/&quot;&gt;Bundler&lt;/a&gt; 是管理 Gem 依赖的工具，可以隔离不同项目中 Gem 的版本和依赖环境的差异，也是一个 Gem。&lt;/p&gt;

&lt;p&gt;Bundler 通过读取项目中的依赖描述文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; ，来确定各个 Gems 的版本号或者范围，来提供了稳定的应用环境。当我们使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; 它会生成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; 将当前 librarys 使用的具体版本号写入其中。之后，他人再通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; 来安装 libaray 时则会读取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; 中的 librarys、版本信息等。&lt;/p&gt;

&lt;h3 id=&quot;gemfile&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;可以说 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods**&lt;/code&gt; 其实是 iOS 版的 RubyGems + Bundler 组合。Bundler 依据项目中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; 文件来管理 Gem，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 通过 Podfile 来管理 Pod。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bundler.io/v2.0/gemfile.html&quot;&gt;Gemfile&lt;/a&gt; 配置如下：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://gems.example.com'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cocoapods'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1.8.4'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'another_gem'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://looseyi.github.io.git'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'master'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可见，Podfile 的 DSL 写法和 Gemfile 如出一辙。那什么情况会用到 Gemfile 呢 ？&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 每年都会有一些重大版本的升级，前面聊到过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install&lt;/code&gt; 过程中会对项目的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xcodeproj&lt;/code&gt; 文件进行修改，不同版本其有所不同，这些在变更都可能导致大量 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conflicts&lt;/code&gt;，处理不好，项目就不能正常运行了。我想你一定不愿意去修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xcodeproj&lt;/code&gt; 的冲突。&lt;/p&gt;

&lt;p&gt;如果项目是基于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fastlane&lt;/code&gt; 来进行持续集成的相关工作以及 App 的打包工作等，也需要其版本管理等功能。&lt;/p&gt;

&lt;h1 id=&quot;如何安装一套可管控的-ruby-工具链&quot;&gt;如何安装一套可管控的 Ruby 工具链？&lt;/h1&gt;

&lt;p&gt;讲完了这些工具的分工，然后来说说实际的运用。我们可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;homebrew&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RubyGems&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bundler&lt;/code&gt; 这一整套工具链来控制一个工程中 Ruby 工具的版本依赖。&lt;/p&gt;

&lt;p&gt;以下是我认为比较可控的 Ruby 工具链分层管理图。下面我们逐一讲述每一层的管理方式，以及实际的操作方法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1591692591825-5e8b38bb-cf2d-4435-b9b1-704b02df1202.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-使用-homebrew-安装-rbenv&quot;&gt;1. 使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;homebrew&lt;/code&gt; 安装 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt;&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;rbenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装成功后输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt; 就可以看到相关提示：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv

rbenv 1.1.2
Usage: rbenv &amp;lt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;args&amp;gt;]

Some useful rbenv commands are:
   commands    List all available rbenv commands
   &lt;span class=&quot;nb&quot;&gt;local       &lt;/span&gt;Set or show the &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;application-specific Ruby version
   global      Set or show the global Ruby version
   shell       Set or show the shell-specific Ruby version
   &lt;span class=&quot;nb&quot;&gt;install     &lt;/span&gt;Install a Ruby version using ruby-build
   uninstall   Uninstall a specific Ruby version
   rehash      Rehash rbenv shims &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;run this after installing executables&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   version     Show the current Ruby version and its origin
   versions    List installed Ruby versions
   which       Display the full path to an executable
   whence      List all Ruby versions that contain the given executable

See &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;rbenv &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt; &amp;lt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' for information on a specific command.
For full documentation, see: https://github.com/rbenv/rbenv#readme
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-使用-rbenv-管理-ruby-版本&quot;&gt;2. 使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt; 管理 Ruby 版本&lt;/h2&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt; 来安装一个 Ruby 版本，这里我使用刚刚  release Ruby 2.7：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;2.7.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个安装过程有些长，因为要下载 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openssl&lt;/code&gt; 和 Ruby 的解释器，大概要 20 分钟左右。&lt;/p&gt;

&lt;p&gt;安装成功后，我们让其在本地环境中生效：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv shell 2.7.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;输入上述命令后，可能会有报错。 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt; 提示我们在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; 中增加一行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval &quot;$(rbenv init -)&quot;&lt;/code&gt; 语句来对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt; 环境进行初始化。如果报错，我们增加并重启终端即可。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
ruby 2.7.0p0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2019-12-25 revision 647ee6f091&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;x86_64-darwin19]
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;which ruby
/Users/gua/.rbenv/shims/ruby
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;切换之后我们发现 Ruby 已经切换到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt; 的管理版本，并且其启动 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt; 也已经变成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt; 管理下的 Ruby。并且我们可以看一下 Ruby 捆绑的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt; ：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;which gem
/Users/bytedance/.rbenv/shims/gem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对应的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem&lt;/code&gt; 也已经变成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt; 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt; 。&lt;/p&gt;

&lt;h2 id=&quot;3-查询系统级-gem-依赖&quot;&gt;3. 查询系统级 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem&lt;/code&gt; 依赖&lt;/h2&gt;

&lt;p&gt;如此，我们使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt; 已经对 Ruby 及其 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem&lt;/code&gt; 环境在版本上进行了环境隔离。我们可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem list&lt;/code&gt; 命令来查询当前系统环境下所有的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem&lt;/code&gt; 依赖：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem list

&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; LOCAL GEMS &lt;span class=&quot;k&quot;&gt;***&lt;/span&gt;

activesupport &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4.2.11.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
...
claide &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.0.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
cocoapods &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.9.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
cocoapods-core &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.9.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
cocoapods-deintegrate &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.0.4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
cocoapods-downloader &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.3.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
cocoapods-plugins &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
cocoapods-search &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
cocoapods-stats &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.1.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
cocoapods-trunk &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.5.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
cocoapods-try &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;记住这里的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 版本，我们后面项目中还会查询。&lt;/p&gt;

&lt;p&gt;如此我们已经完成了全部的 Ruby、Gem 环境的配置，我们通过一张漏斗图再来梳理一下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;如何使用-bundler-管理工程中的-gem-环境&quot;&gt;如何使用 Bundler 管理工程中的 Gem 环境&lt;/h1&gt;

&lt;p&gt;下面我们来实践一下，如何使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bundler&lt;/code&gt; 来锁定项目中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem&lt;/code&gt; 环境，从而让整个团队统一 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem&lt;/code&gt; 环境中的所有 Ruby 工具版本。从而避免文件冲突和不必要的错误。&lt;/p&gt;

&lt;p&gt;下面是在工程中对于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem&lt;/code&gt; 环境的层级图，我们可以在项目中增加一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; 描述，从而锁定当前项目中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem&lt;/code&gt; 依赖环境。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Desgard/img/master/img/guardia1591770762979-60f1adee-7b73-4ca8-b6a1-dbc917ae024e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以下也会逐一讲述每一层的管理方式，以及实际的操作方法。&lt;/p&gt;

&lt;h2 id=&quot;1-在-ios-工程中初始化-bundler-环境&quot;&gt;1. 在 iOS 工程中初始化 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bundler&lt;/code&gt; 环境&lt;/h2&gt;

&lt;p&gt;首先我们有一个 iOS Demo 工程 - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GuaDemo&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
total 0
drwxr-xr-x   4 gua  staff   128 Jun 10 14:47 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
drwxr-xr-x@ 52 gua  staff  1664 Jun 10 14:47 ..
drwxr-xr-x   8 gua  staff   256 Jun 10 14:47 GuaDemo
drwxr-xr-x@  5 gua  staff   160 Jun 10 14:47 GuaDemo.xcodeproj
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;首先先来初始化一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bundler&lt;/code&gt;  环境（其实就是自动创建一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; 文件）：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle init

Writing new Gemfile to /Users/Gua/GuaDemo/Gemfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-在-gemfile中声明使用的-cocoapods-版本并安装&quot;&gt;2. 在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; 中声明使用的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 版本并安装&lt;/h2&gt;

&lt;p&gt;之后我们编辑一下这个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; 文件，加入我们当前环境中需要使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods 1.5.3&lt;/code&gt; 这个版本，则使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; 的 DSL 编写以下内容：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;git_source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repo_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repo_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# gem &quot;rails&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cocoapods&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.5.3&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;编写之后执行一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; ：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Fetching&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;china&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/............&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Resolving&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Fetching&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cocoapods&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Installing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cocoapods&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;complete!&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gemfile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;installed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;发现 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods 1.5.3&lt;/code&gt; 这个指定版本已经安装成功，并且还保存了一份 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; 文件用来锁存这次的依赖结果。&lt;/p&gt;

&lt;h2 id=&quot;3-使用当前环境下的-cocoapods-版本操作-ios-工程&quot;&gt;3. 使用当前环境下的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 版本操作 iOS 工程&lt;/h2&gt;

&lt;p&gt;此时我们可以检查一下当前 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bundler&lt;/code&gt; 环境下的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem&lt;/code&gt; 列表：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LOCAL&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GEMS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;***&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;activesupport&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;11.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;atomos&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bundler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;CFPropertyList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;claide&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cocoapods&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;发现相比于全局 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem&lt;/code&gt; 列表，这个列表精简了许多，并且也只是基础 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem&lt;/code&gt; 依赖和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem&lt;/code&gt; 依赖。此时我们使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec pod install&lt;/code&gt; 来执行 Install 这个操作，就可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods 1.5.3&lt;/code&gt; 版本来执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 操作了（当然，前提是你还需要写一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; ，大家都是 iOSer 这里就略过了）。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Analyzing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Downloading&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Installing&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SnapKit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Integrating&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Please&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Xcode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`GuaDemo.xcworkspace`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Sending&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Pod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;installation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;complete!&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;There&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Podfile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;installed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以再来看一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile.lock&lt;/code&gt; 文件：&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Podfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;PODS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SnapKit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;DEPENDENCIES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SnapKit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;SPEC&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;REPOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cocoapods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SnapKit&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;SPEC&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CHECKSUMS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;SnapKit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b92857e3df3a0c71833cce143274bf6ef8e5eb&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;PODFILE&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a4b05aaf43554bc31c90f8dac5c2dc0490203e8&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;COCOAPODS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;发现使用的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 的版本确实是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.5.3&lt;/code&gt; 。而当我们不使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec&lt;/code&gt; 执行前缀，则会使用系统环境中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 版本。如此我们也就验证了工程中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem&lt;/code&gt; 环境和系统中的环境可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bundler&lt;/code&gt; 进行隔离。&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;通过版本管理工具演进的角度可以看出，CocoaPods 的诞生并非一蹴而就，也是不断地借鉴其他管理工具的优点，一点点的发展起来的。VCS 工具从早期的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SVN&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Git&lt;/code&gt;，再细分出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Git Submodule&lt;/code&gt;，再到各个语言的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Package Manager&lt;/code&gt; 也是一直在发展的。&lt;/li&gt;
  &lt;li&gt;虽然 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 作为包管理工具控制着 iOS 项目的各种依赖库，但其自身同样遵循着严格的版本控制并不断迭代。希望大家可以从本文中认识到版本管理的重要性。&lt;/li&gt;
  &lt;li&gt;通过实操 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bundler&lt;/code&gt; 管理工程的全流程，学习了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bundler&lt;/code&gt; 基础，并学习了如何控制一个项目中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem&lt;/code&gt; 版本信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;后续我们将会围绕 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; ，从工具链逐渐深入到细节，根据我们的使用经验，逐一讲解。&lt;/p&gt;

&lt;h1 id=&quot;知识点问题梳理&quot;&gt;知识点问题梳理&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PM&lt;/code&gt; 是如何进行依赖库的版本管理？&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ruby&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVM/rbenv&lt;/code&gt; 之间的关系是什么？&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bundler&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocaPods&lt;/code&gt; 之间的关系是什么？&lt;/li&gt;
  &lt;li&gt;如何通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bundler&lt;/code&gt; 来管理工程中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem&lt;/code&gt; 环境？如何锁死工程内部的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; 版本？&lt;/li&gt;
&lt;/ol&gt;</content><author><name>冬瓜</name><email>gua@desgard.com</email></author><category term="CocoaPods 历险记" /><category term="Ruby" /><summary type="html">背景 CocoaPods 作为业界标准，各位 iOS 开发同学应该都不陌生。不过很多同学对 CocoaPods 的使用基本停留在 pod install 和 pod update 上。一旦项目组件化，各业务线逻辑拆分到独立的 Pod 中后，光了解几个简单 Pod 命令是无法满足需求的，同时还面临开发环境的一致性，Pod 命令执行中的各种异常错误，都要求我们对其有更深层的认知和 🤔。 关于 CocoaPods 深入的文章有很多，推荐 ObjC China 的这篇，深入理解 CocoaPods，而本文希望从依赖管理工具的角度来谈谈 CocoaPods 的管理理念。 Version Control System (VCS) Version control systems are a category of software tools that help a software team manage changes to source code over time. Version control software keeps track of every modification to the code in a special kind of database. 软件工程中，版本控制系统是敏捷开发的重要一环，为后续的持续集成提供了保障。Source Code Manager (SCM) 源码管理就属于 VCS 的范围之中，熟知的工具有如 Git 。而 CocoaPods 这种针对各种语言所提供的 Package Manger (PM) 也可以看作是 SCM 的一种。 而像 Git 或 SVN 是针对项目的单个文件的进行版本控制，而 PM 则是以每个独立的 Package 作为最小的管理单元。包管理工具都是结合 SCM 来完成管理工作，对于被 PM 接管的依赖库的文件，通常会在 Git 的 .ignore 文件中选择忽略它们。 例如：在 Node 项目中一般会把 node_modules 目录下的文件 ignore 掉，在 iOS/macOS 项目则是 Pods。 Git Submodule Git submodules allow you to keep a git repository as a subdirectory of another git repository. Git submodules are simply a reference to another repository at a particular snapshot in time. Git submodules enable a Git repository to incorporate and track version history of external code. Git Submodules 可以算是 PM 的“青春版”，它将单独的 Git 仓库以子目录的形式嵌入在工作目录中。它不具备 PM 工具所特有的语义化版本管理、无法处理依赖共享与冲突等。只能保存每个依赖仓库的文件状态。 Git 在提交更新时，会对所有文件制作一个快照并将其存在数据库中。Git 管理的文件存在 3 种状态： working director： 工作目录，即我们肉眼可见的文件 stage area： 暂存区 (或称 index area )，存在 .git/index 目录下，保存的是执行 git add 相关命令后从工作目录添加的文件。 commit history： 提交历史，存在 .git/ 目录下，到这个状态的文件改动算是入库成功，基本不会丢失了。 Git submodule 是依赖 .gitmodules 文件来记录子模块的。 [submodule &quot;ReactNative&quot;] path = ReactNative url = https://github.com/facebook/ReactNative.git .gitmodules 仅记录了 path 和 url 以及模块名称的基本信息， 但是我们还需要记录每个 Submodule Repo 的 commit 信息，而这 commit 信息是记录在 .git/modules 目录下。同时被添加到 .gitmodules 中的 path 也会被 git 直接 ignore 掉。 Package Manger 作为 Git Submodule 的强化版，PM 基本都具备了语义化的版本检查能力，依赖递归查找，依赖冲突解决，以及针对具体依赖的构建能力和二进制包等。简单对比如下： Key File Git submodule CocoaPods SPM npm 描述文件 .gitmodules Podfile Package.swift Package.json 锁存文件 .git/modules Podfile.lock Package.resolved package-lock.json 从 👆 可见，PM 工具基本围绕这个两个文件来现实包管理： 描述文件：声明了项目中存在哪些依赖，版本限制； 锁存文件（Lock 文件）：记录了依赖包最后一次更新时的全版本列表。 除了这两个文件之外，中心化的 PM 一般会提供依赖包的托管服务，比如 npm 提供的 npmjs.com 可以集中查找和下载 npm 包。如果是去中心化的 PM 比如 iOS 的 Carthage 和 SPM 就只能通过 Git 仓库的地址了。 CocoaPods CocoaPods 是开发 iOS/macOS 应用程序的一个第三方库的依赖管理工具。 利用 CocoaPods，可以定义自己的依赖关系（简称 Pods），以及在整个开发环境中对第三方库的版本管理非常方便。 下面我们以 CocoaPods 为例。 Podfile Podfile 是一个文件，以 DSL（其实直接用了 Ruby 的语法）来描述依赖关系，用于定义项目所需要使用的第三方库。该文件支持高度定制，你可以根据个人喜好对其做出定制。更多相关信息，请查阅 Podfile 指南。 Podfile.lock 这是 CocoaPods 创建的最重要的文件之一。它记录了需要被安装的 Pod 的每个已安装的版本。如果你想知道已安装的 Pod 是哪个版本，可以查看这个文件。推荐将 Podfile.lock 文件加入到版本控制中，这有助于整个团队的一致性。 Manifest.lock 这是每次运行 pod install 命令时创建的 Podfile.lock 文件的副本。如果你遇见过这样的错误 沙盒文件与 Podfile.lock 文件不同步 (The sandbox is not in sync with the Podfile.lock)，这是因为 Manifest.lock 文件和 Podfile.lock 文件不一致所引起。由于 Pods 所在的目录并不总在版本控制之下，这样可以保证开发者运行 App 之前都能更新他们的 Pods，否则 App 可能会 crash，或者在一些不太明显的地方编译失败。 Master Specs Repo Ultimately, the goal is to improve discoverability of, and engagement in, third party open-source libraries, by creating a more centralized ecosystem. 作为包管理工具，CocoaPods 的目标是为我们提供一个更加集中的生态系统，来提高依赖库的可发现性和参与度。本质上是为了提供更好的检索和查询功能，可惜成为了它的问题之一。因为 CocoaPods 通过官方的 Spec 仓库来管理这些注册的依赖库。随着不断新增的依赖库导致 Spec 的更新和维护成为了使用者的包袱。 好在这个问题在 1.7.2 版本中已经解决了，CocoaPods 提供了 Mater Repo CDN ，可以直接 CDN 到对应的 Pod 地址而无需在通过本地的 Spec 仓库了。同时在 1.8 版本中，官方默认的 Spec 仓库已替换为 CDN，其地址为  https://cdn.cocoapods.org。 Ruby 生态及工具链 对于一部分仅接触过 CocoaPods 的同学，其 PM 可能并不熟悉。其实 CocoaPods 的思想借鉴了其他语言的 PM 工具，例：RubyGems, Bundler, npm 和 Gradle。 我们知道 CocoaPods 是通过 Ruby 语言实现的。它本身就是一个 Gem 包。理解了 Ruby 的依赖管理有助于我们更好的管理不同版本的 CocoaPods 和其他 Gem。同时能够保证团队中的所有同事的工具是在同一个版本，这也算是敏捷开发的保证吧。 RVM &amp;amp; rbenv RVM 和 rbenv 都是管理多个 Ruby 环境的工具，它们都能提供不同版本的 Ruby 环境管理和切换。 个人目前使用 rbenv，至于 Why rbenv 感兴趣的同学可以看看，最终还是看个人。 RubyGems The RubyGems software allows you to easily download, install, and use ruby software packages on your system. The software package is called a “gem” which contains a packaged Ruby application or library. RubyGems 是 Ruby 的一个包管理工具，这里面管理着用 Ruby 编写的工具或依赖我们称之为 Gem。 并且 RubyGems 还提供了 Ruby 组件的托管服务，可以集中式的查找和安装 library 和 apps。当我们使用 gem install xxx 时，会通过 rubygems.org 来查询对应的 Gem Package。而 iOS 日常中的很多工具都是 Gem 提供的，例：Bundler，fastlane，jazzy，CocoaPods 等。 在默认情况下 Gems 总是下载 library 的最新版本，这无法确保所安装的 library 版本符合我们预期。因此我们还缺一个工具。 Bundler Bundler 是管理 Gem 依赖的工具，可以隔离不同项目中 Gem 的版本和依赖环境的差异，也是一个 Gem。 Bundler 通过读取项目中的依赖描述文件 Gemfile ，来确定各个 Gems 的版本号或者范围，来提供了稳定的应用环境。当我们使用 bundle install 它会生成 Gemfile.lock 将当前 librarys 使用的具体版本号写入其中。之后，他人再通过 bundle install 来安装 libaray 时则会读取 Gemfile.lock 中的 librarys、版本信息等。 Gemfile 可以说 CocoaPods** 其实是 iOS 版的 RubyGems + Bundler 组合。Bundler 依据项目中的 Gemfile 文件来管理 Gem，而 CocoaPods 通过 Podfile 来管理 Pod。 Gemfile 配置如下： source 'https://gems.example.com' do gem 'cocoapods', '1.8.4' gem 'another_gem', :git =&amp;gt; 'https://looseyi.github.io.git', :branch =&amp;gt; 'master' end 可见，Podfile 的 DSL 写法和 Gemfile 如出一辙。那什么情况会用到 Gemfile 呢 ？ CocoaPods 每年都会有一些重大版本的升级，前面聊到过 CocoaPods 在 install 过程中会对项目的 .xcodeproj 文件进行修改，不同版本其有所不同，这些在变更都可能导致大量 conflicts，处理不好，项目就不能正常运行了。我想你一定不愿意去修改 .xcodeproj 的冲突。 如果项目是基于 fastlane 来进行持续集成的相关工作以及 App 的打包工作等，也需要其版本管理等功能。 如何安装一套可管控的 Ruby 工具链？ 讲完了这些工具的分工，然后来说说实际的运用。我们可以使用 homebrew + rbenv + RubyGems + Bundler 这一整套工具链来控制一个工程中 Ruby 工具的版本依赖。 以下是我认为比较可控的 Ruby 工具链分层管理图。下面我们逐一讲述每一层的管理方式，以及实际的操作方法。 1. 使用 homebrew 安装 rbenv $ brew install rbenv 安装成功后输入 rbenv 就可以看到相关提示： $ rbenv rbenv 1.1.2 Usage: rbenv &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;] Some useful rbenv commands are: commands List all available rbenv commands local Set or show the local application-specific Ruby version global Set or show the global Ruby version shell Set or show the shell-specific Ruby version install Install a Ruby version using ruby-build uninstall Uninstall a specific Ruby version rehash Rehash rbenv shims (run this after installing executables) version Show the current Ruby version and its origin versions List installed Ruby versions which Display the full path to an executable whence List all Ruby versions that contain the given executable See `rbenv help &amp;lt;command&amp;gt;' for information on a specific command. For full documentation, see: https://github.com/rbenv/rbenv#readme 2. 使用 rbenv 管理 Ruby 版本 使用 rbenv 来安装一个 Ruby 版本，这里我使用刚刚 release Ruby 2.7： $ rbenv install 2.7.0 这个安装过程有些长，因为要下载 openssl 和 Ruby 的解释器，大概要 20 分钟左右。 安装成功后，我们让其在本地环境中生效： $ rbenv shell 2.7.0 输入上述命令后，可能会有报错。 rbenv 提示我们在 .zshrc 中增加一行 eval &quot;$(rbenv init -)&quot; 语句来对 rbenv 环境进行初始化。如果报错，我们增加并重启终端即可。 $ ruby --version ruby 2.7.0p0 (2019-12-25 revision 647ee6f091) [x86_64-darwin19] $ which ruby /Users/gua/.rbenv/shims/ruby 切换之后我们发现 Ruby 已经切换到 rbenv 的管理版本，并且其启动 PATH 也已经变成 rbenv 管理下的 Ruby。并且我们可以看一下 Ruby 捆绑的 Gem 的 PATH ： $ which gem /Users/bytedance/.rbenv/shims/gem 对应的 Gem 也已经变成 rbenv 中的 PATH 。 3. 查询系统级 Gem 依赖 如此，我们使用 rbenv 已经对 Ruby 及其 Gem 环境在版本上进行了环境隔离。我们可以通过 gem list 命令来查询当前系统环境下所有的 Gem 依赖： $ gem list *** LOCAL GEMS *** activesupport (4.2.11.3) ... claide (1.0.3) cocoapods (1.9.3) cocoapods-core (1.9.3) cocoapods-deintegrate (1.0.4) cocoapods-downloader (1.3.0) cocoapods-plugins (1.0.0) cocoapods-search (1.0.0) cocoapods-stats (1.1.0) cocoapods-trunk (1.5.0) cocoapods-try (1.2.0) 记住这里的 CocoaPods 版本，我们后面项目中还会查询。 如此我们已经完成了全部的 Ruby、Gem 环境的配置，我们通过一张漏斗图再来梳理一下： 如何使用 Bundler 管理工程中的 Gem 环境 下面我们来实践一下，如何使用 Bundler 来锁定项目中的 Gem 环境，从而让整个团队统一 Gem 环境中的所有 Ruby 工具版本。从而避免文件冲突和不必要的错误。 下面是在工程中对于 Gem 环境的层级图，我们可以在项目中增加一个 Gemfile 描述，从而锁定当前项目中的 Gem 依赖环境。 以下也会逐一讲述每一层的管理方式，以及实际的操作方法。 1. 在 iOS 工程中初始化 Bundler 环境 首先我们有一个 iOS Demo 工程 - GuaDemo ： $ ls -al total 0 drwxr-xr-x 4 gua staff 128 Jun 10 14:47 . drwxr-xr-x@ 52 gua staff 1664 Jun 10 14:47 .. drwxr-xr-x 8 gua staff 256 Jun 10 14:47 GuaDemo drwxr-xr-x@ 5 gua staff 160 Jun 10 14:47 GuaDemo.xcodeproj 首先先来初始化一个 Bundler  环境（其实就是自动创建一个 Gemfile 文件）： $ bundle init Writing new Gemfile to /Users/Gua/GuaDemo/Gemfile 2. 在 Gemfile 中声明使用的 CocoaPods 版本并安装 之后我们编辑一下这个 Gemfile 文件，加入我们当前环境中需要使用 CocoaPods 1.5.3 这个版本，则使用 Gemfile 的 DSL 编写以下内容： # frozen_string_literal: true source &quot;https://rubygems.org&quot; git_source(:github) {|repo_name| &quot;https://github.com/#{repo_name}&quot; } # gem &quot;rails&quot; gem &quot;cocoapods&quot;, &quot;1.5.3&quot; 编写之后执行一下 bundle install ： $ bundle install Fetching gem metadata from https://gems.ruby-china.com/............ Resolving dependencies... ... Fetching cocoapods 1.5.3 Installing cocoapods 1.5.3 Bundle complete! 1 Gemfile dependency, 30 gems now installed. 发现 CocoaPods 1.5.3 这个指定版本已经安装成功，并且还保存了一份 Gemfile.lock 文件用来锁存这次的依赖结果。 3. 使用当前环境下的 CocoaPods 版本操作 iOS 工程 此时我们可以检查一下当前 Bundler 环境下的 Gem 列表： $ bundle exec gem list *** LOCAL GEMS *** activesupport (4.2.11.3) atomos (0.1.3) bundler (2.1.4) CFPropertyList (3.0.2) claide (1.0.3) cocoapods (1.5.3) ... 发现相比于全局 Gem 列表，这个列表精简了许多，并且也只是基础 Gem 依赖和 CocoaPods 的 Gem 依赖。此时我们使用 bundle exec pod install 来执行 Install 这个操作，就可以使用 CocoaPods 1.5.3 版本来执行 Pod 操作了（当然，前提是你还需要写一个 Podfile ，大家都是 iOSer 这里就略过了）。 $ bundle exec pod install Analyzing dependencies Downloading dependencies Installing SnapKit (5.0.1) Integrating client project [!] Please close any current Xcode sessions and use `GuaDemo.xcworkspace` for this project from now on. Sending stats Pod installation complete! There is 1 dependency from the Podfile and 1 total pod installed. 可以再来看一下 Podfile.lock 文件： cat Podfile.lock PODS: - SnapKit (5.0.1) DEPENDENCIES: - SnapKit (~&amp;gt; 5.0.0) SPEC REPOS: https://github.com/cocoapods/specs.git: - SnapKit SPEC CHECKSUMS: SnapKit: 97b92857e3df3a0c71833cce143274bf6ef8e5eb PODFILE CHECKSUM: 1a4b05aaf43554bc31c90f8dac5c2dc0490203e8 COCOAPODS: 1.5.3 发现使用的 CocoaPods 的版本确实是 1.5.3 。而当我们不使用 bundle exec 执行前缀，则会使用系统环境中的 CocoaPods 版本。如此我们也就验证了工程中的 Gem 环境和系统中的环境可以通过 Bundler 进行隔离。 总结 通过版本管理工具演进的角度可以看出，CocoaPods 的诞生并非一蹴而就，也是不断地借鉴其他管理工具的优点，一点点的发展起来的。VCS 工具从早期的 SVN、Git，再细分出 Git Submodule，再到各个语言的 Package Manager 也是一直在发展的。 虽然 CocoaPods 作为包管理工具控制着 iOS 项目的各种依赖库，但其自身同样遵循着严格的版本控制并不断迭代。希望大家可以从本文中认识到版本管理的重要性。 通过实操 Bundler 管理工程的全流程，学习了 Bundler 基础，并学习了如何控制一个项目中的 Gem 版本信息。 后续我们将会围绕 CocoaPods ，从工具链逐渐深入到细节，根据我们的使用经验，逐一讲解。 知识点问题梳理 PM 是如何进行依赖库的版本管理？ Ruby 和 RVM/rbenv 之间的关系是什么？ Gem、Bundler 和 CocaPods 之间的关系是什么？ 如何通过 Bundler 来管理工程中的 Gem 环境？如何锁死工程内部的 CocoaPods 版本？</summary></entry></feed>